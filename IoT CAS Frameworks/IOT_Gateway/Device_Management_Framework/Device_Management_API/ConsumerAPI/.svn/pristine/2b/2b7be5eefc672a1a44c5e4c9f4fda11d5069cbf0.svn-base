/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class GetTasktypegroups extends HttpServlet
{

    static Logger log = Logger.getLogger(GetTasktypegroups.class);

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");


        StringBuffer results = new StringBuffer("<tasktype-groups>");
        Connection con = null;
        boolean bFLAG = false;
        boolean checksession = true;
        String opStatus = null;
        String opDescription = null;
        StringBuffer result = new StringBuffer("<tasktype>");

        HttpSession HSSessions;
        Object OUser1;
        String szUsers;
        Integer ISecurityUsers = 1;
        String szTaskType = "";
        String username = null;
        String sessionid = null;
        String customerid = null;

        try
        {
            HSSessions = request.getSession(true);
            // OUser1 = HSSessions.getValue("user");
            //szUsers = OUser1.toString();
            // ISecurityUsers = (Integer) HSSessions.getValue("ints");
            //username=request.getParameter("username");
            //sessionid=request.getParameter("sessionid");

            log.info("request parameters get");
        } catch (Exception k)
        {
            k.printStackTrace();
            log.info("exception while getting request parameters");
        }


        java.util.Vector VGroupVector = new java.util.Vector();
        if (checksession)
        {


            try
            {
                szTaskType = request.getParameter("task_type");
                customerid=request.getParameter("customerid");

            } catch (Exception e)
            {
                opStatus = "108";
                opDescription = "Invalid input";

            LogWriter.writeDebug("EXCEPTION : Getting the request.getParameter() value task_type",1);
            }
            try
            {
                con = DatabaseConnection.getRefDatabaseConnection(request);
                if (con != null)
                {
                    if (ISecurityUsers.intValue() == 1 && szTaskType != null)
                    {

                        bFLAG = true;
                        try
                        {

                            result.append(szTaskType);
                            System.out.println("tasktype:" + szTaskType);
                            result.append("</tasktype>");
                            result.append("<groups>");
                            PreparedStatement statement = con.prepareStatement("Select groupname from " + DBConstants.TASKTYPE_GROUP_TABLE + " where tasktype = ?");
                            statement.setString(1, szTaskType);
                            ResultSet rs = statement.executeQuery();
                            while (rs.next())
                            {

                                result.append("<group>");
                                result.append(rs.getString("groupname"));
                                result.append("</group>");

                            
                            }
                            rs.close();
                            statement.close();
                            result.append("</groups>");
                            opStatus = "0";
                            opDescription = "Opearation Success";
                            log.info("operation success");

                        } catch (Exception e)
                        {
                            e.printStackTrace();
                            opStatus = "101";
                            opDescription = "Database problem";
                             log.error("database problem", e);
                        }
                    } else
                    {
                        opStatus = "103";
                        opDescription = "Security level failed";
                        log.info("security level failed");
                    }

                } else
                {
                    opStatus = "101";
                    opDescription = "Database Connection failed";
                    log.info("database connection failed");
                
                }
            } catch (Exception e)
            {
                e.printStackTrace();
                opStatus = "106";
                opDescription = "Unable to process the request action";
                log.error("error while performing request action", e);
            }finally{
                try{
                    if(con!=null){
                        con.close();

                    }
                }catch(Exception e){
                    e.printStackTrace();
                    log.error("exception while closing connectin ",e);
                }
            }
        } else
        {
            opStatus = "102";
            opDescription = "Invalid Session";
        }


        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            if (!(result == null))
            {
                
                results.append(result);
            
            }
            results.append("</tasktype-groups>");
            response.getWriter().write(results.toString());
        
        } catch (Exception e)
        {
            LogWriter.writeDebug("exception while writing output");
        }finally{
            results=null;
            result=null;
        }







    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
