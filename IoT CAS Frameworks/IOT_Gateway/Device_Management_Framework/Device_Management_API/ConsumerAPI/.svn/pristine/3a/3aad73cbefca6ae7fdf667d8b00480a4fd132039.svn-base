/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import java.util.logging.Level;
import javax.servlet.http.HttpUtils.*;
import java.util.*;
import java.sql.*;
import Model.*;
import org.apache.log4j.Logger;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author gopal
 */
public class GetStatus extends HttpServlet
{

    static Logger log = Logger.getLogger(GetStatus.class);

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {

        response.setContentType("text/xml;charset=UTF-8");
        Connection con = null;

        StringBuffer results = new StringBuffer("<tasktype-status>");
        StringBuffer result = null;
        String opStatus = "";
        String opDescription = "";
        String customerid = "";
        Statement stat = null;
        ResultSet rs = null;
        String szSessionid = "";
        boolean checksession = false;
        ArrayList<String> userTasktypes = new ArrayList<String>();
        szSessionid = request.getParameter("szsessionid");
        try
        {
            customerid = request.getParameter("customerid");
            String Tasktype = request.getParameter("tasktype");
            /*checksession = CheckSession.checkSession(request, szSessionid);
            System.out.println("Tasktype::" + Tasktype);
            if (checksession)
            {*/
                con = DatabaseConnection.getAVSAConnection(request);
                if (Tasktype != null && !Tasktype.equals(""))
                {

                    result = new StringBuffer("<task-type>");
                    result.append(Tasktype);
                    result.append("</task-type>");
                    log.info("------------I m in START of calling Getstatuschangdetails  from Client----------------");

                    if (con != null)
                    {
                        if (Tasktype.equals("All"))
                        {

                            PreparedStatement statement4 = con.prepareStatement("Select * from " + DBConstants.TASKTYPE_TABLE + " ");
                            ResultSet rs4 = statement4.executeQuery();
                            while (rs4.next())
                            {

                                userTasktypes.add((String) rs4.getString("task_type"));

                            }
                            statement4.close();
                            rs4.close();
                            Tasktype = "";
                            int UserTasktypessize = userTasktypes.size();
                            for (int i = 0; i < UserTasktypessize; i++)
                            {
                                if (i == (UserTasktypessize - 1))
                                {

                                    Tasktype = Tasktype + "'" + (String) userTasktypes.get(i) + "'";
                                } else
                                {

                                    Tasktype = Tasktype + "'" + (String) userTasktypes.get(i) + "',";

                                }

                            }

                        } else
                        {
                            Tasktype = "'" + Tasktype + "'";

                        }

                        stat = con.createStatement();
                        System.out.println("select distinct(status) from gastatus where task_type in(" + Tasktype + ")");
                        rs = stat.executeQuery("select distinct(status) from gastatus where task_type in(" + Tasktype + ")");
                        if (rs != null)
                        {
                            while (rs.next())
                            {
                                String take = rs.getString("status");
                                result.append("<status>");
                                result.append(take);
                                System.out.println(take);
                                result.append("</status>");

                            }
                        } else
                        {
                            result.append("<status>");

                            result.append("This tasktype doesn't have any status");
                            // System.out.println(take);
                            result.append("</status>");
                        }

                        opStatus = "0";
                        opDescription = "Operation Success";
                    } else
                    {
                        opStatus = "101";
                        opDescription = "Database connection failed";
                    }
                } else
                {
                    opStatus = "108";
                    opDescription = "Invalid Inputs";
                }
            /*} else
            {
            opStatus = "102";
            opDescription = "Invalid Session";
            }*/
        } catch (Exception e)
        {
            opStatus = "106";
            opDescription = "Unable to process the request action";

            e.printStackTrace();
            log.error("error while processing your request", e);
        } finally
        {
            try
            {
                userTasktypes = null;
                stat = null;
                
                if (con != null)
                {
                    con.close();
                    rs.close();
                }
            } catch (SQLException ex)
            {
                log.error("error while closing connection", ex);
                java.util.logging.Logger.getLogger(GetStatus.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            if (!(result == null))
            {
                results.append(result);
            }
            results.append("</tasktype-status>");
            response.getWriter().write(results.toString());

        } catch (Exception e)
        {
            e.printStackTrace();
            LogWriter.writeDebug("exception while writing output");
        } finally
        {
            try
            {
                results = null;
                result = null;
            } catch (Exception e)
            {
                e.printStackTrace();
            }
        }





    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
