/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;
import java.util.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class GetUserGroupRolesConfig extends HttpServlet
{

    static Logger log = Logger.getLogger(GetUserGroupRolesConfig.class);

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");
        Connection con = null;
        Statement statement1 = null;
        ResultSet rs1 = null;
        HttpSession sessions;
        HashMap hashMap = new HashMap();
        int iGroupLen = 0;
        String szGroup = null;
        String szUserString = "";
        boolean checksession = true;
        StringBuffer results = new StringBuffer("<user-grouprolesconfig>");
        StringBuffer result = null;
        String opStatus = null;
        String opDescription = null;
        String[] szRoleArr1 = null;
        String szRoleTemp = null;
        ArrayList<String> vGroupArray = new ArrayList<String>();
        szUserString = request.getParameter("user_id");
        String szFlag = request.getParameter("flag");
        String customerid=request.getParameter("customerid");
        String username = null;
        String sessionid = null;
        if (szFlag == null)
        {
            szFlag = "false";
        }
        try
        {
            sessions = request.getSession(true);
        //username=request.getParameter("username");
        //sessionid=request.getParameter("sessionid");
        } catch (Exception k)
        {
            k.printStackTrace();
            System.out.println("Invalid session");
        }
        if (checksession)
        {
            try
            {
                con = DatabaseConnection.getGuiDatabaseConnection(request);
            } catch (Exception e)
            {
                e.printStackTrace();
                log.error("error connecting database", e);
            }
            if (con != null)
            {
                System.out.println("aaa:::::" + con);
                try
                {
                    result=new StringBuffer("<groups>");
                    statement1 = con.createStatement();
                    rs1 = statement1.executeQuery("SELECT groupname from " + DBConstants.AGENT_GROUP_TABLE + " where userid='" + szUserString + "'");
                    while (rs1.next())
                    {
                        vGroupArray.add((String) rs1.getString("groupname"));
                    }
                    rs1.close();
                    statement1.close();
                    iGroupLen = vGroupArray.size();
                    Iterator it = vGroupArray.iterator();
                    while (it.hasNext())
                    {
                        szGroup = (String) it.next();
                        System.out.println("Group name:" + szGroup);
                        result.append("<group>");
                        result.append("<name>");
                        result.append(szGroup);
                        result.append("</name>");
                        String szRole = "";
                        statement1 = con.createStatement();
                        PreparedStatement ps = con.prepareStatement("select role from gagrouproles where groupname=?");
                        ps.setString(1, szGroup);
                        rs1 = ps.executeQuery();
                        System.out.println("after execute query");
                        if (rs1 != null)
                        {
                            while (rs1.next())
                            {
                                szRoleTemp = (String) rs1.getString("role");
                                szRoleArr1 = szRoleTemp.split(",");
                                System.out.println("Length is --::::" + szRoleArr1.length);
                                for (int m = 0; m < szRoleArr1.length; m++)
                                {
                                    szRole = szRoleArr1[m];
                                    if (szRoleTemp.equalsIgnoreCase(null))
                                    {
                                        result.append("<role>");
                                        result.append("none");
                                        result.append("</role>");
                                    } else
                                    {
                                        result.append("<role>");
                                        result.append(szRoleArr1[m]);
                                        result.append("</role>");
                                    }
                                }
                            }
                        } else
                        {
                            result.append("<role>");
                            result.append("none");
                            result.append("</role>");
                        }

                        szRoleTemp = null;
                        szRoleArr1 = null;
                        //String szRole =null;
                        rs1.close();
                        statement1.close();
                        result.append("</group>");
                    }
                    result.append("</groups>");
                    opStatus = "0";
                    opDescription = "Operation Success";
                    log.info("user grouproles get successfully");
                } catch (Exception e)
                {
                    result.append("</groups>");
                    e.printStackTrace();
                    opStatus = "106";
                    opDescription = "Unable to perform request action";
                    log.error("unable to perform request action");
                }
            } else
            {
                opStatus = "101";
                opDescription = "Database Error";
                log.info("database error");
            }
            try
            {
                if (con != null)
                {
                    con.close();
                }
            } catch (Exception e)
            {
                e.printStackTrace();
                log.error("error closing connection", e);
            }
        } else
        {
            opStatus = "102";
            opDescription = "Invalid Session";
            log.info("invalid session");
        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            results.append("<user-id>");
            results.append(szUserString);
            results.append("</user-id>");

            if (!(result == null))
            {

                results.append(result);

            }

            results.append("</user-grouprolesconfig>");
            response.getWriter().write(results.toString());
        } catch (Exception e)
        {
            e.printStackTrace();
            System.out.println("xml response fail");
        } finally
        {
            results = null;
            result = null;
        }




    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
