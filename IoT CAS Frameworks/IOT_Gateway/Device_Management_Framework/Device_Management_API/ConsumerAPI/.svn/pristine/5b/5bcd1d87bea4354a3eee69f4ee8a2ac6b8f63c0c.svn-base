/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import getcomment.*;

/**
 *
 * @author gopal
 */
public class TaskDetails extends HttpServlet
{

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");

        StringBuffer results = new StringBuffer("<task-details>");
        StringBuffer result = null;
        String opStatus = "";
        String opDescription = "";
        String customerid = "";
        boolean paramcheck = false;
        String szSession = null;
        String szTaskID = null;
        GetCommentsResponse commentresp = null;
        String CommentsTester = "go";
        boolean checksession = false;
        try
        {
            szSession = request.getParameter("szsessionid");
            szTaskID = request.getParameter("taskid");
            customerid = request.getParameter("customerid");
            if ((!szTaskID.equalsIgnoreCase("") && szTaskID != null) && (!szSession.equalsIgnoreCase("") && szSession != null))
            {
                paramcheck = true;
            }
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        if (paramcheck)
        {
            /*checksession = CheckSession.checkSession(request, szSession);
            if (checksession)
            {*/
                try
                {

                    System.out.println("------------I m in START of calling getdetails service from Client----------------");
                    String sztarget = TargetEndpoint.getTargetEndpoint(request);
                    System.out.println("Service target::" + sztarget + "/proChara/services/GetComment");
                    String targetEndpoint = sztarget + "/proChara/services/GetComment";
                    System.out.println("Target End Point:::" + targetEndpoint);
                    System.out.println("Target End Point***************** " + targetEndpoint);
                    GetCommentStub commentstub = new GetCommentStub(targetEndpoint);
                    GetCommentsRequest commentreq = new GetCommentsRequest();
                    commentreq.setSzSessionId(szSession);
                    commentreq.setSzTaskId(szTaskID);
                    commentresp = commentstub.getComments(commentreq);

                } catch (Exception e)
                {
                    e.printStackTrace();
                    CommentsTester = "error";
                }

                String[] getSzcomment = null;
                String[] getSzActions = null;
                String[] getSzUpdatedDate = null;
                String[] getszUpdatedBy = null;

                try
                {
                    System.out.println(commentresp);
                    if (commentresp != null)
                    {
                        System.out.println("Am INSIDE");
                        getSzcomment = commentresp.getSzComment();
                        getSzActions = commentresp.getSzActions();
                        getSzUpdatedDate = commentresp.getSzUpdatedDate();
                        getszUpdatedBy = commentresp.getSzUpdatedBy();
                        System.out.println("comments get successfully");
                    }

                    if (getSzcomment != null && CommentsTester.equalsIgnoreCase("go"))
                    {
                        result = new StringBuffer("<comments>");
                        System.out.println("comments size::" + getSzcomment.length);
                        for (int i = 0; i < getSzcomment.length; i++)
                        {

                            String comment = getSzcomment[i];
                            String Action = getSzActions[i];
                            String Updateddate = getSzUpdatedDate[i];
                            String UpdatedBy = getszUpdatedBy[i];
                            if (comment != null)
                            {
                                result.append("<updatedby>");
                                result.append(UpdatedBy);
                                result.append("</updatedby>");
                                result.append("<comment>");
                                result.append(comment);
                                result.append("</comment>");
                                result.append("<updateddate>");
                                result.append(Updateddate);
                                result.append("</updateddate>");

                            }
                        }
                        result.append("</comments>");
                        System.out.println("Successfully getting complete task comments");
                        opStatus = "0";
                        opDescription = "Comments get successfully";


                    } else if (CommentsTester.equalsIgnoreCase("error"))
                    {

                        opStatus = "112";
                        opDescription = "Error occured while calling webservice";

                    } else
                    {
                        opStatus = "107";
                        opDescription = "No data found";
                    }

                } catch (Exception e)
                {
                    e.printStackTrace();
                    opStatus = "106";
                    opDescription = "Unable to process the request";

                } finally
                {
                    getSzcomment = null;
                    getSzActions = null;
                    getSzUpdatedDate = null;
                    getszUpdatedBy = null;

                }

            /*} else
            {
            opStatus = "102";
            opDescription = "Invalid Session";
            }*/
        } else
        {
            opStatus = "108";
            opDescription = "Invalid Inputs";
        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            if (!(result == null))
            {
                results.append(result);
            }
            results.append("</task-details>");
            response.getWriter().write(results.toString());

        } catch (Exception e)
        {
            e.printStackTrace();
            LogWriter.writeDebug("exception while writing output");
        } finally
        {
            try
            {
                results = null;
                result = null;
            } catch (Exception e)
            {
                e.printStackTrace();
            }
        }



    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
