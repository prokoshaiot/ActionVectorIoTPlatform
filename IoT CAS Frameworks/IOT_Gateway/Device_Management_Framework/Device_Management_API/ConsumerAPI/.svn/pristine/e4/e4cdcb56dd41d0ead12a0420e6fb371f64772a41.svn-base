/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
/**
 *
 * @author gopal
 */
public class GetGroupassignees extends HttpServlet
{
    static Logger log=Logger.getLogger(GetGroupassignees.class);
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");
        Connection con = null;
        boolean bFLAG = false;
        boolean checksession = true;
        StringBuffer results = new StringBuffer("<group-assignees>");
        StringBuffer result = null;
        String opStatus = null;
        String opDescription = null;
        String sessionid=null;
        String customerid="";
        String szPrimaryGroup = "";
        String szUserId = "";
        boolean bCheckFlag = false;
        if (checksession)
        {
            szPrimaryGroup = request.getParameter("primary_group");
            customerid=request.getParameter("customerid");
            try
            {
                // To check the Task type liescence
                con = DatabaseConnection.getRefDatabaseConnection(request);
                if (con != null)
                {
                    try
                    {
                        result=new StringBuffer("<group>");
                        result.append("<name>");
                        String name = szPrimaryGroup;
                        result.append(name);
                        result.append("</name>");
                        PreparedStatement statement5 = con.prepareStatement("Select userid from " + DBConstants.AGENT_GROUP_TABLE + " where groupname = ?");
                        statement5.setString(1, szPrimaryGroup);
                        ResultSet rs5 = statement5.executeQuery();
                        while (rs5.next())
                        {
                            bCheckFlag = true;
                            szUserId = rs5.getString("userid");
                            result.append("<assignee>");
                            result.append(szUserId);
                            result.append("</assignee>");
                        }
                        rs5.close();
                        statement5.close();
                    } catch (Exception e)
                    {
                        e.printStackTrace();
                        opStatus = "107";
                        opDescription = "No records found";
                    log.error("EXCEPTION : Getting the values from gaagentgroup	");
                    }

                    result.append("</group>");
                    opStatus = "0";
                    opDescription = "group assignee get Successfully";
                    log.info("operation success");
                } else
                {
                    opStatus = "101";
                    opDescription = "Database operation failed";
                    log.info("database operation failed");
                }
            } catch (Exception e)
            {
                e.printStackTrace();
                opStatus = "106";
                opDescription = "Unable to process the request";
                log.error("exception while processing request", e);
            }finally{
                try{
                    if(con!=null){
                        con.close();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                    log.error("error while closing connection", e);
                }
            }
        } else
        {
            opStatus = "102";
            opDescription = "Invalid Session Login again";
            log.error("Invalid session");
        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            if (!(result == null))
            {
                
                results.append(result);
            
            }
            results.append("</group-assignees>");
            response.getWriter().write(results.toString());
        } catch (Exception e)
        {
            e.printStackTrace();
            System.out.println("xml response fail");
        }
        finally{
            results=null;
            result=null;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
