/**
 * *********************************************************************
 * Software Developed by Merit Systems Pvt. Ltd., No. 42/1, 55/c, Nandi Mansion,
 * 40th Cross, Jayanagar 8th Block Bangalore - 560 070, India Work Created for
 * Merit Systems Private Limited All rights reserved
 *
 * THIS WORK IS SUBJECT TO INDIAN AND INTERNATIONAL COPYRIGHT LAWS AND TREATIES
 * NO PART OF THIS WORK MAY BE USED, PRACTICED, PERFORMED, COPIED, DISTRIBUTED,
 * REVISED, MODIFIED, TRANSLATED, ABRIDGED, CONDENSED, EXPANDED, COLLECTED,
 * COMPILED, LINKED, RECAST, TRANSFORMED OR ADAPTED WITHOUT THE PRIOR WRITTEN
 * CONSENT ANY USE OR EXPLOITATION OF THIS WORK WITHOUT AUTHORIZATION COULD
 * SUBJECT THE PERPETRATOR TO CRIMINAL AND CIVIL LIABILITY.
 * *********************************************************************
 */
package com.merit.dashboard.Availability;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.apache.log4j.Logger;
import com.merit.connection.ConnectionDAO;
import com.merit.dashboard.DBUtil.DBUtilHelper;

/**
 *
 * Case ::1 Get all the host Availability for a selected period time Case ::2 If
 * the availability is not found in a selected period of time it check for last
 * occurence of downtime Then calculate percent of availability Case ::3 If
 * downtime not found then it checks for the last occurence of the uptime.
 *
 *
 */
public class GetAvailability {

    static Logger log = Logger.getLogger(GetAvailability.class);
    static StringBuffer sz_avail_json = null;

    public static String getAvailabilityByPeriod(long emilli, long smilli,
            String resourceType,
            String customer, String timestampselection, String cCustomer, String service) throws SQLException {
        sz_avail_json = new StringBuffer();
        sz_avail_json.append("[");
        ResultSet rs = null;
        String host = null;
        //String subservice = null;
        String sz_resourceType = null;
        String category = null;
        String metricType = null;
        String metricvalue = null;
        float metricthresholdvalue = 0.0f;
        String resourceId = null;
        String szAvailJson = "[]";
        String custQuery = " and customerid in (select id from customerinfo where customername='" + cCustomer + "')";
        String serviceQuery = " and service='" + service + "'";
                String ccustomer;//
                String dbservice;//

        try {
//            Connection uniqueconnection = ConnectionDAO.getConnection(customer);
//            stat = uniqueconnection.createStatement();

            /*if (resourceType.split(",").length == 1) {
             resourceType = "'" + resourceType + "'";
             }*/

            if (resourceType.equals("'Desktop'")) {

                /*String szQuery = "select "
                 + "customername,service,subservice,"
                 + "host,resourceId,resourceType  "
                 + "from customerinfo,servicemetrics where "
                 + "service is not null  and service!='null' "
                 + "and resourcetype in (" + resourceType + ") and customerid=id group by customername,service,subservice,"
                 + "resourcetype,host,resourceid";*/
                String szQuery = "select "
                        + "customername,service,subservice,"
                        + "host,resourceId,resourceType  "
                        + "from customerinfo,servicemetrics where "
                        + "service is not null  and service!='null' "
                        + "and resourcetype in (" + resourceType + ")";
                if (cCustomer != null) {
                    szQuery += custQuery;
                }
                if (service != null) {
                    szQuery += serviceQuery;
                }
                szQuery += " group by customername,service,subservice,resourcetype,host,resourceid";
                rs = ConnectionDAO.executerQuery(szQuery, customer);
                while (rs.next()) {
                    ccustomer = rs.getString("customername");
                    host = rs.getString("host");
                    dbservice = rs.getString("service");
                    resourceId = rs.getString("resourceId");
                    sz_resourceType = rs.getString("resourceType");
                    sz_avail_json.append(
                            "{"
                            + "\"Customer\"      : \"" + ccustomer + "\","
                            + "\"ServerName\"    : \"" + host + "\","
                            + "\"ResourceType\"  : \"" + sz_resourceType + "\","
                            + "\"ServiceName\"   : \"" + dbservice + "\","
                            + "\"ResourceNames\" : \"\","
                            + "\"ResourceID\"    : \"" + resourceId + "\","
                            + "\"Health\"        : \"Default\""
                            + "},");
                }
                ConnectionDAO.closeStatement();
                if (sz_avail_json.length() > 1) {
                    szAvailJson = sz_avail_json.substring(0, sz_avail_json.length() - 1).toString() + "]";
                }
                return szAvailJson;
            } else {
                /*String szQuery = "select sum(case when timestamp1<" + smilli + " and timestamp2<" + smilli + " then " + (emilli - smilli) + " when timestamp1<" + smilli + " and timestamp2>" + smilli + " then timestamp2-" + smilli + " else timestamp2-timestamp1 end) as availmetricvalue,customername,service,subservice,"
                 + "host,metrictype,category,resourceId,sla as SLA,resourceType  "
                 + "from customerinfo,servicemetrics where timestamp2 between "
                 + smilli
                 + " and "
                 + emilli
                 + " and service is not null  and service!='null' and timestamp2 is not null "
                 + "and metrictype='downtime' and resourcetype in (" + resourceType + ") and customerid=id group by metrictype,"
                 + "host,customername,service,subservice,category,resourceid,resourcetype,"
                 + "sla order by customername,service,subservice,metrictype,host";*/
                String szQuery = "select sum(case when timestamp1<" + smilli + " and timestamp2<" + smilli + " then " + (emilli - smilli)
                        + " when timestamp1<" + smilli + " and timestamp2>" + smilli + " then timestamp2-" + smilli
                        + " else timestamp2-timestamp1 end) as availmetricvalue,customername,service,subservice,"
                        + "host,metrictype,category,resourceId,sla as SLA,resourceType from customerinfo,servicemetrics where "
                        + "timestamp2 between " + smilli + " and " + emilli + " and service is not null  and service!='null' "
                        + "and timestamp2 is not null and metrictype='downtime' and resourcetype in (" + resourceType + ")";
                if (cCustomer != null) {
                    szQuery += custQuery;
                }
                if (service != null) {
                    szQuery += serviceQuery;
                }
                szQuery += " group by metrictype,host,customername,service,subservice,category,resourceid,resourcetype,sla order by "
                        + "customername,service,subservice,metrictype,host";
                log.debug("DashBoard Availability With in Time period /" + timestampselection + "/" + resourceType + "/ \n" + szQuery);
//                stat = uniqueconnection.createStatement();
                rs = ConnectionDAO.executerQuery(szQuery, customer);
                String szHostList = "";
                String downTimestamp;//
                String availStatus;//
                long SDate;//
                long EDate;//
                float downtime;//
                float first;//
                float deveation;//
                float sla_deviation;//
                String szHealth;
                while (rs.next()) {
                    ccustomer = rs.getString("customername");
                    host = rs.getString("host");
                    category = rs.getString("category");
                    dbservice = rs.getString("service");
                    metricType = rs.getString("category");
                    metricvalue = rs.getString("availmetricvalue");
                    resourceId = rs.getString("resourceId");
                    metricthresholdvalue = rs.getFloat("SLA");
                    sz_resourceType = rs.getString("resourceType");

                    downTimestamp = getDownTimeStamp(smilli, emilli, resourceType, host, resourceId, customer);
                    availStatus = getAvailSatus(resourceType, host, resourceId, customer);
                    SDate = smilli;
                    EDate = emilli;
                    downtime = Float.parseFloat(metricvalue) + Float.parseFloat(downTimestamp);
                    first = (float) (((EDate - SDate) - downtime) / (EDate - SDate)) * 100;
                    if (first < 1) {
                        first = 1f;
                    }
                    deveation = first - 99.99f;
                    sla_deviation = first;
                    szHealth = "CRITICAL";
                    if (deveation > 0 && availStatus.equals("OK")) {
                        szHealth = "OK";
                    }
                    szHostList = szHostList + "," + ccustomer + "/" + dbservice + "/" + host + "/" + sz_resourceType + "/" + resourceId;
                    sz_avail_json.append("{"
                            + "\"Customer\":\"" + ccustomer + "\","
                            + "\"ServerName\":\"" + host + "\","
                            + "\"ResourceType\":\"" + sz_resourceType + "\","
                            + "\"ResourceNames\":[\"Availability\"],"
                            + "\"ServiceName\":\"" + dbservice + "\","
                            + "\"ResourceID\":\"" + resourceId + "\","
                            + "\"ResourceValues\":[" + sla_deviation + "],"
                            + "\"SlaValues\":[99.99],"
                            + "\"Health\":\"" + szHealth + "\""
                            + "},");


                }
                if (!szHostList.equals("")) {
                    szHostList = szHostList.substring(1);
                } else {
                    szHostList = "";
                }
                szAvailJson = missedHostAvailability(
                        emilli, smilli,
                        customer, resourceType,
                        timestampselection, sz_avail_json, szHostList, cCustomer, service);
            }
            rs = null;//modified
            ConnectionDAO.closeStatement();

        } catch (Exception e) {
            e.printStackTrace();
            
            log.error("DashBoard Availability in specified Period: /" + timestampselection + "/" + resourceType + "/\n" + e.getMessage());
        }finally{
            if(rs != null){
                rs.close();
            rs = null;
        }
       }
        return szAvailJson;
    }

    private static String missedHostAvailability(long emilli,
            long smilli, String customer,
            String resourceType, String timestampselection,
            StringBuffer sz_avail_json, String szHostList, String cCustomer, String service) throws SQLException {
        //ResultSet rs = null;
        String host = null;
        ResultSet rs3 = null;
        ResultSet rs4 = null;
        ResultSet rs5 = null;
        //String subservice = null;
        String sz_resourceType = null;
        String category = null;
        String metricType = null;
        String metricvalue = null;
        float metricthresholdvalue = 0.0f;
        String resourceId = null;
        float sla_deviation;
        String szHealth = null;
        String finalJson = "[]";
        String custQuery = " and customerid in (select id from customerinfo where customername='" + cCustomer + "')";
        String serviceQuery = " and service='" + service + "'";

        try {
            /*String szAvailUpTimeQuery = "select customername,timestamp2,service,host,metrictype,subservice,category,resourceId,SLA,"
             + "resourceType from customerinfo,servicemetrics where category='availabilityME' and resourcetype in (" 
             + resourceType + ") and  timestamp1=1 and customerid=id";*/
            String szAvailUpTimeQuery = "select customername,timestamp2,service,host,metrictype,subservice,category,resourceId,SLA,"
                    + "resourceType from customerinfo,servicemetrics where category='availabilityME' and resourcetype in ("
                    + resourceType + ") and  timestamp1=1";
            if (cCustomer != null) {
                szAvailUpTimeQuery += custQuery;
            }
            if (service != null) {
                szAvailUpTimeQuery += serviceQuery;
            }
            log.debug("DashBoard Availability With watchDog Event in Time period:" + resourceType + "\n" + szAvailUpTimeQuery);
            //st = con.createStatement();
             rs3 = ConnectionDAO.executerQuery(szAvailUpTimeQuery, customer);//st.executeQuery(szAvailUpTimeQuery);
            long timestamp2;//
            String ccustomer;//
            String dbservice;//
            while (rs3.next()) {
                timestamp2 = rs3.getLong("timestamp2");
                host = rs3.getString("host");
                ccustomer = rs3.getString("customername");
                dbservice = rs3.getString("service");
                resourceId = rs3.getString("resourceId");
                sz_resourceType = rs3.getString("resourceType");

                //boolean adapterDownFlag=getDownTimeWhenAdapterStop(smilli,emilli,resourceType,host,service,resourceId,timestamp2, con);
                if (!szHostList.contains(host + "/" + sz_resourceType + "/" + resourceId)) {
                    szHostList = szHostList + "," + host + "/" + sz_resourceType + "/" + resourceId;
                    if (!szHostList.equals("") && szHostList.startsWith(",")) {
                        szHostList = szHostList.substring(1);
                    }

                    //if(!adapterDownFlag){
                    sz_avail_json.append("{\"ServerName\":\"" + host
                            + "\",\"ResourceType\":\"" + sz_resourceType
                            + "\",\"ResourceNames\":[\"Availability\"],\"ServiceName\":\"" + dbservice
                            + "\",\"Customer\":\"" + ccustomer
                            + "\",\"ResourceID\":\"" + resourceId
                            + "\",\"ResourceValues\":[100],\"SlaValues\":[99.99],\"Health\":\"OK\"},");
                    //missed_host_list.remove(host + "/" + sz_resourceType);

                    //}

                }
            }
            ConnectionDAO.closeStatement();
            // check for the host having downtime
            {
                /*String szAvailDownTimeQuery = "select timestamp1,customername,service,host,metrictype,subservice,category,resourceId,SLA,"
                 + "resourceType from customerinfo,servicemetrics where timestamp2 is NULL and category='availabilityME' and "
                 + "resourcetype in (" + resourceType + ") and  metricvalue is NULL and customerid=id";*/
                String szAvailDownTimeQuery = "select timestamp1,customername,service,host,metrictype,subservice,category,resourceId,SLA,"
                        + "resourceType from customerinfo,servicemetrics where timestamp2 is NULL and category='availabilityME' and "
                        + "resourcetype in (" + resourceType + ") and  metricvalue is NULL";
                if (cCustomer != null) {
                    szAvailDownTimeQuery += custQuery;
                }
                if (service != null) {
                    szAvailDownTimeQuery += serviceQuery;
                }
                log.debug("DashBoard szAvailDownTimeQuery:" + resourceType + "\n" + szAvailDownTimeQuery);
                //st = con.createStatement();
                 rs4 = ConnectionDAO.executerQuery(szAvailDownTimeQuery, customer);//st.executeQuery(szAvailDownTimeQuery);
                Long szDownTime_timestamp;//
                long szOrginalDownTime;//
                long szTimeRequested;//
                long SDate;//
                long EDate;//
                float downtime;//
                Float first;//
                float deveation;
                while (rs4.next()) {

                    szDownTime_timestamp = rs4.getLong("timestamp1");
                    szOrginalDownTime = emilli - szDownTime_timestamp;
                    szTimeRequested = (long) (emilli - smilli);
                    host = rs4.getString("host");
                    ccustomer = rs4.getString("customername");
                    dbservice = rs4.getString("service");
                    resourceId = rs4.getString("resourceId");
                    metricType = rs4.getString("category");
                    sz_resourceType = rs4.getString("resourceType");
                    if (!szHostList.contains(host + "/" + sz_resourceType + "/" + resourceId)) {
                        szHostList = szHostList + ",'" + host + "/" + sz_resourceType + "/" + resourceId;
                        if (!szHostList.equals("") && szHostList.startsWith(",")) {
                            szHostList = szHostList.substring(1);
                        }

                        if (szOrginalDownTime < szTimeRequested) {
                            SDate = smilli;
                            EDate = emilli;
                            downtime = szOrginalDownTime;
                            first = (float) (((EDate - SDate) - downtime) / (EDate - SDate)) * 100;
                            if (first < 1) {
                                first = 1f;
                            }
                            deveation = first - 99.9f;
                            sla_deviation = first;

                            szHealth = "CRITICAL";
                            if (deveation > 0) {
                                szHealth = "OK";
                            }


                            sz_avail_json.append("{\"ServerName\":\"" + host
                                    + "\",\"ResourceType\":\""
                                    + sz_resourceType
                                    + "\",\"ResourceNames\":[\"Availability\"],\"ServiceName\":\"" + dbservice
                                    + "\",\"Customer\":\"" + ccustomer
                                    + "\",\"ResourceID\":\"" + resourceId
                                    + "\",\"ResourceValues\":[" + sla_deviation
                                    + "],\"SlaValues\":[99.99],\"Health\":\""
                                    + szHealth + "\"},");
                        } else {
                            sla_deviation = -2f;
                            metricthresholdvalue = rs4.getFloat("SLA");
                            metricvalue = "1";
                            szHealth = "CRITICAL";
                            sz_avail_json.append("{\"ServerName\":\"" + host
                                    + "\",\"ResourceType\":\""
                                    + sz_resourceType
                                    + "\",\"ResourceNames\":[\"Availability\"],\"ServiceName\":\"" + dbservice
                                    + "\",\"Customer\":\"" + ccustomer
                                    + "\",\"ResourceID\":\"" + resourceId
                                    + "\",\"ResourceValues\":[" + metricvalue
                                    + "],\"SlaValues\":[99.99],\"Health\":\""
                                    + szHealth + "\"},");

                        }
                    }
                }
                rs4 = null;//modified
                ConnectionDAO.closeStatement();


                {

                    /*String szAvailUp = "select customername,service,host,subservice,resourceId,resourceType from customerinfo,"
                     + "servicemetrics where  category = 'availability' and resourcetype in (" + resourceType + ") and "
                     + "customerid=id group by host,customername,service,subservice,resourceId,resourceType";*/
                    String szAvailUp = "select customername,service,host,subservice,resourceId,resourceType from customerinfo,"
                            + "servicemetrics where  category = 'availability' and resourcetype in (" + resourceType + ")";
                    if (cCustomer != null) {
                        szAvailUp += custQuery;
                    }
                    if (service != null) {
                        szAvailUp += serviceQuery;
                    }
                    szAvailUp += " group by host,customername,service,subservice,resourceId,resourceType";
                    log.debug("DashBoard Availability With watchDog Event in Time period:" + resourceType + "\n" + szAvailUp);
                    //st = con.createStatement();
                     rs5 = ConnectionDAO.executerQuery(szAvailUp, customer);//st.executeQuery(szAvailUp);
                    while (rs5.next()) {
                        host = rs5.getString("host");
                        dbservice = rs5.getString("service");
                        resourceId = rs5.getString("resourceId");
                        sz_resourceType = rs5.getString("resourceType");
                        ccustomer = rs5.getString("customername");
                        if (!szHostList.contains(host + "/" + sz_resourceType + "/" + resourceId)) {
                            sz_avail_json.append("{\"ServerName\":\"" + host
                                    + "\",\"ResourceType\":\"" + sz_resourceType
                                    + "\",\"ResourceNames\":[\"Availability\"],\"ServiceName\":\"" + dbservice
                                    + "\",\"Customer\":\"" + ccustomer
                                    + "\",\"ResourceID\":\"" + resourceId
                                    + "\",\"ResourceValues\":[100],\"SlaValues\":[99.99],\"Health\":\"OK\"},");

                        }

                    }
                    rs5 = null;//modified
                    ConnectionDAO.closeStatement();
                }
            }


            if (sz_avail_json.lastIndexOf(",") > 0) {
                finalJson = sz_avail_json.substring(0, sz_avail_json.lastIndexOf(","));
                finalJson = finalJson + "]";
            }
            sz_avail_json = null;

        } catch (Exception e) {
            e.printStackTrace();
            log.error("DashBoard  missedHostAvailability Query: " + timestampselection + "/" + resourceType + "\n" + e.getMessage());
        }finally{
            if(rs3 != null){
                rs3.close();
                rs3 = null;
            }else if(rs4 != null){
                rs4.close();
                rs4 = null;
            }else if(rs5 != null){
                rs5.close();
                rs5 = null;
            }
        }
        return finalJson;
    }

    private static String getDownTimeStamp(long smilli, long emilli, String resourceType, String host, String resourceId, String customer) throws IOException, SQLException {
        String downTimestamp = "0";
        ResultSet rs1 = null;
        try {
            String szAvailDownTimeQuery = "select timestamp1 from servicemetrics where timestamp1 between "
                    + smilli
                    + " and "
                    + emilli
                    + " and timestamp2 is NULL and category='availabilityME' and resourcetype in (" + resourceType + ") and  "
                    + "metricvalue is NULL  and host='" + host + "'";

            //Statement st = uniqueconnection.createStatement();
             rs1 = ConnectionDAO.executerQuery(szAvailDownTimeQuery, customer);//st.executeQuery(szAvailDownTimeQuery);
             Long szDownTime_timestamp;
             long szOrginalDownTime;
            while (rs1.next()) {
                szDownTime_timestamp = rs1.getLong("timestamp1");

                szOrginalDownTime = emilli - szDownTime_timestamp;
                downTimestamp = szOrginalDownTime + "";
            }
            ConnectionDAO.closeStatement();

        } catch (Exception e) {
            e.printStackTrace();
            log.error("DashBoard Ticket Assignee-Status Query \n" + e.getMessage());
        }finally{
            if(rs1 != null){
                rs1.close();
                rs1 = null;
            }
        }
        return downTimestamp;
    }

    private static String getAvailSatus(String resourceType, String host, String resourceId, String customer) throws IOException, SQLException {
        String downTimestamp = "";
         ResultSet rs1 = null;
        try {
            String szAvailDownTimeQuery = "select case when max(timestamp2)>max(timestamp1) then 'OK' else 'CRITICAL' end  as "
                    + "timestampStatus from servicemetrics where  resourcetype in (" + resourceType + ")   and host='" + host
                    + "' and metrictype='downtime'";

//            Statement st = uniqueconnection.createStatement();
            rs1 = ConnectionDAO.executerQuery(szAvailDownTimeQuery, customer);//st.executeQuery(szAvailDownTimeQuery);

            while (rs1.next()) {
                downTimestamp = rs1.getString("timestampStatus");
            }
            ConnectionDAO.closeStatement();


        } catch (Exception e) {
            e.printStackTrace();
            log.error("DashBoard Ticket Assignee-Status Query \n" + e.getMessage());
        }finally{
            if(rs1 != null){
                rs1.close();
                rs1 = null;
            }
        }
        return downTimestamp;
    }

    /**
     * ******************************************************************************
     * This method is returning the String of all Default values like
     * Status,Assignee which having no data but we have to show while generating
     * chart
     *
     * @param resourceType Different category as
     * Desktop,Server,DataBase,Network,JVM
     * @param smilli date in second as long Timestamp(Current Time-selected Time
     * Period)
     * @param emilli date in second as long Timestamp(Current Time)
     * @param uniqueconnection Providing unique connection
     * @param host for which host we are checking adapter Status
     * @param service for which service we are checking adapter Status
     * @param resourceId for which resourceId we are checking adapter Status
     * @param timestamp this will give upTime to compare with adapter downTime
     * @return adapterStatus Query executed and gives result as boolean
     *
     * *******************************************************************************
     */
    private static boolean getDownTimeWhenAdapterStop(long smilli, long emilli, String resourceType, String host, String cCustomer,
            String service, String resourceId, long timestamp, String customer) throws IOException, SQLException {
        boolean adapterStatus = false;
        String custQuery = " and customerid in (select id from customerinfo where customername='" + cCustomer + "')";
        String serviceQuery = " and service='" + service + "'";
        ResultSet rs1 = null;
        try {


            /*String szQuer = "select min(timestamp1)  as availmetricvalue,customername,service,subservice,"
             + "resourceId,resourceType  "
             + "from customerinfo,servicemetrics where timestamp1 between "
             + smilli
             + " and "
             + emilli
             + " and timestamp1>" + timestamp + " and resourcetype in (" + resourceType + ") and metrictype in ("
             + DBUtilHelper.getMetrics_mapping_properties().getProperty("MetrictypeNotUsedInChart") + ") and customerid=id "
             + "group by metrictype,host,customername,service,subservice,category,resourceid,resourcetype,"
             + "sla order by customername,service,subservice,metrictype,host";*/
            String szQuer = "select min(timestamp1)  as availmetricvalue,customername,service,subservice,"
                    + "resourceId,resourceType  "
                    + "from customerinfo,servicemetrics where timestamp1 between "
                    + smilli
                    + " and "
                    + emilli
                    + " and timestamp1>" + timestamp + " and resourcetype in (" + resourceType + ") and metrictype in ("
                    + DBUtilHelper.getMetrics_mapping_properties().getProperty("MetrictypeNotUsedInChart") + ")";
            if (cCustomer != null) {
                szQuer += custQuery;
            }
            if (service != null) {
                szQuer += serviceQuery;
            }
            szQuer += "group by metrictype,host,customername,service,subservice,category,resourceid,resourcetype,"
             + "sla order by customername,service,subservice,metrictype,host";
//            Statement st = uniqueconnection.createStatement();
            rs1 = ConnectionDAO.executerQuery(szQuer, customer);//st.executeQuery(szQuer);
            String metricvalue;//
            String ccustomer;//
            String dbservice;//
            long SDate;//
            long EDate;//
            float downtime;//
            float first;//
            float sla_deviation;//
            while (rs1.next()) {
                metricvalue = rs1.getString("availmetricvalue");
                ccustomer = rs1.getString("customername");
                dbservice = rs1.getString("service");

                adapterStatus = true;

                SDate = smilli;
                EDate = emilli;
                downtime = emilli - Long.valueOf(metricvalue).longValue();
                first = (float) (((EDate - SDate) - downtime) / (EDate - SDate)) * 100;
                if (first < 1) {
                    first = 1f;
                }
                sla_deviation = first;
                sz_avail_json.append("{\"ServerName\":\"" + host
                        + "\",\"ResourceType\":\"" + resourceType
                        + "\",\"ResourceNames\":\"Availability\",\"ServiceName\":\"" + dbservice
                        + "\",\"Customer\":\"" + ccustomer
                        + "\",\"ResourceID\":\"" + resourceId
                        + "\",\"ResourceValues\":" + sla_deviation
                        + ",\"SlaValues\":99.99,\"Health\":\"CRITICAL\"},");


            }
            rs1 = null;//modified
            ConnectionDAO.closeStatement();

        } catch (Exception e) {
            e.printStackTrace();
            log.error("DashBoard Ticket Assignee-Status Query \n" + e.getMessage());
        }
        finally{
            if(rs1 != null){
                rs1.close();
            }
        }
        return adapterStatus;
    }
}