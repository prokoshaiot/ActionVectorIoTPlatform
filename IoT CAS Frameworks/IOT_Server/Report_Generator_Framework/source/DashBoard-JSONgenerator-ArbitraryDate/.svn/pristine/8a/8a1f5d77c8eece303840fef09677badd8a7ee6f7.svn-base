/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.merit.dashboard.jsongenerator;

import com.merit.connection.ConnectionDAO;
import com.merit.dashboard.queryexecuter.QueryExecuter;
import com.merit.dashboard.util.ResourceConfiguration;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import org.apache.log4j.Logger;

/**
 *
 * @author rekhas
 */
public class PerformanceRatioGenerator {

    static Logger log = Logger.getLogger(PerformanceRatioGenerator.class);

    public static String generateJSON(String resType, String cCustomer, String service, String resType2, String metricType, String configuredMetricType,
            long sMilli, long eMilli, String timeStampSelection, String customer) {
        String resultJson = "[]";
        try {
            metricType = metricType.replaceFirst("XXX", timeStampSelection);
            //configuredMetricType = configuredMetricType.replaceFirst("XXX", timeStampSelection);
            log.info("metricType==>>" + metricType);
            log.info("configuredMetricType==>>" + configuredMetricType);
            log.info("resType==>>" + resType);
            log.info("resType2==>>" + resType2);
            String[] headingNamesMetric1 = null;
            if (service == null) {//ccustomer level json
                String szQuery[] = new String[2];
                szQuery[0] = "select w1.energy as PerformanceRatio,w1.energy as EnergyPerRatedPower, w1.ServiceName as ServiceName,"
                        + "w1.resourcetype as ResourceType  from (select t.service as ServiceName, t.resourcetype as ResourceType,t.metricvalue as energy,"
                        + " t.metrictype from(select customerid,service,resourcetype,metrictype, max(timestamp1) as MaxTime from servicemetrics t1 "
                        + "where t1.resourcetype=service and t1.metrictype = '" + metricType + "' and t1.customerid=(select id from customerinfo "
                        + "where customername='" + cCustomer + "') and t1.timestamp1 between " + sMilli + " and " + eMilli 
                        + " group by t1.customerid,t1.service,t1.metrictype,t1.resourcetype) r inner join servicemetrics t on t.service=r.service and "
                        + "t.resourcetype=r.resourcetype and t.timestamp1 = r.MaxTime and t.metrictype=r.metrictype and t.customerid=r.customerid "
                        + "group by t.customerid,t.service,t.resourcetype,t.metrictype,t.metricvalue,t.resourceid) w1";
                szQuery[1] = "select t.metricvalue as Irradiance, t.metrictype,t.service as ServiceName from(select customerid,service,resourcetype,"
                        + "metrictype, max(timestamp1) as MaxTime from servicemetrics t2 where t2.resourcetype='Sensor' and t2.metrictype = 'Irradiance' "
                        + "and t2.customerid=(select id from customerinfo where customername='" + cCustomer + "') and t2.timestamp1 between " + sMilli 
                        + " and " + eMilli + " group by t2.customerid,t2.service,t2.metrictype,t2.resourcetype) r inner join servicemetrics t "
                        + "on t.service=r.service and t.resourcetype=r.resourcetype and t.timestamp1 = r.MaxTime and t.metrictype=r.metrictype and "
                        + "t.customerid=r.customerid group by t.customerid,t.service,t.resourcetype,t.metrictype,t.metricvalue";
                //Following is one single query, but gives error if the sub query doesnt return value.
                /*"select temp.energy as PerformanceRatio,temp.energy as EnergyPerRatedPower, temp.irradiance as Irradiance, temp.ServiceName as ServiceName,temp.resourcetype as ResourceType  from ((select t.service as ServiceName, t.resourcetype as ResourceType,t.metricvalue as energy, t.metrictype from(select customerid,service,resourcetype,metrictype, max(timestamp1) as MaxTime from servicemetrics t1 where t1.resourcetype=service and t1.metrictype = '" + metricType + "' and t1.customerid=(select id from customerinfo where customername='" + cCustomer + "') and t1.timestamp1 between " + sMilli + " and " + eMilli + " group by t1.customerid,t1.service,t1.metrictype,t1.resourcetype) r inner join servicemetrics t on t.service=r.service and t.resourcetype=r.resourcetype and t.timestamp1 = r.MaxTime and t.metrictype=r.metrictype and t.customerid=r.customerid group by t.customerid,t.service,t.resourcetype,t.metrictype,t.metricvalue,t.resourceid) w1 inner join (select t.metricvalue as irradiance, t.metrictype,t.service from(select customerid,service,resourcetype,metrictype, max(timestamp1) as MaxTime from servicemetrics t2 where t2.resourcetype='Sensor' and t2.metrictype = 'Irradiance' and t2.customerid=(select id from customerinfo where customername='" + cCustomer + "') and t2.timestamp1 between " + sMilli + " and " + eMilli + " group by t2.customerid,t2.service,t2.metrictype,t2.resourcetype) r inner join servicemetrics t on t.service=r.service and t.resourcetype=r.resourcetype and t.timestamp1 = r.MaxTime and t.metrictype=r.metrictype and t.customerid=r.customerid group by t.customerid,t.service,t.resourcetype,t.metrictype,t.metricvalue) w2 on w1.ServiceName=w2.service) as temp";*/

                headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "PerformanceRatio", "EnergyPerRatedPower"};
                log.info("PerformanceRatioGenerator query==>>" + szQuery[0] + "\n" + szQuery[1]);
                resultJson = generateDerivedJsonFromGivenQuery(szQuery, headingNamesMetric1, customer, cCustomer, resType2, configuredMetricType, 
                        timeStampSelection);
            } else if (resType2.equals("")) {//service level json
                String szQuery = "select ServiceName,ResourceID,PerformanceRatio,EnergyPerRatedPower,ResourceType,TimeStamps,Irradiance from "
                        + "(SELECT service as ServiceName, resourceid as ResourceID, array_to_string(array_agg(metricvalue),',') as PerformanceRatio, "
                        + "array_to_string(array_agg(metricvalue),',') as EnergyPerRatedPower, resourcetype as ResourceType, "
                        + "array_to_string(array_agg(concat('\"',to_char(to_timestamp(timestamp1), 'yyyy/MM/dd HH24:mi:SS'),'\"')),',') as TimeStamps "
                        + "from servicemetrics, customerinfo where resourcetype='" + service + "' and customerid=(select id from customerinfo where "
                        + "customername='" + cCustomer + "') and service='" + service + "' and metrictype='" + metricType + "' and timestamp1 between "
                        + "1378543606 and 1410079606 and resourceid='" + service + "' group by service,resourcetype,resourceid) t1, "
                        + "(SELECT  array_to_string(array_agg(metricvalue),',') as Irradiance from servicemetrics, customerinfo where "
                        + "resourcetype='Sensor' and customerid=(select id from customerinfo where customername='" + cCustomer + "') and "
                        + "service='" + service + "' and metrictype='Irradiance' and timestamp1 between " + sMilli + " and " + eMilli 
                        + " group by service,resourcetype,resourceid) t2";
                headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "ResourceID", "TimeStamps", "PerformanceRatio", "EnergyPerRatedPower"};
                log.info("PerformanceRatioGenerator query==>>" + szQuery);
                resultJson = generateDerivedJsonFromGivenQuery(szQuery, headingNamesMetric1, customer, cCustomer, resType2, configuredMetricType, 
                        timeStampSelection);
            } /*else if (resType2.equals(resType)) {//device level json
             szQuery = "SELECT service as ServiceName, resourceid as ResourceID, array_to_string(array_agg(metricvalue),',') as ActualEnergy, resourcetype as ResourceType, "
             + "array_to_string(array_agg(concat('\"',to_char(to_timestamp(timestamp1), 'yyyy/MM/dd HH24:mi:SS'),'\"')),',') as TimeStamps from servicemetrics, customerinfo "
             + "where resourcetype='" + resType + "' and customerid=(select id from customerinfo where customername='"
             + cCustomer + "') and service='" + service + "' and metrictype='" + metricType + "' and timestamp1 between "
             + sMilli + " and " + eMilli + " group by service,resourcetype,resourceid";
             headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "ResourceID", "TimeStamps", "ActualEnergy", "ExpectedEnergy"};
             }*/
            //derivedMetricType = "Efficiency";
            if (service != null) {//dont modify json for cCustomer level
                //log.debug("resultjson before modifyJson is==>>"+resultJson);
                if (!(resultJson.equals("[]"))) {
                    resultJson = modifyJson(resultJson);
                }
            }

            return resultJson;
        } catch (Exception e) {
            log.error("Error in generateJSON==>>" + e.toString());
            e.printStackTrace();
        }
        return null;
    }

    public static String generateDerivedJsonFromGivenQuery(String[] szQuery, String[] headingNames, String customer, String cCustomer,
            String resType, String configuredMetricType, String timeStampSelection) {
        String perfJSON = "";
        ResultSet[] rs4 = new ResultSet[2];
        int valsCounter = 0;
        try {
            String szMetricTypeValueJson = "";
            perfJSON = "[";
            rs4[0] = ConnectionDAO.executerQuery(szQuery[0], customer);
            rs4[1] = ConnectionDAO.executerQuery(szQuery[1], customer);
            HashMap szIrradianceMap = new HashMap();
            while (rs4[1].next()) {
                String szService = rs4[1].getString("ServiceName");
                Double szIrradiance = Double.parseDouble(rs4[1].getString("Irradiance"));
                szIrradianceMap.put(szService, szIrradiance);
            }
            while (rs4[0].next()) {
                String szConcatColumn = "";
                szMetricTypeValueJson = "";
                HashMap confValsMap = new HashMap<String, Double>();
                String szResID = null;

                String service = null, service2 = null;
                Double irradiance = null;
                log.info("generateDerivedJsonFromGivenQuery resType==>>" + resType);
                service = rs4[0].getString("ServiceName");
                if (resType.equals("")) {
                } else {
                    szResID = rs4[0].getString("ResourceID");
                    if (szResID.equals(service)) {
                        continue;
                    }
                }
                irradiance = (Double) szIrradianceMap.get(service);
                log.debug("Irradiance is ==>>" + irradiance);
                if (irradiance != null) {
                    String[] configuredMTypes = configuredMetricType.split(":");
                    log.info("configuredMTypes.length==>>" + configuredMTypes.length);
                    log.info("szResID==>>" + szResID);
                    for (int i = 0; i < configuredMTypes.length; i++) {
                        String val = ResourceConfiguration.getConfValue(customer, cCustomer, rs4[0].getString("ServiceName"),
                                szResID, configuredMTypes[i]);
                        log.info("val==>>" + val);
                        confValsMap.put(configuredMTypes[i], val);
                    }
                    String derivedVal = null;
                    String confVal = null;
                    String confVal2 = null;
                    String szStdIrradiance = null;
                    szStdIrradiance = ResourceConfiguration.getConfValue(customer, cCustomer, null, null, "StandardIrradiance");
                    confVal = confValsMap.get("Area").toString();
                    confVal2 = confValsMap.get("NominalEfficiency").toString();
                    for (int i = 0; i < headingNames.length - 1; i++) {
                        if (rs4[0].getString(headingNames[i]) != null) {
                            if (headingNames[i].equals("PerformanceRatio")) {
                                log.info("confVal1==>>" + confVal);
                                if ((confVal != null) && (confVal2 != null)) {
                                    derivedVal = "" + Double.parseDouble(rs4[0].getString(headingNames[i])) / ((Double.parseDouble(confVal))
                                            * (Double.parseDouble(confVal2)) * irradiance);
                                    log.info("derivedVal1==>>" + derivedVal);
                                    szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                                }
                            } else if (headingNames[i].equals("EnergyPerRatedPower")) {
                                log.info("confVal1==>>" + confVal);
                                if ((confVal != null) && (confVal2 != null)) {
                                    derivedVal = "" + Double.parseDouble(rs4[0].getString(headingNames[i])) / ((Double.parseDouble(confVal))
                                            * (Double.parseDouble(confVal2)) * (Double.parseDouble(szStdIrradiance)));
                                    log.info("derivedVal1==>>" + derivedVal);
                                    szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                                }
                            } else if (headingNames[i].equals("TimeStamps")) {
                                szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":[[" + rs4[0].getString(headingNames[i]) + "],["
                                        + rs4[0].getString(headingNames[i]) + "]]";
                                valsCounter = rs4[0].getString(headingNames[i]).split(",").length;
                            } else {
                                szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + rs4[0].getString(headingNames[i]) + "\"";
                            }
                        }
                        szMetricTypeValueJson = szMetricTypeValueJson + "," + rs4[0].getString(headingNames[i]);
                    }
                    if (headingNames[headingNames.length - 1].equals("PerformanceRatio")) {
                        log.info("confVal1==>>" + confVal);
                        if ((confVal != null) && (confVal2 != null)) {
                            derivedVal = "" + Double.parseDouble(rs4[0].getString(headingNames[headingNames.length - 1])) / ((Double.parseDouble(confVal))
                                    * (Double.parseDouble(confVal2)) * (Double.parseDouble(rs4[0].getString("Irradiance"))));
                            log.info("derivedVal1==>>" + derivedVal);
                        }
                    } else if (headingNames[headingNames.length - 1].equals("EnergyPerRatedPower")) {
                        log.info("confVal1==>>" + confVal);
                        if ((confVal != null) && (confVal2 != null)) {
                            derivedVal = "" + Double.parseDouble(rs4[0].getString(headingNames[headingNames.length - 1])) / ((Double.parseDouble(confVal))
                                    * (Double.parseDouble(confVal2)) * (Double.parseDouble(szStdIrradiance)));
                            log.info("derivedVal1==>>" + derivedVal);
                            log.info("valsCounter==>>" + valsCounter);
                            String colValue = "";
                            for (int k = 0; k < valsCounter; k++) {
                                colValue += derivedVal + ",";
                            }
                            if (colValue.length() > 1) {
                                derivedVal = colValue.substring(0, colValue.length() - 1);
                            }
                        }
                    } else {
                        derivedVal = rs4[0].getString(headingNames[headingNames.length - 1]);
                    }
                    szConcatColumn = szConcatColumn + ",\"" + headingNames[headingNames.length - 1] + "\":\"" + derivedVal + "\"";
                    perfJSON += "{" + szConcatColumn.substring(1) + "},";
                }
            }
            if (perfJSON.length() > 1) {
                perfJSON = perfJSON.substring(0, perfJSON.length() - 1);
            }
            perfJSON += "]";
            log.info("performance json==>>" + perfJSON);
            return perfJSON;
        } catch (Exception e) {
            log.error("Error in generateDerivedJsonFromGivenQuery" + e.toString());
            e.printStackTrace();
        } finally {
            ConnectionDAO.closeStatement();
            rs4 = null;
        }
        return null;
    }

    public static String generateDerivedJsonFromGivenQuery(String szQuery, String[] headingNames, String customer, String cCustomer,
            String resType, String configuredMetricType, String timeStampSelection) {
        String perfJSON = "";
        ResultSet rs4;
        int valsCounter = 0;
        try {
            String szMetricTypeValueJson = "";
            perfJSON = "[";
            rs4 = ConnectionDAO.executerQuery(szQuery, customer);
            while (rs4.next()) {
                String szConcatColumn = "";
                szMetricTypeValueJson = "";
                HashMap confValsMap = new HashMap<String, Double>();
                String szResID = null;

                String service = null;
                log.info("generateDerivedJsonFromGivenQuery resType==>>" + resType);
                service = rs4.getString("ServiceName");
                if (resType.equals("")) {
                } else {
                    szResID = rs4.getString("ResourceID");
                    if (szResID.equals(service)) {
                        continue;
                    }
                }
                String[] configuredMTypes = configuredMetricType.split(":");
                log.info("configuredMTypes.length==>>" + configuredMTypes.length);
                log.info("szResID==>>" + szResID);
                for (int i = 0; i < configuredMTypes.length; i++) {
                    String val = ResourceConfiguration.getConfValue(customer, cCustomer, rs4.getString("ServiceName"),
                            szResID, configuredMTypes[i]);
                    log.info("val==>>" + val);
                    confValsMap.put(configuredMTypes[i], val);
                }
                String derivedVal = "";
                String confVal = null;
                String confVal2 = null;
                String szStdIrradiance = null;
                szStdIrradiance = ResourceConfiguration.getConfValue(customer, cCustomer, null, null, "StandardIrradiance");
                confVal = confValsMap.get("Area").toString();
                confVal2 = confValsMap.get("NominalEfficiency").toString();
                for (int i = 0; i < headingNames.length - 1; i++) {
                    if (rs4.getString(headingNames[i]) != null) {
                        if (headingNames[i].equals("PerformanceRatio")) {
                            log.info("confVal1==>>" + confVal);
                            if ((confVal != null) && (confVal2 != null)) {
                                String[] szEnergyArray = rs4.getString(headingNames[i]).split(",");
                                String[] szIrradianceArray = rs4.getString("Irradiance").split(",");
                                log.debug("No. of energy data points==>>" + szEnergyArray.length);
                                log.debug("No. of irradiance data points==>>" + szEnergyArray.length);
                                int szSize = szEnergyArray.length < szIrradianceArray.length ? szEnergyArray.length : szIrradianceArray.length;
                                for (int count = 0; count < szSize; count++) {
                                    Double val = (Double.parseDouble(szEnergyArray[count]) / ((Double.parseDouble(confVal))
                                            * (Double.parseDouble(confVal2)) * Double.parseDouble(szIrradianceArray[count])));
                                    DecimalFormat df = new DecimalFormat("#.##");
                                    //df.format(val);
                                    derivedVal = derivedVal + df.format(val) + ",";
                                    log.info("derivedVal1==>>" + derivedVal);
                                }
                                if (derivedVal.length() > 1) {
                                    derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                                }
                                szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                            }
                        } else if (headingNames[i].equals("EnergyPerRatedPower")) {
                            log.info("confVal1==>>" + confVal);
                            if ((confVal != null) && (confVal2 != null)) {
                                String[] szEnergyArray = rs4.getString(headingNames[i]).split(",");
                                for (int count = 0; count < szEnergyArray.length; count++) {
                                    Double val = (Double.parseDouble(szEnergyArray[count]) / ((Double.parseDouble(confVal))
                                            * (Double.parseDouble(confVal2)) * Double.parseDouble(szStdIrradiance)));
                                    DecimalFormat df = new DecimalFormat("#.##");
                                    //df.format(val);
                                    derivedVal = derivedVal + df.format(val) + ",";
                                    log.info("derivedVal1==>>" + derivedVal);
                                }
                                if (derivedVal.length() > 1) {
                                    derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                                }
                                szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                            }
                        } else if (headingNames[i].equals("TimeStamps")) {
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":[[" + rs4.getString(headingNames[i]) + "],["
                                    + rs4.getString(headingNames[i]) + "]]";
                            valsCounter = rs4.getString(headingNames[i]).split(",").length;
                        } else {
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + rs4.getString(headingNames[i]) + "\"";
                        }
                    }
                    szMetricTypeValueJson = szMetricTypeValueJson + "," + rs4.getString(headingNames[i]);
                }
                if (headingNames[headingNames.length - 1].equals("PerformanceRatio")) {
                    log.info("confVal1==>>" + confVal);
                    if ((confVal != null) && (confVal2 != null)) {
                        /*derivedVal = "" + Double.parseDouble(rs4.getString(headingNames[headingNames.length - 1])) / ((Double.parseDouble(confVal))
                         * (Double.parseDouble(confVal2)) * (Double.parseDouble(rs4.getString("Irradiance"))));
                         log.info("derivedVal1==>>" + derivedVal);*/
                        String[] szEnergyArray = rs4.getString(headingNames[headingNames.length - 1]).split(",");
                        String[] szIrradianceArray = rs4.getString("Irradiance").split(",");
                        log.debug("No. of energy data points==>>" + szEnergyArray.length);
                        log.debug("No. of irradiance data points==>>" + szEnergyArray.length);
                        int szSize = szEnergyArray.length < szIrradianceArray.length ? szEnergyArray.length : szIrradianceArray.length;
                        for (int count = 0; count < szSize; count++) {
                            Double val = (Double.parseDouble(szEnergyArray[count]) / ((Double.parseDouble(confVal))
                                    * (Double.parseDouble(confVal2)) * Double.parseDouble(szIrradianceArray[count])));
                            DecimalFormat df = new DecimalFormat("#.##");
                            //df.format(val);
                            derivedVal = derivedVal + df.format(val) + ",";
                            log.info("derivedVal1==>>" + derivedVal);
                        }
                        if (derivedVal.length() > 1) {
                            derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                        }
                    }
                } else if (headingNames[headingNames.length - 1].equals("EnergyPerRatedPower")) {
                    log.info("confVal1==>>" + confVal);
                    if ((confVal != null) && (confVal2 != null)) {
                        /*derivedVal = "" + Double.parseDouble(rs4.getString(headingNames[headingNames.length - 1])) / ((Double.parseDouble(confVal))
                         * (Double.parseDouble(confVal2)) * (Double.parseDouble(szStdIrradiance)));
                         log.info("derivedVal1==>>" + derivedVal);
                         log.info("valsCounter==>>" + valsCounter);
                         String colValue = "";
                         for (int k = 0; k < valsCounter; k++) {
                         colValue += derivedVal + ",";
                         }
                         if (colValue.length() > 1) {
                         derivedVal = colValue.substring(0, colValue.length() - 1);
                         }*/
                        String[] szEnergyArray = rs4.getString(headingNames[headingNames.length - 1]).split(",");
                        for (int count = 0; count < szEnergyArray.length; count++) {
                            Double val = (Double.parseDouble(szEnergyArray[count]) / ((Double.parseDouble(confVal))
                                    * (Double.parseDouble(confVal2)) * Double.parseDouble(szStdIrradiance)));
                            DecimalFormat df = new DecimalFormat("#.##");
                            //df.format(val);
                            derivedVal = derivedVal + df.format(val) + ",";
                            log.info("derivedVal1==>>" + derivedVal);
                        }
                        if (derivedVal.length() > 1) {
                            derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                        }
                    }
                } else {
                    derivedVal = rs4.getString(headingNames[headingNames.length - 1]);
                }
                szConcatColumn = szConcatColumn + ",\"" + headingNames[headingNames.length - 1] + "\":\"" + derivedVal + "\"";
                perfJSON += "{" + szConcatColumn.substring(1) + "},";

            }
            if (perfJSON.length() > 1) {
                perfJSON = perfJSON.substring(0, perfJSON.length() - 1);
            }
            perfJSON += "]";
            log.info("performance json==>>" + perfJSON);
            return perfJSON;
        } catch (Exception e) {
            log.error("Error in generateDerivedJsonFromGivenQuery" + e.toString());
            e.printStackTrace();
        } finally {
            ConnectionDAO.closeStatement();
            rs4 = null;
        }
        return null;
    }

    private static String modifyJson(String input) {
        String output = "";
        try {
            String[] arrayEles = input.split("},");
            log.info("arrayEles length==>>" + arrayEles.length);
            for (String arrayE : arrayEles) {
                log.info("arrayE before modification==>>" + arrayE);
                int startIndex = arrayE.indexOf("\"PerformanceRatio\":\"");
                int endIndex = arrayE.indexOf("\"", startIndex + new String("\"PerformanceRatio\":\"").length());
                String perfRatioStr = arrayE.substring(startIndex, endIndex);
                log.info("perfRatioStr==>>" + perfRatioStr);
                arrayE = arrayE.replace(perfRatioStr + "\",", "");
                startIndex = arrayE.indexOf("\"EnergyPerRatedPower\":\"");
                endIndex = arrayE.indexOf("\"", startIndex + new String("\"EnergyPerRatedPower\":\"").length());
                String energyPerRatedPowerStr = arrayE.substring(startIndex, endIndex);
                log.info("energyPerRatedPowerStr==>>" + energyPerRatedPowerStr);
                //arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", "");
                String actualMTypes = "\"ActualMetricTypes\":[\"PerformanceRatio\",\"EnergyPerRatedPower\"]";
                //arrayE += actualMTypes;
                String resNames = ",\"ResourceNames\":[\"PerformanceRatio\",\"EnergyPerRatedPower\"]";
                //arrayE += resNames;
                //arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", actualMTypes + resNames);
                String acVals = perfRatioStr.replace("\"PerformanceRatio\":\"", "");
                String exVals = energyPerRatedPowerStr.replace("\"EnergyPerRatedPower\":\"", "");
                String resValues = ",\"ResourceValues\":[[" + acVals + "],[" + exVals + "]]";
                arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", actualMTypes + resNames + resValues);
                log.info("arrayE after modification==>>" + arrayE);
                output += arrayE;
            }
            return output;
        } catch (Exception e) {
            log.error("Error in modifyJson" + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    public static void main(String args[]) {
        String derivedVal ="";
        try {
            DecimalFormat df = new DecimalFormat("#.##");
            //df.format(val);
            derivedVal = derivedVal + df.format(0.067814278) + ",";
            System.out.println("derivedVal1==>>" + derivedVal);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
