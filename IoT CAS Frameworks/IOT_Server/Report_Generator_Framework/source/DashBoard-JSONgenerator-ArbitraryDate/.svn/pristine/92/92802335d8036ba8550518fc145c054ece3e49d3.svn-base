/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import com.merit.dashboard.Controller;
import com.merit.dashboard.DBUtil.DBUtilHelper;
import com.merit.dashboard.util.PropertyUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author anandkv
 */
public class ServiceThreadListener extends Thread {

    static Logger log = Logger.getLogger(ServiceThreadListener.class);
    static Thread thread = null;
    public static HashMap<String, String> serverTimeLinemap = null;
    public static HashMap<String, String> desktopTimeLinemap = null;
    static Controller controler = new Controller();
    //public static TickTimer tickTimer = null;
    public static QueryExecutorThread queryExecutorThread = null;
    /*public static HashMap<String, String> servermap = null;
     public static HashMap<String, String> networkmap = null;
     public static HashMap<String, String> jvmmap = null;
     public static HashMap<String, String> databasemap = null;
     public static HashMap<String, String> desktopmap = null;*/
    private static HashMap<String, HashMap> resourceMetricMap = null;
    public static HashMap<String, String> indexList = new HashMap<String, String>();
    public static String argCustomerID = null;
    public static long gHTimeWait = 1;
    public static long gDTimeWait = 1;
    public static long gWTimeWait = 1;
    public static long gMTimeWait = 1;
    public static long gYTimeWait = 1;
    public static boolean forcedJSON = true;

    public static void initStandardFreq() {
        gHTimeWait = gHTimeWait * Long.parseLong(DBUtilHelper.hourSleep);
        gDTimeWait = gDTimeWait * Long.parseLong(DBUtilHelper.daySleep);
        gWTimeWait = gWTimeWait * Long.parseLong(DBUtilHelper.weekSleep);
        gMTimeWait = gMTimeWait * Long.parseLong(DBUtilHelper.monthSleep);
        gYTimeWait = gYTimeWait * Long.parseLong(DBUtilHelper.yearSleep);
    }

    public static void main(String[] args) {
        try {

            for (String arg : args) {
                if (arg.contains("--sleepy")) {
                    forcedJSON = false;
                }
                if (arg.contains("--domainName=") || arg.contains("--domainname=") || arg.contains("--DomainName=")) {
                    arg = arg.split("=")[1];
                    argCustomerID = arg;
                }
            }
            PropertyConfigurator.configure("resource/logger.properties");
            new DBUtilHelper();
            PropertyUtil.createMapFromProperty();
            System.out.println(" Context Listener Started");
            initStandardFreq();
            if (DBUtilHelper.generateAllJSONForced != null) {
                if (DBUtilHelper.generateAllJSONForced.trim().equalsIgnoreCase("false")) {
                    forcedJSON = false;
                }
            }

            List<String> al_customer_list = controler.getCustomerList();
            System.out.println("Im calling generateCustomerServiceMap");
            Controller.generateCustomerServiceMap(al_customer_list);
            /*for (String customer : al_customer_list) {
                System.out.println("Controller.custServiceMap.get(customer)==>>" + Controller.custServiceMap.get(customer));
                Object[] cCustomers = Controller.custServiceMap.get(customer).keySet().toArray();
                for (int i = 0; i < cCustomers.length; i++) {
                    ArrayList services = Controller.custServiceMap.get(customer).get(cCustomers[i].toString());
                    queryExecutorThread = new QueryExecutorThread(customer, cCustomers[i].toString(), services.get(i).toString());
                    Timer timer1 = new Timer();
                    timer1.schedule(queryExecutorThread, 1000);
                }
            }*/

            //String[] types = new String[] {"server", "Network", "JVM", "DataBase", "Desktop"};
            String[] types = DBUtilHelper.getMetrics_mapping_properties().getProperty("ResourceName").split(",");
            log.info("types==>>" + types);
            //DBUtilHelper.getMetrics_mapping_properties().getProperty("ResourceName").split(",");
            resourceMetricMap = new HashMap();
            for (String resourceType : types) {
                /*if (resourceType.equalsIgnoreCase("server")) {
                 servermap = createJSONMappingFolders(resourceType);
                 }
                 if (resourceType.equalsIgnoreCase("Network")) {
                 networkmap = createJSONMappingFolders(resourceType);
                 }
                 if (resourceType.equalsIgnoreCase("JVM")) {
                 jvmmap = createJSONMappingFolders(resourceType);
                 }
                 if (resourceType.equalsIgnoreCase("DataBase")) {
                 databasemap = createJSONMappingFolders(resourceType);
                 //System.out.println(">>>>>  databasemap = " + databasemap);
                 }
                 if (resourceType.equalsIgnoreCase("Desktop")) {
                 desktopmap = createJSONMappingFolders(resourceType);
                 }*/
                resourceMetricMap.put(resourceType, createJSONMappingFolders(resourceType));
            }
            /*
             System.out.println("desktopmap  = " + desktopmap);
             System.out.println("databasemap = " + databasemap);
             System.out.println("jvmmap      = " + jvmmap);
             System.out.println("networkmap  = " + networkmap);
             System.out.println("servermap   = " + servermap);
             */
            ServiceThreadListener scl = new ServiceThreadListener();
            thread = new Thread(scl);
            thread.start();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void run() {
        try {
            controler.init("merit");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static HashMap<String, String> createJSONMappingFolders(String resourceType) {
        String szProjectName = DBUtilHelper.getMetrics_mapping_properties().getProperty("projectName");
        //String tomcat_home = System.getProperty("catalina.base");
        String tomcat_home = DBUtilHelper.dashBoardJSONPATH;
        //System.out.println(">>>>>  reading file + " + tomcat_home + File.separator + "webapps" + File.separator + szProjectName + File.separator + "jsonconfigurations/" + resourceType + "ComboSource.json");
        System.out.println(">>>>>  reading file + " + tomcat_home + /*File.separator + "webapps" +*/ File.separator + szProjectName + File.separator + "jsonconfigurations/" + resourceType + "ComboSource.json");
        File file = new File((tomcat_home + File.separator
                + //"webapps" + File.separator + 
                szProjectName + File.separator
                + "jsonconfigurations/" + resourceType + "ComboSource.json").replaceAll(File.separator + File.separator, File.separator));
        FileInputStream filestream = null;
        try {
            filestream = new FileInputStream(file);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        //InputStream in = servle tContext.getResourceAsStream(tomcat_home + File.separator + "webapps" + File.separator + szProjectName + File.separator + "jsonconfigurations/" + resourceType + "ComboSource.json");
        //InputStream in = servle tContext.getResourceAsStream(tomcat_home + /*File.separator + "webapps" +*/ File.separator + szProjectName + File.separator + "jsonconfigurations/" + resourceType + "ComboSource.json");
        InputStreamReader reader = new InputStreamReader(filestream);
        JSONParser parser = new JSONParser();
        HashMap<String, String> map = new HashMap();

        JSONArray jsonArr = null;
        JSONObject tjsonObj = null;
        JSONArray t1jsonArr = null;
        int len1 = 0;
        int len2 = 0;

        String field = "";
        String metrictypeIn = "";
        String index = "";
        try {
            jsonArr = new JSONArray(parser.parse(reader).toString());
            tjsonObj = jsonArr.getJSONObject(0);
            jsonArr = tjsonObj.getJSONArray("items");//first josn Array contains Single json Object

            len1 = jsonArr.length();
            String tfield = "";
            for (int i = 0; i < len1; i++) {
                tjsonObj = jsonArr.getJSONObject(i);
                t1jsonArr = tjsonObj.getJSONArray("items");
                len2 = t1jsonArr.length();
                for (int j = 0; j < len2; j++) {
                    tjsonObj = t1jsonArr.getJSONObject(j);

                    field = tjsonObj.getString("text");
                    index = tjsonObj.getString("index");
                    metrictypeIn = tjsonObj.get("metricType").toString();

                    tfield = field;
                    //System.out.println("tjsonObj =  ++  " + tjsonObj);
                    metrictypeIn = metrictypeIn.substring(1);
                    metrictypeIn = metrictypeIn.substring(0, metrictypeIn.length() - 1);
                    // System.out.println("\t .. before field = " + field + "  ..  metrictypeIn = " +metrictypeIn);
                    if (!field.contains("Alert")) {
                        metrictypeIn = modifyMetricTypeAccordingtoProperty(metrictypeIn);
                    }
                    // System.out.println("\t .. after field = " + field + "  ..  metrictypeIn = " +metrictypeIn);
                    field = field.replaceAll(" ", "");
                    field = field.replaceAll("\\s", "");
                    field = field.replaceAll("\\W", "");
                    //System.out.println("putting  field = " + field + ":: metrictypeIn = " + metrictypeIn) ;
                    indexList.put(resourceType + "##" + field, index);
                    map.put(field, metrictypeIn);
                }
            }
            filestream.close();
            reader.close();
            filestream = null;
            reader = null;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
        //System.out.println("map = " + map);
        return map;
    }

    public static HashMap<String, String> getJSONLocationMap(String resourceType) {
        //System.out.println("'server'" + "  "+  "'Network'" + "  "+ "'JVM'" + "  "+ "'DataBase'" + "  "+ "'Desktop'");
        //System.out.println("resourceType = '" + resourceType + "'");
        /*if (resourceType.equalsIgnoreCase("server")) {
         return servermap;
         } else if (resourceType.equalsIgnoreCase("Desktop")) {
         return desktopmap;
         } else if (resourceType.equalsIgnoreCase("JVM")) {
         return jvmmap;
         } else if (resourceType.equalsIgnoreCase("DataBase")) {
         return databasemap;
         } else if (resourceType.equalsIgnoreCase("Network")) {
         return networkmap;
         }
        
         return null;*/
        return resourceMetricMap.get(resourceType);
    }

    public static Set<String> getJSONLocationSet(String resourceType) {
        //System.out.println("'server'" + "  "+  "'Network'" + "  "+ "'JVM'" + "  "+ "'DataBase'" + "  "+ "'Desktop'");
        //System.out.println("resourceType = '" + resourceType + "'");
        /*if (resourceType.equalsIgnoreCase("server")) {
         return servermap.keySet();
         } else if (resourceType.equalsIgnoreCase("Desktop")) {
         return desktopmap.keySet();
         } else if (resourceType.equalsIgnoreCase("JVM")) {
         return jvmmap.keySet();
         } else if (resourceType.equalsIgnoreCase("DataBase")) {
         return databasemap.keySet();
         } else if (resourceType.equalsIgnoreCase("Network")) {
         return networkmap.keySet();
         }
         return null;*/
        return resourceMetricMap.get(resourceType).keySet();
    }

    public static String getJSONMetricGroupSet(String resourceType, String selection) {
        //System.out.println("'server'" + "  "+  "'Network'" + "  "+ "'JVM'" + "  "+ "'DataBase'" + "  "+ "'Desktop'");
        //System.out.println("resourceType = '" + resourceType + "'");
        /*if (resourceType.equalsIgnoreCase("server")) {
         return servermap.get(selection);
         } else if (resourceType.equalsIgnoreCase("Desktop")) {
         return desktopmap.get(selection);
         } else if (resourceType.equalsIgnoreCase("JVM")) {
         return jvmmap.get(selection);
         } else if (resourceType.equalsIgnoreCase("DataBase")) {
         return databasemap.get(selection);
         } else if (resourceType.equalsIgnoreCase("Network")) {
         return networkmap.get(selection);
         }
         return null;*/
        return resourceMetricMap.get(resourceType).get(selection).toString();
    }

    public static String modifyMetricTypeAccordingtoProperty(String metrictypeIn) {
        if (metrictypeIn == null || metrictypeIn.equalsIgnoreCase("")) {
            return null;
        }
        metrictypeIn = metrictypeIn.replaceAll("\"", "");
        metrictypeIn = metrictypeIn.replaceAll("'", "");
        String[] metrictypes = metrictypeIn.split(",");
        metrictypeIn = "";
        String temp = "";
        for (String metrictype : metrictypes) {
            temp = metrictype;
            if (metrictype.equalsIgnoreCase("null")) {
                metrictype = "''";
            } else {
                metrictype = "'" + PropertyUtil.getreverseMapping_Properties().get(metrictype) + "'";
                if (metrictype.equalsIgnoreCase("'null'")) {
                    //System.out.println("...\t\t temp = " + temp + " ..metrictype = " + metrictype);
                }
            }
            metrictypeIn += "," + metrictype;
        }
        metrictypeIn = metrictypeIn.substring(1);
        return metrictypeIn;
    }

    public static String modifyMapToJSONArray(HashMap<String, String> map) {
        Collection<String> set = map.values();
        if (set.size() == 0) {
            return "[]";
        }
        String strJSONArray = "";
        String strJSONObject = "";
        for (String value : set) {
            if (value.trim().equalsIgnoreCase("") || value == null) {
            } else {
                strJSONObject = "{" + value + "}";
                strJSONArray += "," + strJSONObject;
            }
        }
        if (strJSONArray.trim().equalsIgnoreCase("") || strJSONArray == null) {
            return "[]";
        } else {
            strJSONArray = "[" + strJSONArray.substring(1) + "]";
            return strJSONArray;
        }
    }

    public static String getLocationGroupType(String resourceType, String metrictype) {
        String grpType = null;
        String vals = null;
        HashMap<String, String> map = getJSONLocationMap(resourceType);
        Collection<String> set = map.keySet();
        for (String loc : set) {
            vals = map.get(loc);
            if (vals.contains(metrictype) && loc.contains("TimeLine")) {
                //System.out.println(set+"....\n     resourceType = " + resourceType + "... metrictype = " + metrictype + "....>>>>group Location  " + loc);
                grpType = loc;
                break;
            }
        }
        //System.out.println(map+"....\n     resourceType = " + resourceType + "... metrictype = " + metrictype + "....>>>>group Location  " + grpType);
        return grpType;
    }

    public static String getIndexOfLocationGroupType(String resourceType, String selection) {
        return indexList.get(resourceType + "##" + selection);
    }
}
