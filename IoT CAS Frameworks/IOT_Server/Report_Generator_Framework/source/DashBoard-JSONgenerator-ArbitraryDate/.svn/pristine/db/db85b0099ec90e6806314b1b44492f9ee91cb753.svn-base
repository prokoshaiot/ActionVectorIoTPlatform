/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.merit.dashboard.jsongenerator;

import com.merit.connection.ConnectionDAO;
import com.merit.dashboard.util.ResourceConfiguration;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import org.apache.log4j.Logger;

/**
 *
 * @author rekhas
 */
public class PerformanceRatioGeneratorDirectDB {

    static Logger log = Logger.getLogger(PerformanceRatioGeneratorDirectDB.class);

    public static String generateJSON(String resType, String cCustomer, String service, String resType2, String metricType, String configuredMetricType,
            long sMilli, long eMilli, String timeStampSelection, String customer) {
        String resultJson = "[]";
        String[] headingNamesMetric1 = null;
        String szQuery;
        try {
            metricType = metricType.replaceFirst("XXX", timeStampSelection);
            //configuredMetricType = configuredMetricType.replaceFirst("XXX", timeStampSelection);
            log.info("metricType==>>" + metricType);
            log.info("configuredMetricType==>>" + configuredMetricType);
            log.info("resType==>>" + resType);
            log.info("resType2==>>" + resType2);
            log.debug("In PerformanceRatioGeneratorDirectDB.generateJSON==>>smilli:" + sMilli + "::emilli:" + eMilli);
            if (service == null) {//ccustomer level json
                szQuery = "select w1.energy as ActualEnergy, w1.energy as PerformanceRatio,w1.energy as EnergyPerRatedPower, w1.ServiceName as ServiceName,"
                        + "w1.resourcetype as ResourceType  from (select t.service as ServiceName, t.resourcetype as ResourceType,t.metricvalue as energy,"
                        + " t.metrictype from(select customerid,service,resourcetype,metrictype, max(timestamp1) as MaxTime from servicemetrics t1 "
                        + "where t1.resourcetype=service and t1.metrictype = '" + metricType + "' and t1.customerid=(select id from customerinfo "
                        + "where customername='" + cCustomer + "') and t1.timestamp1 between " + sMilli + " and " + eMilli
                        + " group by t1.customerid,t1.service,t1.metrictype,t1.resourcetype) r inner join servicemetrics t on t.service=r.service and "
                        + "t.resourcetype=r.resourcetype and t.timestamp1 = r.MaxTime and t.metrictype=r.metrictype and t.customerid=r.customerid "
                        + "group by t.customerid,t.service,t.resourcetype,t.metrictype,t.metricvalue,t.resourceid) w1";
                headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "PerformanceRatio", "EnergyPerRatedPower", "ActualEnergy", "TargetEnergy"};
                log.info("PerformanceRatioGeneratorDirectDB query==>>" + szQuery);
                resultJson = generateDerivedJsonFromGivenQueryForCustomer(szQuery, headingNamesMetric1, customer, cCustomer, resType2, configuredMetricType,
                        timeStampSelection);
            } else if (resType2.equals("")) {//service level json
                szQuery = "select ServiceName,ResourceID,Yield,PerformanceRatio,EnergyPerRatedPower,ResourceType,TimeStamps from "
                        + "(SELECT service as ServiceName, resourceid as ResourceID, array_to_string(array_agg(metricvalue order by timestamp1),',') as Yield"
                        + ", array_to_string(array_agg(metricvalue order by timestamp1),',') as PerformanceRatio, array_to_string(array_agg(metricvalue order by timestamp1),',') as EnergyPerRatedPower, resourcetype as ResourceType, "
                        + "array_to_string(array_agg(concat('\"',to_char(to_timestamp(timestamp1), 'yyyy/MM/dd HH24:mi:SS'),'\"') order by timestamp1),',') as TimeStamps "
                        + "from servicemetrics where resourcetype='" + service + "' and customerid=(select id from customerinfo where "
                        + "customername='" + cCustomer + "') and service='" + service + "' and metrictype='" + metricType + "' and timestamp1 between "
                        + sMilli + " and " + eMilli + " and resourceid='" + service + "' group by service,resourcetype,resourceid) w1";
                headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "ResourceID", "TimeStamps", "PerformanceRatio", "EnergyPerRatedPower", "Yield"};
                log.info("PerformanceRatioGeneratorDirectDB query==>>" + szQuery);
                resultJson = generateDerivedJsonFromGivenQueryForService(szQuery, headingNamesMetric1, customer, cCustomer, resType2, configuredMetricType,
                        timeStampSelection, 3);
                log.debug("resultJson at service level==>>" + resultJson);
            } else if (resType2.equals(resType)) {//device level json
                szQuery = "SELECT service as ServiceName, resourceid as ResourceID, array_to_string(array_agg(metricvalue  order by timestamp1),',') as PerformanceRatio, "
                        + "array_to_string(array_agg(metricvalue  order by timestamp1),',') as EnergyPerRatedPower, resourcetype as ResourceType, "
                        + "array_to_string(array_agg(concat('\"',to_char(to_timestamp(timestamp1), 'yyyy/MM/dd HH24:mi:SS'),'\"') order by timestamp1),',') as TimeStamps from "
                        + "servicemetrics "
                        + "where resourcetype='" + resType + "' and customerid=(select id from customerinfo where customername='"
                        + cCustomer + "') and service='" + service + "' and metrictype='" + metricType + "' and timestamp1 between "
                        + sMilli + " and " + eMilli + " group by service,resourcetype,resourceid";
                headingNamesMetric1 = new String[]{"ServiceName", "ResourceType", "ResourceID", "TimeStamps", "PerformanceRatio", "EnergyPerRatedPower"};
                log.info("PerformanceRatioGeneratorDirectDB query==>>" + szQuery);
                resultJson = generateDerivedJsonFromGivenQueryForService(szQuery, headingNamesMetric1, customer, cCustomer, resType2, configuredMetricType,
                        timeStampSelection, 2);
                log.debug("resultJson at device level==>>" + resultJson);
            }
            if (service != null) {//dont modify json for cCustomer level
                //log.debug("resultjson before modifyJson is==>>"+resultJson);
                if (!(resultJson.equals("[]"))) {
                    resultJson = modifyJson(resultJson);
                }
            }

            return resultJson;
        } catch (Exception e) {
            log.error("Error in generateJSON==>>" + e.toString());
            e.printStackTrace();
        } finally {
            szQuery = null;
            headingNamesMetric1 = null;
        }
        return null;
    }

    public static String generateDerivedJsonFromGivenQueryForService(String szQuery, String[] headingNames, String customer, String cCustomer,
            String resType, String configuredMetricType, String timeStampSelection, int noOfMetrics) {
        String perfJSON = "";
        ResultSet rs4 = null;
        String DCXXXEnergy, InstalledCapacity;
        String szDCEnergyMetricName = "DCXXXEnergy";
            String szConcatColumn;//
        try {
            String szMetricTypeValueJson = "";
            perfJSON = "[";
            rs4 = ConnectionDAO.executerQuery(szQuery, customer);
            String szPmaxName;
            if (resType.equals("")) {
                szPmaxName = "InstalledCapacity";
            } else {
                szPmaxName = "Pmax";
            }
            log.info("generateDerivedJsonFromGivenQuery resType==>>" + resType);
            log.debug("szPmaxName==>>" + szPmaxName);
            String szResID;//
            String service;//
            String derivedVal;//
            String[] szEnergyArray;//
            Double val;//
            DecimalFormat df = new DecimalFormat("#.##");
            while (rs4.next()) {
                szConcatColumn = "";
                szMetricTypeValueJson = "";
                szResID = null;

                service = null;
                service = rs4.getString("ServiceName");
                if (resType.equals("")) {
                    DCXXXEnergy = ResourceConfiguration.getConfValue(customer, cCustomer, service,
                            null, szDCEnergyMetricName.replaceFirst("XXX", timeStampSelection));
                    InstalledCapacity = ResourceConfiguration.getConfValue(customer, cCustomer, service,
                            null, szPmaxName);
                } else {
                    szResID = rs4.getString("ResourceID");
                    DCXXXEnergy = ResourceConfiguration.getConfValue(customer, cCustomer, rs4.getString("ServiceName"),
                            szResID, szDCEnergyMetricName.replaceFirst("XXX", timeStampSelection));
                    InstalledCapacity = ResourceConfiguration.getConfValue(customer, cCustomer, rs4.getString("ServiceName"),
                            szResID, szPmaxName);
                    if (szResID.equals(service)) {
                        continue;
                    }
                }
                log.info("szResID==>>" + szResID);
                derivedVal = "";

                for (int i = 0; i < headingNames.length - 1; i++) {
                    if (rs4.getString(headingNames[i]) != null) {
                        derivedVal = "";
                        if (headingNames[i].equals("PerformanceRatio")) {
                            if (DCXXXEnergy != null) {
                                szEnergyArray = rs4.getString(headingNames[i]).split(",");
                                log.debug("No. of energy data points==>>" + szEnergyArray.length);
                                for (int count = 0; count < szEnergyArray.length; count++) {
                                    val = (Double.parseDouble(szEnergyArray[count])) / (Double.parseDouble(DCXXXEnergy));
                                    derivedVal = derivedVal + df.format(val) + ",";
                                }
                                if (derivedVal.length() > 1) {
                                    derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                                }
                            } else {
                                derivedVal = "";
                            }
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                        } else if (headingNames[i].equals("EnergyPerRatedPower")) {
                            if (InstalledCapacity != null) {
                                derivedVal = "";
                                szEnergyArray = rs4.getString(headingNames[i]).split(",");
                                for (int count = 0; count < szEnergyArray.length; count++) {
                                    val = (Double.parseDouble(szEnergyArray[count])) / (Double.parseDouble(InstalledCapacity));
                                    derivedVal = derivedVal + df.format(val) + ",";
                                }
                                if (derivedVal.length() > 1) {
                                    derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                                }
                            } else {
                                derivedVal = "";
                            }
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                        } else if (headingNames[i].equals("TimeStamps")) {
                            /*szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":[[" + rs4.getString(headingNames[i]) + "],["
                             + rs4.getString(headingNames[i]) + "]]";*/
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":[";
                            for (int p = 0; p < noOfMetrics; p++) {
                                szConcatColumn += "[" + rs4.getString(headingNames[i]) + "],";
                            }
                            szConcatColumn = szConcatColumn.substring(0, szConcatColumn.length() - 1);
                            szConcatColumn += "]";
                        } else {
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + rs4.getString(headingNames[i]) + "\"";
                        }
                    }
                    szMetricTypeValueJson = szMetricTypeValueJson + "," + rs4.getString(headingNames[i]);
                }
                if (headingNames[headingNames.length - 1].equals("PerformanceRatio")) {
                    derivedVal = "";
                    if (DCXXXEnergy != null) {
                        szEnergyArray = rs4.getString(headingNames[headingNames.length - 1]).split(",");
                        for (int count = 0; count < szEnergyArray.length; count++) {
                            val = (Double.parseDouble(szEnergyArray[count])) / (Double.parseDouble(DCXXXEnergy));
                            derivedVal = derivedVal + df.format(val) + ",";
                        }
                        if (derivedVal.length() > 1) {
                            derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                        }
                    } else {
                        derivedVal = "";
                    }
                } else if (headingNames[headingNames.length - 1].equals("EnergyPerRatedPower")) {
                    derivedVal = "";
                    if (InstalledCapacity != null) {
                        szEnergyArray = rs4.getString(headingNames[headingNames.length - 1]).split(",");
                        for (int count = 0; count < szEnergyArray.length; count++) {
                            val = (Double.parseDouble(szEnergyArray[count])) / (Double.parseDouble(InstalledCapacity));
                            derivedVal = derivedVal + df.format(val) + ",";
                        }
                        if (derivedVal.length() > 1) {
                            derivedVal = derivedVal.substring(0, derivedVal.length() - 1);
                        }
                    } else {
                        derivedVal = "";
                    }
                } else {
                    derivedVal = rs4.getString(headingNames[headingNames.length - 1]);
                }
                szConcatColumn = szConcatColumn + ",\"" + headingNames[headingNames.length - 1] + "\":\"" + derivedVal + "\"";
                perfJSON += "{" + szConcatColumn.substring(1) + "},";
                szConcatColumn = null;
            }
            if (perfJSON.length() > 1) {
                perfJSON = perfJSON.substring(0, perfJSON.length() - 1);
            }
            perfJSON += "]";
            return perfJSON;
        } catch (Exception e) {
            log.error("Error in generateDerivedJsonFromGivenQuery" + e.toString());
            e.printStackTrace();
        } finally {
            ConnectionDAO.closeStatement();
            szConcatColumn = null;
            if (rs4 != null) {
                try {
                    rs4.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                rs4 = null;
            }
        }
        return null;
    }

    public static String generateDerivedJsonFromGivenQueryForCustomer(String szQuery, String[] headingNames, String customer, String cCustomer,
            String resType, String configuredMetricType, String timeStampSelection) {
        String perfJSON = "";
        ResultSet rs4 = null;
        try {
            String szMetricTypeValueJson = "";
            perfJSON = "[";
            rs4 = ConnectionDAO.executerQuery(szQuery, customer);
            String szConcatColumn;//
            String szResID;//
            String service;//
            String derivedVal;//
            String szDCEnergyMetricName;//
            String DCXXXEnergy;//
            String InstalledCapacity;//
            String szEnergy;//
            Double val;//
            DecimalFormat df = new DecimalFormat("#.##");
            while (rs4.next()) {
                szConcatColumn = "";
                szMetricTypeValueJson = "";
                szResID = null;

                service = null;
                log.info("generateDerivedJsonFromGivenQuery resType==>>" + resType);
                service = rs4.getString("ServiceName");
                if (resType.equals("")) {
                } else {
                    szResID = rs4.getString("ResourceID");
                    if (szResID.equals(service)) {
                        continue;
                    }
                }
                log.info("szResID==>>" + szResID);
                derivedVal = null;
                szDCEnergyMetricName = "DCXXXEnergy";
                DCXXXEnergy = ResourceConfiguration.getConfValue(customer, cCustomer, rs4.getString("ServiceName"),
                        null, szDCEnergyMetricName.replaceFirst("XXX", timeStampSelection));
                InstalledCapacity = ResourceConfiguration.getConfValue(customer, cCustomer, rs4.getString("ServiceName"),
                        null, "InstalledCapacity");

                for (int i = 0; i < headingNames.length - 1; i++) {
                    if (rs4.getString(headingNames[i]) != null) {
                        if (headingNames[i].equals("PerformanceRatio")) {
                            if (DCXXXEnergy != null) {
                                szEnergy = rs4.getString(headingNames[i]);
                                log.debug("cust level::szEnergy==>>" + szEnergy);
                                val = (Double.parseDouble(szEnergy)) / (Double.parseDouble(DCXXXEnergy));
                                log.debug("cust level::val==>>" + val);
                                derivedVal = df.format(val);
                            } else {
                                derivedVal = "";
                            }
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                        } else if (headingNames[i].equals("TargetEnergy")) {
                            if (DCXXXEnergy != null) {
                                val = Double.parseDouble(DCXXXEnergy);
                                derivedVal = df.format(val);
                            } else {
                                derivedVal = "";
                            }
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                        } else if (headingNames[i].equals("EnergyPerRatedPower")) {
                            if (InstalledCapacity != null) {
                                szEnergy = rs4.getString(headingNames[i]);
                                val = (Double.parseDouble(szEnergy)) / (Double.parseDouble(InstalledCapacity));
                                derivedVal = df.format(val);
                            } else {
                                derivedVal = "";
                            }
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + derivedVal + "\"";
                        } else if (headingNames[i].equals("TimeStamps")) {
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":[[" + rs4.getString(headingNames[i]) + "],["
                                    + rs4.getString(headingNames[i]) + "]]";
                        } else {
                            szConcatColumn = szConcatColumn + ",\"" + headingNames[i] + "\":\"" + rs4.getString(headingNames[i]) + "\"";
                        }
                    }
                    szMetricTypeValueJson = szMetricTypeValueJson + "," + rs4.getString(headingNames[i]);
                }
                if (headingNames[headingNames.length - 1].equals("PerformanceRatio")) {
                    if (DCXXXEnergy != null) {
                        szEnergy = rs4.getString(headingNames[headingNames.length - 1]);
                        val = (Double.parseDouble(szEnergy)) / (Double.parseDouble(DCXXXEnergy));
                        derivedVal = df.format(val);
                    } else {
                        derivedVal = "";
                    }
                } else if (headingNames[headingNames.length - 1].equals("TargetEnergy")) {
                    if (DCXXXEnergy != null) {
                        val = Double.parseDouble(DCXXXEnergy);
                        derivedVal = df.format(val);
                    } else {
                        derivedVal = "";
                    }
                } else if (headingNames[headingNames.length - 1].equals("EnergyPerRatedPower")) {
                    derivedVal = "";
                    if (InstalledCapacity != null) {
                        szEnergy = rs4.getString(headingNames[headingNames.length - 1]);
                        val = (Double.parseDouble(szEnergy)) / (Double.parseDouble(InstalledCapacity));
                        derivedVal = df.format(val);
                    } else {
                        derivedVal = "";
                    }
                } else {
                    derivedVal = rs4.getString(headingNames[headingNames.length - 1]);
                }
                szConcatColumn = szConcatColumn + ",\"" + headingNames[headingNames.length - 1] + "\":\"" + derivedVal + "\"";
                perfJSON += "{" + szConcatColumn.substring(1) + "},";

            }
            if (perfJSON.length() > 1) {
                perfJSON = perfJSON.substring(0, perfJSON.length() - 1);
            }
            perfJSON += "]";
            return perfJSON;
        } catch (Exception e) {
            log.error("Error in generateDerivedJsonFromGivenQuery" + e.toString());
            e.printStackTrace();
        } finally {
            ConnectionDAO.closeStatement();
            if (rs4 != null) {
                try {
                    rs4.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                rs4 = null;
            }
        }
        return null;
    }

    private static String modifyJson(String input) {
        String output = "";
        boolean altered = false;
        try {
            String[] arrayEles = input.split("},");
            log.info("arrayEles length==>>" + arrayEles.length);
            int startIndex;//
            int endIndex;//
            String perfRatioStr;//
            String energyPerRatedPowerStr;//
            String yieldStr;//
            String actualMTypes;//
            String resNames;//
            String yields;//
            String resValues;//
            String acVals;//
            String exVals;//
            for (String arrayE : arrayEles) {
                altered = true;
                startIndex = arrayE.indexOf("\"PerformanceRatio\":\"");
                endIndex = arrayE.indexOf("\"", startIndex + new String("\"PerformanceRatio\":\"").length());
                perfRatioStr = arrayE.substring(startIndex, endIndex);
                arrayE = arrayE.replace(perfRatioStr + "\",", "");
                startIndex = arrayE.indexOf("\"EnergyPerRatedPower\":\"");
                endIndex = arrayE.indexOf("\"", startIndex + new String("\"EnergyPerRatedPower\":\"").length());
                energyPerRatedPowerStr = arrayE.substring(startIndex, endIndex);
                startIndex = arrayE.indexOf("\"Yield\":\"");

                //arrayE += actualMTypes;

                acVals = perfRatioStr.replace("\"PerformanceRatio\":\"", "");
                exVals = energyPerRatedPowerStr.replace("\"EnergyPerRatedPower\":\"", "");
                if (startIndex != -1) {
                    endIndex = arrayE.indexOf("\"", startIndex + new String("\"Yield\":\"").length());
                    yieldStr = arrayE.substring(startIndex, endIndex);
                    actualMTypes = "\"ActualMetricTypes\":[\"PerformanceRatio\",\"EnergyPerRatedPower\",\"Yield\"]";
                    //arrayE += actualMTypes;
                    resNames = ",\"ResourceNames\":[\"PerformanceRatio\",\"EnergyPerRatedPower\",\"Yield\"]";
                    arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", "");
                    yields = yieldStr.replace("\"Yield\":\"", "");
                    resValues = ",\"ResourceValues\":[[" + acVals + "],[" + exVals + "],[" + yields + "]]";
                    arrayE = arrayE.replace(yieldStr + "\"", actualMTypes + resNames + resValues);
                } else {
                    actualMTypes = "\"ActualMetricTypes\":[\"PerformanceRatio\",\"EnergyPerRatedPower\"]";
                    //arrayE += actualMTypes;
                    resNames = ",\"ResourceNames\":[\"PerformanceRatio\",\"EnergyPerRatedPower\"]";
                    resValues = ",\"ResourceValues\":[[" + acVals + "],[" + exVals + "]]";
                    arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", actualMTypes + resNames + resValues);
                }
                //arrayE += resNames;
                //arrayE = arrayE.replace(energyPerRatedPowerStr + "\"", actualMTypes + resNames);
                output += arrayE + "},";
            }
            if (altered) {
                output = output.substring(0, output.length() - 2);
                //output += "]";
            }
            return output;
        } catch (Exception e) {
            log.error("Error in modifyJson" + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    public static void main(String args[]) {
        String derivedVal = "";
        try {
            DecimalFormat df = new DecimalFormat("#.##");
            //df.format(val);
            derivedVal = derivedVal + df.format(0.067814278) + ",";
            System.out.println("derivedVal1==>>" + derivedVal);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
