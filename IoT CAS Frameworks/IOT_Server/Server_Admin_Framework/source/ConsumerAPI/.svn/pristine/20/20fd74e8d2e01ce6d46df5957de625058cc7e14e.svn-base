/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package AV_Action;

import Model.*;
import controller.DBConstants;
import controller.LogWriter;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class AV_GetAgentFilter extends AV_Model {

    static Logger log = Logger.getLogger(AV_GetAgentFilter.class);
    static ArrayList<String> oPriorityList = new ArrayList<String>();
    static ArrayList<String> oAgentList = new ArrayList<String>();
    public void performRequestAction(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, javax.servlet.ServletContext sc) {

        response.setContentType("text/xml;charset=UTF-8");
        String szopration = "tasktype-assignees";
        String szrespStr = null;
        Connection con = null;
        Integer ISecurityUsers = 1;
        String szTaskType = null;
        String szUserId = null;
        StringBuffer result = new StringBuffer("<agents>");
        try {

            szTaskType = request.getParameter("tasktype");
            szUserId = request.getParameter("userid");
            if (szTaskType != null && !szTaskType.equalsIgnoreCase("") && szUserId != null && !szUserId.equalsIgnoreCase("")) {

                con = DatabaseConnection.getAVSAConnection(request);
                if (con != null) {
                    if (szUserId.equalsIgnoreCase("Admin") || ISecurityUsers == 1) {
                        try {

                            if (szTaskType.equalsIgnoreCase("All")) {
                                Statement statement2 = con.createStatement();

                                ResultSet rs2 = statement2.executeQuery("SELECT userid from " + DBConstants.AGENT_GROUP_TABLE);
                                while (rs2.next()) {
                                    oAgentList.add(rs2.getString("userid"));
                                }
                                rs2.close();
                                statement2.close();
                            } else {
                                PreparedStatement statement2 = con.prepareStatement("select userid from " + DBConstants.AGENT_GROUP_TABLE + " where groupname in(select groupname from " + DBConstants.TASKTYPE_GROUP_TABLE + " where tasktype=?)");
                                statement2.setString(1, szTaskType);
                                ResultSet rs2 = statement2.executeQuery();
                                while (rs2.next()) {
                                    oAgentList.add(rs2.getString("userid"));
                                }
                                rs2.close();
                                statement2.close();
                            }

                            if (!oAgentList.isEmpty()) {
                                for (String s : oAgentList) {

                                    result.append("<agent>");
                                    result.append(s);
                                    result.append("</agent>");
                                }


                            }

                            result.append("</agents>");
                            oAgentList.clear();
                            /*
                             * Adding one more method to get all priorities
                             */
                            oPriorityList = getTasktypePriorities(con, szTaskType);
                            
                            if(!oPriorityList.isEmpty()){
                                result.append("<priorities>");
                                for(String s:oPriorityList){
                                    result.append("<priority>");
                                    result.append(s);
                                    result.append("</priority>");
                                }
                                result.append("</priorities>");
                            }
                            oPriorityList.clear();
                            AV_Constants.opStatus = AV_Constants.SUCCESS;
                        } catch (Exception e) {

                            AV_Constants.opStatus = AV_Constants.DBERROR;
                            e.printStackTrace();
                            LogWriter.writeDebug("EXCEPTION : Performing database operation select groupname from gatasktypegroup		");
                            log.error("error while connecting to database", e);
                        }

                    } else {

                        AV_Constants.opStatus = AV_Constants.SECURITYLEVEL_FAIL;
                    }

                } else {

                    AV_Constants.opStatus = AV_Constants.DBERROR;
                    LogWriter.writeDebug("Connection is NULL ");
                    log.info("Database connection failed");
                }
            } else {
                AV_Constants.opStatus = AV_Constants.INVALID_INPUTS;
                LogWriter.writeDebug("EXCEPTION : Getting the getParameter() values", 1);
            }
        } catch (Exception e) {

            AV_Constants.opStatus = AV_Constants.FAILURE;
            e.printStackTrace();
            LogWriter.writeDebug("EXCEPTION : Performing the whole operation GA_AddSecurityPolicy	" + e);
            log.error("error while processing your request", e);
        } finally {
            try {
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
                log.error("error while closing connection", e);
            }
        }

        try {
            szrespStr = AV_OutputFormat.formatOutPut(AV_Constants.opStatus, result, szopration, sc);
            response.getWriter().write(szrespStr);

        } catch (Exception e) {
            LogWriter.writeDebug("exception while writing output");
            log.error("error while writing output", e);
        } finally {
            try {
                szrespStr = null;
                result = null;
                szopration = null;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }
    /*
     * Method to get all priorities for a particular tasktype
     */

    public ArrayList<String> getTasktypePriorities(Connection con, String szTaskType) {
        Statement st = null;
        PreparedStatement pst=null;
        
        try {
            if (szTaskType.equalsIgnoreCase("All")) {
                st=con.createStatement();
                
            ResultSet rs = st.executeQuery("select distinct(priority) from " + DBConstants.PRIORITY_TABLE);
            while (rs.next()) {
               
                oPriorityList.add(rs.getString(1));
            }
            st.close();
            rs.close();
            } else {

                pst = con.prepareStatement("select priority from " + DBConstants.PRIORITY_TABLE + " where task_type in(?)");
                pst.setString(1, szTaskType);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                
                oPriorityList.add(rs.getString(1));
            }
            pst.close();
            rs.close();
            }
            
            log.info("filter priorities get successfully");
            return oPriorityList;
        } catch (Exception e) {
            log.debug("error while getting tasktype priorities" + e.getMessage());
            return oPriorityList;
        } finally {
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(AV_GetAgentFilter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }
}
