/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;


import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class UserGrouproleconfig extends HttpServlet
{

    static Logger log = Logger.getLogger(UserGrouproleconfig.class);

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");
        boolean checksession = true;
        StringBuffer results = new StringBuffer("<adduser>");
        String opStatus = null;
        String opDescription = null;
        Connection con = null;
        String customerid=null;
        PreparedStatement statement1 = null;
        PreparedStatement statement2 = null;
        HttpSession sessions;
        String szRole;
        String szGroup[];
        int iGroupLen = 0;
        String szUserString = "";
        String szPrimaryRole = "";
        java.util.Vector VStatusVector = new java.util.Vector();
        String username = null;
        String sessionid = null;
        szGroup = request.getParameterValues("groups");
        szUserString = request.getParameter("user_id");
        szPrimaryRole = request.getParameter("primaryRole");
        String szCustomerString = request.getParameter("customer");
        customerid=request.getParameter("customerid");
        String szFlag = request.getParameter("flag");
        if (szFlag == null)
        {
            szFlag = "false";
        }
        //String szGroupLen = request.getParameter("grouplength");
        iGroupLen = szGroup.length;
        System.out.println("Group length is " + iGroupLen);
        System.out.println("szPrimaryRole is " + szPrimaryRole);
        String szRoles = "";
        String szPrimary = "";
        try
        {
            sessions = request.getSession(true);
        } catch (Exception k)
        {
            checksession = false;
        }
        if (checksession)
        {
            try
            {
                con = DatabaseConnection.getDatabaseConnection(request);
                if (con != null)
                {
                    for (int i = 0; i < iGroupLen; i++)
                    {
                        boolean bRole = false;
                        szRole = request.getParameter("roles" + i);
                        System.out.println("Selected role is -->" + szRole);
                        if (szGroup[i].equalsIgnoreCase(szPrimaryRole))
                        {
                            bRole = true;
                        } else
                        {
                            bRole = false;
                        }
                        if (szRole != null)
                        {
                            if (bRole)
                            {
                                szPrimary = szRole;
                                statement2 = con.prepareStatement("update gaoperator set security_level='" + szRole + "' where user_id ='" + szUserString + "'");
                                statement2.executeUpdate();
                                statement2.close();
                                System.out.println("Query to modify operator is--> " + statement2);
                            }
                            statement1 = con.prepareStatement("update gaagentgroup set role='" + szRole + "' where userid ='" + szUserString + "'and groupname ='" + szGroup[i] + "' ");
                            statement1.executeUpdate();
                            System.out.println("Query to check is--> " + statement1);
                        } else
                        {
                        }
                        statement1.close();
                    }
                    opStatus = "0";
                    opDescription = "UserGroupRoles configured Successfully";
                    log.info("usergrouproles configured");
                }
            } catch (Exception ex)
            {
                opStatus = "101";
                opDescription = "Operation failed due to Database problem";
                ex.printStackTrace();
                log.error("error processing database action", ex);
            } finally
            {
                try
                {
                    if (con != null)
                    {
                        con.close();
                    }
                } catch (Exception e)
                {
                    e.printStackTrace();
                    log.error("error closing connection");
                }
            }
        } else
        {

            opStatus = "102";
            opDescription = "Invalid Session";
            log.error("invalid session");

        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            results.append("</adduser>");
            response.getWriter().write(results.toString());
        } catch (Exception e)
        {
            LogWriter.writeDebug("exception while writing out put");
        } finally
        {
            results = null;
        }


    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
