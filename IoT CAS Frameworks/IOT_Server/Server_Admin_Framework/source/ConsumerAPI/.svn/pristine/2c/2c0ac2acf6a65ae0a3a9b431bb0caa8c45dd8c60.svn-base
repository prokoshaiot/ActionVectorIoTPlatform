/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class ListTaskTypes extends HttpServlet {

    static Logger log = Logger.getLogger(ListTaskTypes.class);

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/xml;charset=UTF-8");
        Connection con = null;
        boolean sessioncheck = true;
        StringBuffer results = new StringBuffer("<task-typelist>");
        StringBuffer result = null;
        String opStatus = "";
        String opDescription = "";
        HttpSession HSSessions;
        Object OUser1;
        String szUsers;
        Integer ISecurityUsers = 1;
        String sATaskType = "";
        String szFromAdminLogin = "";
        String username = null;
        String sessionid = null;
        String customerid = null;

        try {
            HSSessions = request.getSession(true);
            //username=request.getParameter("username");
            //sessionid=request.getParameter("sessionid");

            szFromAdminLogin = (String) HSSessions.getAttribute("FromAdminLogin");
            customerid = request.getParameter("customerid");
          
        } catch (Exception e) {
            e.printStackTrace();

            //sessioncheck=false;
            System.out.println("Invaid session Login again");
            log.error("invalid session");

        }

        if (sessioncheck) {
            try {
                
                con = DatabaseConnection.getRefDatabaseConnection(request);
                log.info("connected to database");
                if (con != null) {
                                log.info("Connection get succssfully");
                                 result = new StringBuffer("<task-types>");
                    try {
                       
                        PreparedStatement statement4 = con.prepareStatement("Select * from " + DBConstants.TASKTYPE_TABLE + " ");
                        ResultSet rs4 = statement4.executeQuery();
                        log.info("parsing result set");
                        while (rs4.next()) {
                            sATaskType = rs4.getString("task_type");
                            result.append("<task-type>");
                            result.append(sATaskType);
                            result.append("</task-type>");
                        }
                        statement4.close();
                        rs4.close();
                        opStatus = "0";
                        opDescription = "Tasktype list get successfully";
                        result.append("</task-types>");
                        log.info("tasktype get successfully");
                    } catch (NullPointerException npe) {
                        result.append("</task-types>");
                        opStatus = "107";
                        opDescription = "No Records found";
                        log.error("No Records found::"+npe);
                        System.out.println("exception while showing list of tasktypes");
                        npe.printStackTrace();
                    }

                } else {
                    opStatus = "101";
                    opDescription = "Database connection failed";
                    log.info("Database connection failed");
                }
            } catch (Exception e) {
                result.append("</task-types>");
                opStatus = "106";
                opDescription = "Unable to process Request action";
                log.error("unable to process the request action:"+e);
                e.printStackTrace();
            } finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    log.error("exception while closeing connection", e);
                }
            }
        } else {
            opStatus = "102";
            opDescription = "Invalid Status";
        }

        try {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            if (!(result == null)) {

                results.append(result);

            }
            results.append("</task-typelist>");
            response.getWriter().write(results.toString());

        } catch (Exception e) {
            LogWriter.writeDebug("exception while writing output");
        } finally {
            results = null;
            result = null;
        }



    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
