/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.sql.*;



import java.util.*;
import java.util.HashMap;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class GroupRoleAdd extends HttpServlet
{

    static Logger log = Logger.getLogger(GroupRoleAdd.class);
    private Object dBuildeer;

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");

        Connection con = null;
        ResultSet rs = null;
        StringBuffer results = new StringBuffer("<addgroup-roles>");

        String opStatus = null;
        String opDescription = null;
        boolean test = false;

        PreparedStatement statement1 = null;
        PreparedStatement statement2 = null;
        Statement statement3 = null;
        PreparedStatement statement4 = null;
        Statement statement5 = null;
        HttpSession sessions = null;
        String sessionid = null;
        String username = null;
        String customerid=null;
        ArrayList<String> szRoles = new ArrayList<String>();
        //  String szGroup[];
        int iGroupLen = 0;

        java.util.Vector VStatusVector = new java.util.Vector();

        ArrayList<String> szGroupName = new ArrayList<String>();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        customerid=request.getParameter("customerid");
        String szGroupLen = request.getParameter("grouplength");
        System.out.println("Group length is " + szGroupLen);
        //iGroupLen = Integer.parseInt(szGroupLen);
        //String szRoles = "";
        boolean checksession = true;
        String szGroupRoles = null;
        String szGroup = null;
        String szTemp[] = null;
        String Temp[] = null;

        try
        {
            sessions = request.getSession(true);
            //szGroupRoles=(String)sessions.getAttribute("results");
            //System.out.println("xml String::"+szGroupRoles);
            //sessionid=request.getParameter("sessionid");
            //username=request.getParameter("username");
        } catch (Exception k)
        {
            checksession = false;
            opStatus = "102";
            opDescription = "Invalid Session";
            log.error("invalid session");
        }

        if (checksession)
        {
            try
            {
                con = DatabaseConnection.getDatabaseConnection(request);
                log.info("database connected");

                if (con != null)
                {
                    try
                    {
                        System.out.println("Before getting groupname");
                        statement3 = con.createStatement();
                        System.out.println("Statement::" + statement3);
                        ResultSet rs1 = statement3.executeQuery("SELECT * from " + DBConstants.GROUPNAME_TABLE + " order by groupname");

                        while (rs1.next())
                        {

                            szGroupName.add(rs1.getString("groupname"));
                        }
                        rs1.close();
                        statement3.close();
                    } catch (Exception e)
                    {
                        opStatus = "107";
                        opDescription = "No data found";
                        e.printStackTrace();
                        log.error("no data found");
                    }
                    try
                    {
                        statement5 = con.createStatement();
                        ResultSet rs4 = statement5.executeQuery("select name from gasecuritylevels where level !=1 and name != 'User'");
                        while (rs4.next())
                        {
                            szRoles.add((String) rs4.getString("name"));
                        }
                        rs4.close();
                        statement5.close();
                        Iterator it = szGroupName.iterator();
                        while (it.hasNext())
                        {
                            szGroup = (String) it.next();
                            szGroupRoles = (String) request.getParameter(szGroup);
                            if (szGroupRoles != null)
                            {
                                Temp = szGroupRoles.split(",");
                                for (int l = 0; l < Temp.length; l++)
                                {
                                    test = szRoles.contains(Temp[l]);
                                    if (!test)
                                    {
                                        break;
                                    }
                                }
                                //szTemp=szGroupRoles.split(",");
                                if (test)
                                {
                                    hashMap.put(szGroup, szGroupRoles);
                                } else
                                {
                                    opStatus = "108";
                                    opDescription = "Invalid Input";
                                    log.info("invalid inputs");
                                    break;
                                }

                            }
                            Temp = null;
                        }

                        Set st = hashMap.entrySet();
                        Iterator itr = st.iterator();
                        if (test)
                        {
                            while (itr.hasNext())
                            {
                                Map.Entry me = (Map.Entry) itr.next();
                                statement2 = con.prepareStatement("select * from gagrouproles where groupname=?");
                                statement2.setString(1, (String) me.getKey());
                                rs = statement2.executeQuery();
                                if (rs.next())
                                {
                                    System.out.println("updating grouproles");
                                    statement4 = con.prepareStatement("update gagrouproles set role=? where groupname=?");
                                    statement4.setString(1, (String) me.getValue());
                                    statement4.setString(2, (String) me.getKey());
                                    statement4.executeUpdate();
                                } else
                                {
                                    System.out.println("Inserting data into group roles");
                                    statement4 = con.prepareStatement("insert into gagrouproles values(?,?)");
                                    statement4.setString(1, (String) me.getKey());
                                    statement4.setString(2, (String) me.getValue());
                                    statement4.executeUpdate();


                                }
                                opStatus = "0";
                                opDescription = "Success";
                                log.info("operation success");
                            }
                        } else
                        {
                            opStatus = "108";
                            opDescription = "Invalid Input";
                            log.info("invalid inputs");

                        }
                    } catch (Exception e)
                    {
                        e.printStackTrace();
                        opStatus = "101";

                        opDescription = "Database Error";
                        log.info("database error");
                    }
                } else
                {
                    opStatus = "101";
                    opDescription = "Unable to connect database";
                    log.info("unable to connect database");
                }
            } catch (Exception e)
            {
                e.printStackTrace();
                opStatus = "106";
                opDescription = "Unable to process request action";
                log.info("Unable to process request");

            } finally
            {

                try
                {
                    statement3.close();
                    statement4.close();
                    statement2.close();
                    rs.close();
                    if (con != null)
                    {
                        con.close();
                    }
                } catch (Exception e)
                {
                    e.printStackTrace();
                    log.error("error closing connection", e);
                }
            }
        } else
        {
            opStatus = "102";
            opDescription = "Invalid Session login again";
            log.info("invalid session ");
        }
        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            results.append("</addgroup-roles>");
            response.getWriter().write(results.toString());
        } catch (Exception e)
        {
            LogWriter.writeDebug("exception while writing out put");
        }finally{
            results=null;
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }
}
