/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import Model.*;
import java.io.*;
import java.util.Date;
import java.text.*;
import java.util.*;
import java.sql.*;
import dbmanager.DatabaseConnectionManager;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Document;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;

/**
 *
 * @author gopal
 */
public class DatabaseCreation extends HttpServlet
{

    static Logger log = Logger.getLogger(DatabaseCreation.class);
    private String szDatabaseName = null;
    private String szDataSourceName = null;
    private String szDatabaseDriver = null;
    private String szDatabaseUser = null;
    private String szDatabasePassword = null;
    private String szKey1 = "";
    private String szKey2 = "";
    private String szDemoKey1 = "";
    private String szDemoKey2 = "";
    private String szDomainName = "";
    private String szDirectoryString = "";
    private String szFileString = "";
    private String szStorePath = "";
    private String szMediumStringColumnType = "";
    private String szStringColumnType = ""; 	//3/19/2008 -ADDED
    private String szSMStringColumnType = ""; 	//3/19/2008 -ADDED
    private String szBigIntColumnType = ""; 	//3/24/2008 -ADDED
    private String sz80StringColumnType = "";
    private String szLongStringColumnType = "";
    private String szTextColumnType = "";
    private String szTimeStampColumnType = "";
    private String szBinaryColumnType = "";
    private String szBinaryColumnType1 = "";
    private String szIntegerColumnType = "";
    private String szExternaluser = "";
    private int iKeyValidation = -1;
    private int iValidate = -1;
    private boolean bDemoFlag = false;
    private File ConfigFile = null;
    private RandomAccessFile RAFdis = null;
    private FileOutputStream FOSfout = null;
    private PrintWriter FileOut = null;
    private java.sql.Connection con = null;
    private java.sql.PreparedStatement statement = null;
    java.util.Calendar calendar = java.util.Calendar.getInstance();
    int iMonth = calendar.get(java.util.Calendar.MONTH) + 1;

    // General modification done in table creation. Now the table names are made to get from bean DBConstants. The ColumnField Types should be dynamic inroder to give multiDBSupport.
    DBConstants DBConstants = new DBConstants();

    public String _XXXGetDatabaseName()
    {
        return szDatabaseName;
    }

    public String _XXXGetDataSourceName()
    {
        return szDataSourceName;
    }

    public String _XXXGetDatabaseDriver()
    {
        return szDatabaseDriver;
    }

    public String _XXXGetDatabaseUser()
    {
        return szDatabaseUser;
    }

    public String _XXXGetDatabasePassword()
    {
        return szDatabasePassword;
    }

    public boolean _XXXisDemoFlag()
    {
        return bDemoFlag;
    }

    public void updatedatasource_in_context(String szDomainName, String szDatabaseName, String szDataSourceName, String szDatabaseDriver, String szDatabaseUser, String szDatabasePassword, String path)
    {
        try
        {

            String fileseprator = System.getProperty("file.separator");
            //String context_file_path=sc.getContextPath
            String context_file_path = path + "webapps" + fileseprator + "proChara" + fileseprator + "META-INF" + fileseprator + "context.xml";
//String context_file_path="D:\\choti_rekha_prochara_source\\proCharaAdwitnewdb\\build\\web\\META-INF\\context.xml";
            System.out.println("context_file_path" + context_file_path);
            File file = new File(context_file_path);
            System.out.println("is file exists " + file.exists());
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(file);
            doc.getDocumentElement().normalize();
            System.out.println("Root element" + doc.getDocumentElement().getNodeName());
            NodeList nodeLst = doc.getElementsByTagName("Resource");
            System.out.println("Information of all Resource");
            Node node = null;
            System.out.println("nodeLst length " + nodeLst.getLength());
            for (int i = 0; i < nodeLst.getLength(); i++)
            {
                //nodeLst(list.item(i), indent + " ");
                node = nodeLst.item(i);
                if (node instanceof Element && node.hasAttributes())
                {
                    System.out.println("Element Attributes are:");
                    NamedNodeMap attrs = node.getAttributes();
                    System.out.println("attrs length" + attrs.getLength());
                    for (int j = 0; j < attrs.getLength(); j++)
                    {
                        Attr attribute = (Attr) attrs.item(j);
                        System.out.println(attribute.getName() + "=" + attribute.getValue());
                        System.out.println("(attribute.getName().toString()");
                        if ((attribute.getName().toString()).equalsIgnoreCase("driverClassName"))
                        {
                            System.out.println("updating driverClassName " + szDatabaseDriver);
                            attribute.setValue(szDatabaseDriver);

                        }
                        if ((attribute.getName().toString()).equalsIgnoreCase("url"))
                        {
                            System.out.println("updating url " + szDataSourceName);
                            attribute.setValue(szDataSourceName);
                        }
                        if ((attribute.getName().toString()).equalsIgnoreCase("username"))
                        {
                            System.out.println("updating username " + szDatabaseUser);
                            attribute.setValue(szDatabaseUser);
                        }
                        if ((attribute.getName().toString()).equalsIgnoreCase("password"))
                        {
                            System.out.println("updating password " + szDatabasePassword);
                            attribute.setValue(szDatabasePassword);
                        }

                    }
                }
            }

            //String tempfile="C:\\context.xml";

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            System.out.println("Domsource is " + source);
            System.out.println("is file exists " + file.exists());
            StreamResult result = new StreamResult(file);
            System.out.println("Stream result" + result);

            transformer.transform(source, result);

            System.out.println("Done");





        /*if(file.exists())
        file.delete();
        File newfile=new File("D:\\choti rekha prochara source\\proCharaAdwitnewdb\\build\\web\\META-INF\\context.xml");
        RAFdis = new RandomAccessFile(newfile,"rw");
        FOSfout = new FileOutputStream(newfile);
        FileOut = new PrintWriter(FOSfout,true);
        String data="<?xml version="1.0" encoding="UTF-8"?><Context antiJARLocking="true" path="/test"><Resource name="jdbc/adwittrack" auth="Container"type="javax.sql.DataSource" username="dhina" password="password"driverClassName="org.postgresql.Driverbgfdgjdf" url="jdbc:postgresql://192.168.1.7/adwittrack"maxActive="8" maxIdle="4"/></Context>"
        FileOut.println("[Database Specifications]");*/

        } catch (Exception e)
        {
            e.printStackTrace();
        }

    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        response.setContentType("text/xml;charset=UTF-8");


        StringBuffer results = new StringBuffer("<databasecreation>");
        String opStatus = null;
        String opDescription = null;
        boolean inputFlag = false;

        try
        {
            boolean bRequestProcessFlag = true;
            boolean bConnectionFlag = false;
            javax.servlet.http.HttpSession HSsession = request.getSession(true);

            String fileseprator = System.getProperty("file.separator");
            // testads.getServletContext().getRealPath(fileseprator);
            // String path= gafile.   getServletContext().getRealPath("/");
            // javax.servlet.ServletContext sc = ServletActionContext.getServletContext();
            // String path = javax.servlet.GenericServlet.getServletContext().getRealPath("/");
            //System.out.println("path "+ path);
            String path = System.getProperty("user.dir");
            //System.get
            //String fileseprator=System.getProperty("file.separator");
            System.out.println("path " + path);
            String temppath[] = path.split("bin");
            System.out.println("temppath.length" + temppath.length);
            String subpath = "";
            for (int i = 0; i < temppath.length; i++)
            {
                subpath = subpath + fileseprator + temppath[i];
                System.out.println("subpath");

            }
            System.out.println("subpath" + subpath);


            try
            {
                szDomainName = request.getServerName();
                szDatabaseName = request.getParameter("dbselect");
                szDataSourceName = request.getParameter("datasource_name");
                szDatabaseDriver = request.getParameter("database_driver");
                szDatabaseUser = request.getParameter("database_user");
                szDatabasePassword = request.getParameter("database_pass");

                szKey1 = request.getParameter("key1");
                szKey2 = request.getParameter("key2");
                szDemoKey1 = request.getParameter("szkey1");
                szDemoKey2 = request.getParameter("szkey2");
                inputFlag = true;
                try
                {
                    System.out.println("szDatabaseName  in DatabaseCreation.java  " + szDatabaseName);

                    DBConstants.setColumnFields(szDatabaseName);
                    szMediumStringColumnType = DBConstants.getMediumStringColumnType();
                    szStringColumnType = DBConstants.getStringColumnType(); //3/19/2008
                    szSMStringColumnType = DBConstants.getszSMStringColumnType(); //3/19/2008
                    sz80StringColumnType = DBConstants.get80StringColumnType();
                    szLongStringColumnType = DBConstants.getLongStringColumnType();
                    szTextColumnType = DBConstants.getTextColumnType();
                    szTimeStampColumnType = DBConstants.getTimeStampColumnType();
                    szBinaryColumnType = DBConstants.getBinaryColumnType();
                    szBinaryColumnType1 = DBConstants.getBinaryColumnType1();
                    szIntegerColumnType = DBConstants.getIntegerColumnType();
                    //3/24/2008
                    szBigIntColumnType = DBConstants.getszBigIntColumnType();
                    szExternaluser = DBConstants.getszExternaluser();

                } catch (Exception e0)
                {
                    e0.printStackTrace();
                    log.error("Exception:while getting DBconstants");
                }
            } catch (Exception e)
            {
                e.printStackTrace();
                System.out.println(" EXCEPTION : Getting the Database values and keys here ");
            }
            try
            {
                iKeyValidation = _XXXValidateKeys(szKey1, szKey2);
                if (iKeyValidation == -1 || ((szDemoKey1.equalsIgnoreCase(szKey1)) && (szDemoKey2.equalsIgnoreCase(szKey2))))
                {
                    szKey1 = szDemoKey1;
                    szKey2 = szDemoKey2;
                    bDemoFlag = true;
                }
            } catch (Exception e)
            {
                System.out.println(" EXCEPTION : Validating the key values here ");
            }
            try
            {
                //szDomainName = request.getServerName();
                szDirectoryString = System.getProperty("user.home");
                szFileString = szDirectoryString + System.getProperty("file.separator") + "ActionVector-" + szDomainName + ".ini";
                //szFileString = szDirectoryString + System.getProperty("file.separator") + "ActionVector-" + szDomainName + ".ini";
                ConfigFile = new File(szFileString);
                szStorePath = szDirectoryString + System.getProperty("file.separator") + "ActionVector-" + szDomainName + ".ini";
                RAFdis = new RandomAccessFile(ConfigFile, "rw");
                FOSfout = new FileOutputStream(ConfigFile);
                FileOut = new PrintWriter(FOSfout, true);
                FileOut.println("[Database Specifications]");
                FileOut.println("Database Name=" + szDatabaseName);
                FileOut.println("Data Source Name=" + szDataSourceName);
                FileOut.println("Driver Name=" + szDatabaseDriver);
                FileOut.println("Database User=" + szDatabaseUser);
                FileOut.println("Database Password=" + szDatabasePassword);
                FileOut.println("Key1=" + szKey1);
                FileOut.println("Key2=" + szKey2);
                RAFdis.close();
             //updatedatasource_in_context(szDomainName, szDatabaseName, szDataSourceName, szDatabaseDriver, szDatabaseUser, szDatabasePassword, subpath);
            } catch (Exception e)
            {
                e.printStackTrace();
            }
            try
            {
                //Class.forName(szDatabaseDriver);

               // DatabaseConnectionManager.init("java:comp/env/jdbc/adwittrack1");
                con = DatabaseConnection.getDatabaseConnection(request,szDatabaseDriver,szDataSourceName,szDatabaseUser,szDatabasePassword);
                bConnectionFlag = true;
            } catch (Exception e)
            {
                e.printStackTrace();
                bConnectionFlag = false;
            }
            if (inputFlag)
            {
                if (bDemoFlag)
                {
                    if (!bConnectionFlag)
                    {
                        opStatus = "101";
                        opDescription = "Database connection failed";
                    //request.setAttribute("NextScreen", "/jsp/GA_AdminError.htm");

                    } else
                    {
                        try
                        {
                            //System.out.println("Create table statement :\n"+"CREATE TABLE "+DBConstants.DOMAIN_INFO_TABLE+" (domainname "+szMediumStringColumnType+",homedir "+szMediumStringColumnType+",smtpaddress "+szMediumStringColumnType+",smtpport "+szIntegerColumnType+",smtpuser "+szMediumStringColumnType+",smtppassword "+szMediumStringColumnType+",imapaddress "+szMediumStringColumnType+",imapport "+szIntegerColumnType+", bannerfile "+szMediumStringColumnType+",backgroundgif "+szMediumStringColumnType+",backgroundcolor "+szMediumStringColumnType+", language "+szMediumStringColumnType+", faxdomain "+szMediumStringColumnType+",faxport "+szIntegerColumnType+",smsdomain "+szMediumStringColumnType+",smsport "+szIntegerColumnType+",loglevel "+szIntegerColumnType+",userregistration "+szMediumStringColumnType+",regmailboxid "+szMediumStringColumnType+",regmailboxpassword "+szMediumStringColumnType+",postcreatefile "+szMediumStringColumnType+",postupdatefile "+szMediumStringColumnType+",usergroup "+szMediumStringColumnType+",currentmonth "+szIntegerColumnType+", key1 "+szMediumStringColumnType+",key2 "+szMediumStringColumnType+", domainemail "+szMediumStringColumnType+",logofile "+szMediumStringColumnType+",organizationname "+szMediumStringColumnType+",bandcolor "+szMediumStringColumnType+", PRIMARY KEY(domainname))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
//					CREATE BUFFERPOOL BUFPOL4 SIZE 250 PAGESIZE 8 K;
//					CREATE TABLESPACE TBSPC PAGESIZE 8 K MANAGED BY SYSTEM USING ('D:\ActionVector\Bufpool\lctblsp') BUFFERPOOL BUFPOL4;
//					statement  = con.prepareStatement("CREATE BUFFERPOOL BUFPOL4 SIZE 250 PAGESIZE 8 K;CREATE TABLESPACE TBSPC PAGESIZE 8 K MANAGED BY SYSTEM USING ('D:\ActionVector\Bufpool\lctblsp') BUFFERPOOL BUFPOL4;CREATE TABLE "+DBConstants.DOMAIN_INFO_TABLE+" (domainname "+szMediumStringColumnType+" not null primary key ,homedir "+szMediumStringColumnType+",smtpaddress "+szMediumStringColumnType+",smtpport "+szIntegerColumnType+",smtpuser "+szMediumStringColumnType+",smtppassword "+szMediumStringColumnType+",imapaddress "+szMediumStringColumnType+",imapport "+szIntegerColumnType+", bannerfile "+szMediumStringColumnType+",backgroundgif "+szMediumStringColumnType+",backgroundcolor "+szMediumStringColumnType+", language "+szMediumStringColumnType+", faxdomain "+szMediumStringColumnType+",faxport "+szIntegerColumnType+",smsdomain "+szMediumStringColumnType+",smsport "+szIntegerColumnType+",loglevel "+szIntegerColumnType+",userregistration "+szMediumStringColumnType+",regmailboxid "+szMediumStringColumnType+",regmailboxpassword "+szMediumStringColumnType+",postcreatefile "+szMediumStringColumnType+",postupdatefile "+szMediumStringColumnType+",usergroup "+szMediumStringColumnType+",currentmonth "+szIntegerColumnType+", key1 "+szMediumStringColumnType+",key2 "+szMediumStringColumnType+", domainemail "+szMediumStringColumnType+",logofile "+szMediumStringColumnType+",organizationname "+szMediumStringColumnType+",bandcolor "+szMediumStringColumnType+")");
                                try
                                {

                                    statement = con.prepareStatement("CREATE BUFFERPOOL BUFPOL4 SIZE 250 PAGESIZE 8 K");
                                    statement.executeUpdate();
                                } catch (Exception e)
                                {
                                    e.printStackTrace();
                                }
                                try
                                {
                                    String szFilename = szDirectoryString + System.getProperty("file.separator") + "buffpool" + System.getProperty("file.separator") + "tblsp";
                                    statement = con.prepareStatement("CREATE TABLESPACE TBSPC123 PAGESIZE 8 K MANAGED BY SYSTEM USING ('" + szFilename + "') BUFFERPOOL BUFPOL4");
                                    statement.executeUpdate();
                                } catch (Exception e)
                                {
                                    e.printStackTrace();
                                }
                                try
                                {
                                    statement = con.prepareStatement("CREATE TABLE " + DBConstants.DOMAIN_INFO_TABLE + " (domainname " + szMediumStringColumnType + " not null primary key ,homedir " + szMediumStringColumnType + ",smtpaddress " + szMediumStringColumnType + ",smtpport " + szIntegerColumnType + ",smtpuser " + szMediumStringColumnType + ",smtppassword " + szMediumStringColumnType + ",imapaddress " + szMediumStringColumnType + ",imapport " + szIntegerColumnType + ", bannerfile " + szMediumStringColumnType + ",backgroundgif " + szMediumStringColumnType + ",backgroundcolor " + szMediumStringColumnType + ", language " + szMediumStringColumnType + ", faxdomain " + szMediumStringColumnType + ",faxport " + szIntegerColumnType + ",smsdomain " + szMediumStringColumnType + ",smsport " + szIntegerColumnType + ",loglevel " + szIntegerColumnType + ",userregistration " + szMediumStringColumnType + ",regmailboxid " + szMediumStringColumnType + ",regmailboxpassword " + szMediumStringColumnType + ",postcreatefile " + szMediumStringColumnType + ",postupdatefile " + szMediumStringColumnType + ",usergroup " + szMediumStringColumnType + ",currentmonth " + szIntegerColumnType + ", key1 " + szMediumStringColumnType + ",key2 " + szMediumStringColumnType + ", domainemail " + szMediumStringColumnType + ",logofile " + szMediumStringColumnType + ",organizationname " + szMediumStringColumnType + ",bandcolor " + szMediumStringColumnType + ",homepage " + szMediumStringColumnType + ",LoginURL_Ref " + szMediumStringColumnType + ",MeritCopyRight_reqd " + szMediumStringColumnType + ", strongpasswordchk " + szSMStringColumnType + ",externaluserflag " + szExternaluser + ", homegif " + szMediumStringColumnType + ",passwordexpperiod " + szIntegerColumnType + ",nopasslockattempt " + szIntegerColumnType + ") IN TBSPC123");
                                    statement.executeUpdate();
                                } catch (Exception e)
                                {
                                    e.printStackTrace();
                                }
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.DOMAIN_INFO_TABLE + " (domainname " + szMediumStringColumnType + ",homedir " + szMediumStringColumnType + ",smtpaddress " + szMediumStringColumnType + ",smtpport " + szIntegerColumnType + ",smtpuser " + szMediumStringColumnType + ",smtppassword " + szMediumStringColumnType + ",imapaddress " + szMediumStringColumnType + ",imapport " + szIntegerColumnType + ", bannerfile " + szMediumStringColumnType + ",backgroundgif " + szMediumStringColumnType + ",backgroundcolor " + szMediumStringColumnType + ", language " + szMediumStringColumnType + ", faxdomain " + szMediumStringColumnType + ",faxport " + szIntegerColumnType + ",smsdomain " + szMediumStringColumnType + ",smsport " + szIntegerColumnType + ",loglevel " + szIntegerColumnType + ",userregistration " + szMediumStringColumnType + ",regmailboxid " + szMediumStringColumnType + ",regmailboxpassword " + szMediumStringColumnType + ",postcreatefile " + szMediumStringColumnType + ",postupdatefile " + szMediumStringColumnType + ",usergroup " + szMediumStringColumnType + ",currentmonth " + szIntegerColumnType + ", key1 " + szMediumStringColumnType + ",key2 " + szMediumStringColumnType + ", domainemail " + szMediumStringColumnType + ",logofile " + szMediumStringColumnType + ",organizationname " + szMediumStringColumnType + ",bandcolor " + szMediumStringColumnType + ",homepage " + szMediumStringColumnType + ",LoginURL_Ref " + szMediumStringColumnType + ",MeritCopyRight_reqd " + szMediumStringColumnType + ", strongpasswordchk " + szSMStringColumnType + ",externaluserflag " + szSMStringColumnType + ",homegif " + szMediumStringColumnType + ",passwordexpperiod " + szIntegerColumnType + ",nopasslockattempt " + szIntegerColumnType + ",PRIMARY KEY(domainname))");
                                statement.executeUpdate();
                            }
                            System.out.println("This is after domaininfo table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : Creating table GADomaininfo " + statement);
                            System.out.println(" EXCEPTION : Creating table GADomaininfo " + e.getMessage());
                            e.printStackTrace();
                        }
                        // Insert values into Domain info table
                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.DOMAIN_INFO_TABLE + "  values('" + szDomainName + "','/var/tomcat4/webapps/ROOT','127.0.0.1',25,'None','None','127.0.0.1',143,'../images/ActionVector-logo-for-Claim.gif','../images/level1_regular.gif','white','English','None',0,'None',0,3,'Normal registration','None','None','None','None','None'," + iMonth + ",'None','None','None','../images/prokosha-logo.png','Internal','#a0b8c8','None','NONE','Yes','No','no','../images/ActionVectorSite.jpg',100,0)");
                            statement.executeUpdate();
                            System.out.println(" This is after domaininfo insertion....");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : Inserting table GADomaininfo " + statement);
                            System.out.println(" EXCEPTION : Inserting Domaininfo values ");
                            e.printStackTrace();
                        }

                        // Update the Domain info table with Keys

                        try
                        {
                            statement = con.prepareStatement("UPDATE " + DBConstants.DOMAIN_INFO_TABLE + " set key1 = '" + szKey1 + "',key2 = '" + szKey2 + "' where domainname = '" + szDomainName + "'");
                            statement.executeUpdate();
                            System.out.println(" This is after keys updations...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : Updating Keys value ");
                        }
                        // This is GACustomer Table Creation

                        try
                        {
                         //statement = con.prepareStatement("CREATE TABLE "+DBConstants.CUSTOMER_TABLE+" (customer_name "+szMediumStringColumnType+" NOT NULL,category "+szMediumStringColumnType+",contact_person "+szMediumStringColumnType+", cust_phone "+szMediumStringColumnType+",cust_fax "+szMediumStringColumnType+","+"cust_email "+szMediumStringColumnType+", cust_email2 "+szMediumStringColumnType+",remarks "+szTextColumnType+",max_no_users "+szIntegerColumnType+",supervisor_id "+szMediumStringColumnType+",supervisor_password "+szMediumStringColumnType+",address "+szTextColumnType+", city "+szMediumStringColumnType+"," +"zip "+szMediumStringColumnType+",state "+szMediumStringColumnType+",country "+szMediumStringColumnType+",customer_prefix "+szMediumStringColumnType+",PRIMARY KEY (customer_name))");
                        //Added Columns "region, reference_id"  3/19/2008 -- SUSMITA
                            System.out.println("CREATE TABLE " + DBConstants.CUSTOMER_TABLE + " (customer_name " + szMediumStringColumnType + " NOT NULL,category " + szMediumStringColumnType + ",contact_person " + szMediumStringColumnType + ", cust_phone " + szMediumStringColumnType + ",cust_fax " + szMediumStringColumnType + "," + "cust_email " + szMediumStringColumnType + ", cust_email2 " + szMediumStringColumnType + ",remarks " + szTextColumnType + ",max_no_users " + szIntegerColumnType + ",supervisor_id " + szMediumStringColumnType + ",supervisor_password " + szMediumStringColumnType + ",address " + szTextColumnType + ", city " + szMediumStringColumnType + "," + "zip " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ",country " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + ",region			" + szStringColumnType + ",reference_id					" + szStringColumnType + ",PRIMARY KEY (customer_name))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CUSTOMER_TABLE + " (customer_name " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,category " + szMediumStringColumnType + ",contact_person " + szMediumStringColumnType + ", cust_phone " + szMediumStringColumnType + ",cust_fax " + szMediumStringColumnType + "," + "cust_email " + szMediumStringColumnType + ", cust_email2 " + szMediumStringColumnType + ",remarks " + szTextColumnType + ",max_no_users " + szIntegerColumnType + ",supervisor_id " + szMediumStringColumnType + ",supervisor_password " + szMediumStringColumnType + ",address " + szTextColumnType + ", city " + szMediumStringColumnType + "," + "zip " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ",country " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + ",region			" + szStringColumnType + ",reference_id					" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CUSTOMER_TABLE + " (customer_name " + szMediumStringColumnType + " NOT NULL,category " + szMediumStringColumnType + ",contact_person " + szMediumStringColumnType + ", cust_phone " + szMediumStringColumnType + ",cust_fax " + szMediumStringColumnType + "," + "cust_email " + szMediumStringColumnType + ", cust_email2 " + szMediumStringColumnType + ",remarks " + szTextColumnType + ",max_no_users " + szIntegerColumnType + ",supervisor_id " + szMediumStringColumnType + ",supervisor_password " + szMediumStringColumnType + ",address " + szTextColumnType + ", city " + szMediumStringColumnType + "," + "zip " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ",country " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + ",region			" + szStringColumnType + ",reference_id					" + szStringColumnType + ",PRIMARY KEY (customer_name))");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after customer table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating Customer Table ");
                            System.out.println(" statement " + statement);

                        }


//------------------------------------------------------------------------
// This is gawebservice Table Creation
//Added TABLE WEB_SERVICE_TABLE  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.WEB_SERVICE_TABLE + " (servicename " + szStringColumnType + ", path " + szStringColumnType + ",porttype                                       " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_TABLE + " (servicename					" + szStringColumnType + ", path				" + szStringColumnType + ",porttype					" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_TABLE + " (servicename					" + szStringColumnType + ", path				" + szStringColumnType + ",porttype					" + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after WebService table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating WebService Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gawebservicemessagemap Table Creation
//Added TABLE WEB_SERVICE_MESSAGE_MAP_TABLE  3/19/2008 -- SUSMITA



                        try
                        {

                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE gagrouproles (groupname  " + szStringColumnType + ", role " + szStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE gagrouproles (groupname  " + szStringColumnType + ", role " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after WebService table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating WebService Table ");
                            System.out.println(" statement " + statement);

                        }
                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGE_MAP_TABLE + " (tasktype " + szStringColumnType + ", event" + szStringColumnType + ", rulename	" + szStringColumnType + ", parm" + szStringColumnType + " , value " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGE_MAP_TABLE + " (tasktype			" + szStringColumnType + ", event				" + szStringColumnType + ",rulename					" + szStringColumnType + ",parm	" + szStringColumnType + ",value 				" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGE_MAP_TABLE + " (tasktype			" + szStringColumnType + ", event				" + szStringColumnType + ",rulename					" + szStringColumnType + ",parm	" + szStringColumnType + ",value 				" + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after WebServiceMessageMap table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating WebServiceMessageMap Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gawebservicemessages Table Creation
//Added TABLE WEB_SERVICE_MESSAGES_TABLE  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGES_TABLE + " (message " + szStringColumnType + ", partname" + szStringColumnType + ", type	" + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGES_TABLE + " (message			" + szStringColumnType + ", partname					" + szStringColumnType + ", type " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_MESSAGES_TABLE + " (message			" + szStringColumnType + ", partname					" + szStringColumnType + ", type " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after WebServiceMessages table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating WebServiceMessages Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gawebserviceoperations Table Creation
//Added TABLE WEB_SERVICE_OPERATIONS_TABLE  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.WEB_SERVICE_OPERATIONS_TABLE + " (servicename " + szStringColumnType + ", operation" + szStringColumnType + ", input	" + szStringColumnType + ", output	" + szStringColumnType + " )");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_OPERATIONS_TABLE + " (servicename		" + szStringColumnType + ", operation					" + szStringColumnType + ", input " + szStringColumnType + ", output	" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.WEB_SERVICE_OPERATIONS_TABLE + " (servicename		" + szStringColumnType + ", operation					" + szStringColumnType + ", input " + szStringColumnType + ", output	" + szStringColumnType + " )");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after WebServiceOperations table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating WebServiceOperations Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gasla Table Creation
//Added TABLE SLA_TABLE  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.SLA_TABLE + " (task_type   " + szStringColumnType + "   NOT NULL, attribute1  " + szStringColumnType + "    NOT NULL, attribute2				   " + szStringColumnType + ", attribute3	" + szStringColumnType + ", attribute4		   " + szStringColumnType + ", attribute5	" + szStringColumnType + ", attribute6		  " + szStringColumnType + ", attribute7	" + szStringColumnType + ", attribute8		  " + szStringColumnType + ", attribute9	" + szStringColumnType + ", attribute10	  " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_TABLE + " (task_type " + szStringColumnType + "  NOT NULL,  attribute1  " + szStringColumnType + "  NOT NULL, attribute2	" + szStringColumnType + ", attribute3	" + szStringColumnType + ", attribute4	" + szStringColumnType + ", attribute5	" + szStringColumnType + ", attribute6	" + szStringColumnType + ", attribute7	" + szStringColumnType + ", attribute8	" + szStringColumnType + ", attribute9" + szStringColumnType + ", attribute10	" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_TABLE + " (task_type					" + szStringColumnType + " NOT NULL, attribute1				" + szStringColumnType + " NOT NULL, attribute2		" + szStringColumnType + ", attribute3	" + szStringColumnType + ", attribute4	" + szStringColumnType + ", attribute5	" + szStringColumnType + ", attribute6	" + szStringColumnType + ", attribute7	" + szStringColumnType + ", attribute8	" + szStringColumnType + ", attribute9	" + szStringColumnType + ", attribute10	" + szStringColumnType + " ) ");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after SLA table creation ");
                        } catch (Exception sqle)
                        {
                            sqle.printStackTrace();
                            System.out.println(" EXCEPTION : Creating SLA Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gasparescatalog Table Creation
//Added TABLE SPARES_CATALOG_TABLE  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.SPARES_CATALOG_TABLE + " (partno " + szStringColumnType + ", description" + szStringColumnType + ", rate	" + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SPARES_CATALOG_TABLE + " (partno			" + szStringColumnType + ",  description					" + szStringColumnType + ",  rate " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SPARES_CATALOG_TABLE + " (partno			" + szStringColumnType + ", description					" + szStringColumnType + ", rate " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after SparesCatalog table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating SparesCatalog Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gaparenttasktype Table Creation
//Added TABLE PARENT_TASK_TYPE_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.PARENT_TASK_TYPE_TABLE + " (task_type  " + szStringColumnType + ", parent_task_type " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PARENT_TASK_TYPE_TABLE + " (task_type			 " + szStringColumnType + ",  parent_task_type	 				" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PARENT_TASK_TYPE_TABLE + " (task_type		  	" + szStringColumnType + ",  parent_task_type					" + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after ParentTaskType table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating ParentTaskType Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gaslaattributestatus Table Creation
//Added TABLE SLA_ATTRIBUTE_STATUS_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.SLA_ATTRIBUTE_STATUS_TABLE + " (task_type  " + szStringColumnType + " NOT NULL, attribute" + szStringColumnType + " NOT NULL,status" + szStringColumnType + " NOT NULL )");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_ATTRIBUTE_STATUS_TABLE + " (task_type 		 	" + szStringColumnType + " NOT NULL , attribute 					" + szStringColumnType + " NOT NULL , status	 			" + szStringColumnType + " NOT NULL) IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_ATTRIBUTE_STATUS_TABLE + " (task_type	 		" + szStringColumnType + " NOT NULL , attribute 					" + szStringColumnType + " NOT NULL, status	 			" + szStringColumnType + " NOT NULL)");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after SlaAttributeStatus table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating SlaAttributeStatus Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gatasktableexpressionconfig Table Creation
//Added TABLE TASK_TABLE_EXPRESSION_CONFIG_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.TASK_TABLE_EXPRESSION_CONFIG_TABLE + " (tasktype " + szStringColumnType + ",tablename " + szStringColumnType + ",rowdesc " + szStringColumnType + ",rowexp " + szStringColumnType + " )");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE_EXPRESSION_CONFIG_TABLE + " (tasktype	" + szStringColumnType + ",  tablename	" + szStringColumnType + ", rowdesc	" + szStringColumnType + ", rowexp " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE_EXPRESSION_CONFIG_TABLE + " (tasktype 	" + szStringColumnType + ", tablename	 " + szStringColumnType + ", rowdesc 	" + szStringColumnType + ", rowexp  " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after TaskTableExpressionConfig table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating TaskTableExpressionConfig Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gatasktypeactionpolicy Table Creation
//Added TABLE TASK_TYPE_ACTION_POLICY_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.TASK_TYPE_ACTION_POLICY_TABLE + " (tasktype " + szStringColumnType + ",actionname " + szStringColumnType + ",action " + szStringColumnType + ",groupname " + szStringColumnType + ",securitylevel  " + szStringColumnType + ",param1  " + szStringColumnType + ",param2   " + szStringColumnType + ",param3 " + szStringColumnType + ",param4 " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_ACTION_POLICY_TABLE + " (tasktype	" + szStringColumnType + ", actionname	" + szStringColumnType + ", action	" + szStringColumnType + ", groupname " + szStringColumnType + " , securitylevel " + szStringColumnType + ", param1 " + szStringColumnType + ", param2 " + szStringColumnType + ", param3 " + szStringColumnType + ",param4 " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_ACTION_POLICY_TABLE + " (tasktype 	" + szStringColumnType + ", actionname " + szStringColumnType + ", action 	" + szStringColumnType + ", groupname  " + szStringColumnType + " , securitylevel  " + szStringColumnType + ", param1  " + szStringColumnType + ",  param2 " + szStringColumnType + ", param3  " + szStringColumnType + ", param4 " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after TaskTypeActionPolicy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating TaskTypeActionPolicy Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gatasktypeattributevalueconfig Table Creation
//Added TABLE TASK_TYPE_ATTRIBUTE_VALUE_CONFIG_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.TASK_TYPE_ATTRIBUTE_VALUE_CONFIG_TABLE + " (tasktype	" + szStringColumnType + ", attribute " + szStringColumnType + ", linktable			" + szStringColumnType + ", linkcolumn " + szStringColumnType + ",    conditioncolumn " + szStringColumnType + ", conditionoperation  " + szStringColumnType + ", conditionvalue " + szStringColumnType + ", conditionvaluetype 				" + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_ATTRIBUTE_VALUE_CONFIG_TABLE + "  (tasktype	" + szStringColumnType + ", attribute " + szStringColumnType + ",  linktable	 " + szStringColumnType + ", linkcolumn " + szStringColumnType + ",  conditioncolumn  " + szStringColumnType + " ,  conditionoperation " + szStringColumnType + ", conditionvalue  " + szStringColumnType + ", conditionvaluetype " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_ATTRIBUTE_VALUE_CONFIG_TABLE + " (tasktype 	" + szStringColumnType + ", attribute " + szStringColumnType + ",   linktable	" + szStringColumnType + ",  linkcolumn " + szStringColumnType + ",  conditioncolumn " + szStringColumnType + " ,  conditionoperation " + szStringColumnType + ",   conditionvalue " + szStringColumnType + ",  conditionvaluetype " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after TaskTypeAttributeValueConfig table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating TaskTypeAttributeValueConfig Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gatasktypetableattributevalueconfig Table Creation
//Added TABLE TASK_TYPE_TABLE_ATTRIBUTE_VALUE_CONFIG_TABLE  3/21/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.TASK_TYPE_TABLE_ATTRIBUTE_VALUE_CONFIG_TABLE + " (tasktype	" + szStringColumnType + ", taskattribute " + szStringColumnType + ", tableattribute " + szStringColumnType + ", linktable			" + szStringColumnType + ",linkcolumn  " + szStringColumnType + ", conditioncolumn " + szStringColumnType + ", conditionoperation " + szStringColumnType + ", conditionvalue " + szStringColumnType + ", conditionvaluetype				" + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_TABLE_ATTRIBUTE_VALUE_CONFIG_TABLE + "  (tasktype	" + szStringColumnType + ", taskattribute  " + szStringColumnType + " , tableattribute " + szStringColumnType + ", linktable			 " + szStringColumnType + ", linkcolumn  " + szStringColumnType + ", conditioncolumn  " + szStringColumnType + " ,  conditionoperation  " + szStringColumnType + ", conditionvalue  " + szStringColumnType + ", conditionvaluetype " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TYPE_TABLE_ATTRIBUTE_VALUE_CONFIG_TABLE + " (tasktype	" + szStringColumnType + " , taskattribute  " + szStringColumnType + " , tableattribute " + szStringColumnType + " , linktable			 " + szStringColumnType + ", linkcolumn  " + szStringColumnType + " , conditioncolumn  " + szStringColumnType + " ,  conditionoperation  " + szStringColumnType + " , conditionvalue  " + szStringColumnType + ", conditionvaluetype " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after TaskTypeTableAttributeValueConfig table creation ");
                        } catch (Exception sqle)
                        {
                            //	sqle.printStackTrace();
                            System.out.println(" EXCEPTION : Creating TaskTypeTableAttributeValueConfig Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
//------------------------------------------------------------------------
// This is gauserreports Table Creation
//Added TABLE USER_REPORTS_TABLE  3/20/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.USER_REPORTS_TABLE + " (user_id  	" + szStringColumnType + ",  reportname " + szStringColumnType + ", query  " + szStringColumnType + ",  columns" + szStringColumnType + ", columnswidth " + szStringColumnType + " , getruntime	" + szStringColumnType + " , description " + szStringColumnType + ")");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_REPORTS_TABLE + " (user_id " + szStringColumnType + ",   reportname " + szStringColumnType + ", query " + szStringColumnType + ", columns 	" + szStringColumnType + ", columnswidth " + szStringColumnType + ",   getruntime " + szStringColumnType + " , description  " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_REPORTS_TABLE + " ( user_id " + szStringColumnType + ", reportname " + szStringColumnType + ", query  " + szStringColumnType + ", columns " + szStringColumnType + ",   columnswidth " + szStringColumnType + ",   getruntime 	" + szStringColumnType + " ,   description  " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after UserReports table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating UserReports Table ");
                            System.out.println(" statement " + statement);
                        //sqle.printStackTrace();
                        }
//------------------------------------------------------------------------

// This is GAOperator Table Creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.OPERATOR_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL, password " + szMediumStringColumnType + ", security_level " + szMediumStringColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ",customer " + szMediumStringColumnType + ", mobile " + szMediumStringColumnType + ",passwordtime " + szTimeStampColumnType + ",passwordlock " + szMediumStringColumnType + ",PRIMARY KEY(user_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OPERATOR_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,password " + szMediumStringColumnType + ",security_level " + szMediumStringColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ",customer " + szMediumStringColumnType + ", mobile " + szMediumStringColumnType + ",passwordtime " + szTimeStampColumnType + ",passwordlock " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OPERATOR_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL,password " + szMediumStringColumnType + ",security_level " + szMediumStringColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ",customer " + szMediumStringColumnType + ", mobile " + szMediumStringColumnType + ",passwordtime " + szTimeStampColumnType + ",passwordlock " + szMediumStringColumnType + ",PRIMARY KEY(user_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" AT OPERATOR TABLE CREATION .....");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating operator table " + "");
                            System.out.println(" statement " + statement);
                            System.err.println(sqle.getMessage());

                        }

// This is GAUser Table Creation

                        try
                        {
//				statement = con.prepareStatement("CREATE TABLE "+DBConstants.USER_TABLE+" (user_id "+szMediumStringColumnType+" NOT NULL,password "+szMediumStringColumnType+",user_name "+szMediumStringColumnType+",user_email "+szMediumStringColumnType+","+"customer "+szMediumStringColumnType+",email2 "+szMediumStringColumnType+",address "+szTextColumnType+",city "+szMediumStringColumnType+",zipcode "+szMediumStringColumnType+",state "+szMediumStringColumnType+", country "+szMediumStringColumnType+", phone "+szMediumStringColumnType+",fax "+szMediumStringColumnType+",allowchat "+szMediumStringColumnType+",allowdiscussion "+szMediumStringColumnType+",attribute1 "+szMediumStringColumnType+",attribute2 "+szMediumStringColumnType+",attribute3 "+szMediumStringColumnType+","+"attribute4 "+szMediumStringColumnType+",attribute5 "+szMediumStringColumnType+",attribute6 "+szMediumStringColumnType+",attribute7 "+szMediumStringColumnType+",attribute8 "+szMediumStringColumnType+",attribute9 "+szMediumStringColumnType+",attribute10 "+szMediumStringColumnType+",attribute11 "+szMediumStringColumnType+","+"attribute12 "+szMediumStringColumnType+",attribute13 "+szMediumStringColumnType+",attribute14 "+szMediumStringColumnType+",attribute15 "+szMediumStringColumnType+",attribute16 "+szMediumStringColumnType+",attribute17 "+szMediumStringColumnType+",attribute18 "+szMediumStringColumnType+",attribute19 "+szMediumStringColumnType+","+"attribute20 "+szMediumStringColumnType+",attribute21 "+szMediumStringColumnType+",attribute22 "+szMediumStringColumnType+",attribute23 "+szMediumStringColumnType+",attribute24 "+szMediumStringColumnType+",attribute25 "+szMediumStringColumnType+",security_level "+szMediumStringColumnType+",mobilenum "+szMediumStringColumnType+"," +"PRIMARY KEY(user_id))");

                            System.out.println("CREATE TABLE " + DBConstants.USER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL,password " + szMediumStringColumnType + ",user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + ",fax " + szMediumStringColumnType + ",allowchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",attribute1 " + szMediumStringColumnType + ",attribute2 " + szMediumStringColumnType + ",attribute3 " + szMediumStringColumnType + "," + "attribute4 " + szMediumStringColumnType + ",attribute5 " + szMediumStringColumnType + ",attribute6 " + szMediumStringColumnType + ",attribute7 " + szMediumStringColumnType + ",attribute8 " + szMediumStringColumnType + ",attribute9 " + szMediumStringColumnType + ",attribute10 " + szMediumStringColumnType + ",attribute11 " + szMediumStringColumnType + "," + "attribute12 " + szMediumStringColumnType + ",attribute13 " + szMediumStringColumnType + ",attribute14 " + szMediumStringColumnType + ",attribute15 " + szMediumStringColumnType + ",attribute16 " + szMediumStringColumnType + ",attribute17 " + szMediumStringColumnType + ",attribute18 " + szMediumStringColumnType + ",attribute19 " + szMediumStringColumnType + "," + "attribute20 " + szMediumStringColumnType + ",attribute21 " + szMediumStringColumnType + ",attribute22 " + szMediumStringColumnType + ",attribute23 " + szMediumStringColumnType + ",attribute24 " + szMediumStringColumnType + ",attribute25 " + szMediumStringColumnType + ",security_level " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + "," + "PRIMARY KEY(user_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,password " + szMediumStringColumnType + ",user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + ",customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + ",fax " + szMediumStringColumnType + ",allowchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",attribute1 " + sz80StringColumnType + ",attribute2 " + sz80StringColumnType + ",attribute3 " + sz80StringColumnType + "," + "attribute4 " + sz80StringColumnType + ",attribute5 " + sz80StringColumnType + ",attribute6 " + sz80StringColumnType + ",attribute7 " + sz80StringColumnType + ",attribute8 " + sz80StringColumnType + ",attribute9 " + sz80StringColumnType + ",attribute10 " + sz80StringColumnType + ",attribute11 " + sz80StringColumnType + "," + "attribute12 " + sz80StringColumnType + ",attribute13 " + sz80StringColumnType + ",attribute14 " + sz80StringColumnType + ",attribute15 " + sz80StringColumnType + ",attribute16 " + sz80StringColumnType + ",attribute17 " + sz80StringColumnType + ",attribute18 " + sz80StringColumnType + ",attribute19 " + sz80StringColumnType + ",attribute20 " + sz80StringColumnType + ",attribute21 " + sz80StringColumnType + ",attribute22 " + sz80StringColumnType + ",attribute23 " + sz80StringColumnType + ",attribute24 " + sz80StringColumnType + ",attribute25 " + sz80StringColumnType + ",security_level " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL,password " + szMediumStringColumnType + ",user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + ",fax " + szMediumStringColumnType + ",allowchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",attribute1 " + szMediumStringColumnType + ",attribute2 " + szMediumStringColumnType + ",attribute3 " + szMediumStringColumnType + "," + "attribute4 " + szMediumStringColumnType + ",attribute5 " + szMediumStringColumnType + ",attribute6 " + szMediumStringColumnType + ",attribute7 " + szMediumStringColumnType + ",attribute8 " + szMediumStringColumnType + ",attribute9 " + szMediumStringColumnType + ",attribute10 " + szMediumStringColumnType + ",attribute11 " + szMediumStringColumnType + "," + "attribute12 " + szMediumStringColumnType + ",attribute13 " + szMediumStringColumnType + ",attribute14 " + szMediumStringColumnType + ",attribute15 " + szMediumStringColumnType + ",attribute16 " + szMediumStringColumnType + ",attribute17 " + szMediumStringColumnType + ",attribute18 " + szMediumStringColumnType + ",attribute19 " + szMediumStringColumnType + "," + "attribute20 " + szMediumStringColumnType + ",attribute21 " + szMediumStringColumnType + ",attribute22 " + szMediumStringColumnType + ",attribute23 " + szMediumStringColumnType + ",attribute24 " + szMediumStringColumnType + ",attribute25 " + szMediumStringColumnType + ",security_level " + szMediumStringColumnType + ",mobilenum " + szMediumStringColumnType + ",designation " + szMediumStringColumnType + "," + "PRIMARY KEY(user_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after user table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the User Table " + sqle.getMessage());
                        }

// This is GAAutouser table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.AUTOUSER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL,password " + szMediumStringColumnType + ",security_level " + szIntegerColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "manager " + szMediumStringColumnType + ",customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ", allowpublicchat " + szMediumStringColumnType + ",allowoperatorchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ",PRIMARY KEY(user_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.AUTOUSER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,password " + szMediumStringColumnType + ",security_level " + szIntegerColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "manager " + szMediumStringColumnType + ",customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ", allowpublicchat " + szMediumStringColumnType + ",allowoperatorchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.AUTOUSER_TABLE + " (user_id " + szMediumStringColumnType + " NOT NULL,password " + szMediumStringColumnType + ",security_level " + szIntegerColumnType + ", user_name " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + "," + "manager " + szMediumStringColumnType + ",customer " + szMediumStringColumnType + ",email2 " + szMediumStringColumnType + ",address " + szTextColumnType + ",city " + szMediumStringColumnType + ",zipcode " + szMediumStringColumnType + ",state " + szMediumStringColumnType + ", country " + szMediumStringColumnType + ", phone " + szMediumStringColumnType + "," + "fax " + szMediumStringColumnType + ", allowpublicchat " + szMediumStringColumnType + ",allowoperatorchat " + szMediumStringColumnType + ",allowdiscussion " + szMediumStringColumnType + ",opentasks " + szIntegerColumnType + ",PRIMARY KEY(user_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after TEMP AUTOMATIC user table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the Temp AutoUser Table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GATasktype table Creation
                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.TASKTYPE_TABLE + " (task_type " + szMediumStringColumnType + " NOT NULL,default_assignee " + szMediumStringColumnType + ",no_of_attributes " + szIntegerColumnType + ",escalated_email " + szMediumStringColumnType + ",task_prefix " + szMediumStringColumnType + ",serial_no " + szIntegerColumnType + ",mailbox_address " + szMediumStringColumnType + ", pop_server_address " + szMediumStringColumnType + ",pop_mailbox_name " + szMediumStringColumnType + ",pop_password " + szMediumStringColumnType + ",assignment_type " + szMediumStringColumnType + ",rr_seq " + szIntegerColumnType + ",nousers " + szIntegerColumnType + ",contact_details " + szLongStringColumnType + ",tasksummary " + szStringColumnType + ",PRIMARY KEY (task_type))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_TABLE + " (task_type " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,default_assignee " + szMediumStringColumnType + ",no_of_attributes " + szIntegerColumnType + ",escalated_email " + szMediumStringColumnType + ",task_prefix " + szMediumStringColumnType + ",serial_no " + szIntegerColumnType + ",mailbox_address " + szMediumStringColumnType + ", pop_server_address " + szMediumStringColumnType + ",pop_mailbox_name " + szMediumStringColumnType + ",pop_password " + szMediumStringColumnType + ",assignment_type " + szMediumStringColumnType + ",rr_seq " + szIntegerColumnType + ",nousers " + szIntegerColumnType + ",contact_details " + szLongStringColumnType + ",tasksummary " + szStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_TABLE + " (task_type " + szMediumStringColumnType + " NOT NULL,default_assignee " + szMediumStringColumnType + ",no_of_attributes " + szIntegerColumnType + ",escalated_email " + szMediumStringColumnType + ",task_prefix " + szMediumStringColumnType + ",serial_no " + szIntegerColumnType + ",mailbox_address " + szMediumStringColumnType + ", pop_server_address " + szMediumStringColumnType + ",pop_mailbox_name " + szMediumStringColumnType + ",pop_password " + szMediumStringColumnType + ",assignment_type " + szMediumStringColumnType + ",rr_seq " + szIntegerColumnType + ",nousers " + szIntegerColumnType + ",contact_details " + szLongStringColumnType + ",tasksummary " + szStringColumnType + ",PRIMARY KEY (task_type))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after tasktype table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the tasktype Table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GAStatus table creation
// Additional Comments by Prasad P : Threshold value implementation done on 4-Dec-2003, after the discussion with Mr.Ram about the new feature in ActionVector2.1, Here the higherthreshold and lowerthreshold is fixed depending on the Admin configurations while the currentvalue keeps changing reflecting the tasks in the engine with different status.
                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.STATUS_TABLE + " (statusid " + szMediumStringColumnType + " NOT NULL, task_type " + szMediumStringColumnType + " ,status " + szMediumStringColumnType + ",description " + szMediumStringColumnType + "," + "default_on_create " + szIntegerColumnType + ",default_on_close " + szIntegerColumnType + ",higherthreshold " + szIntegerColumnType + ",lowerthreshold " + szIntegerColumnType + ",currentvalue " + szIntegerColumnType + ",percentage_complete " + sz80StringColumnType + ", considerforsla " + szIntegerColumnType + ", feedback " + szIntegerColumnType + ", checklist " + szIntegerColumnType + ", PRIMARY KEY (statusid))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_TABLE + " (statusid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, task_type " + szMediumStringColumnType + " ,status " + szMediumStringColumnType + ",description " + szMediumStringColumnType + "," + "default_on_create " + szIntegerColumnType + ",default_on_close " + szIntegerColumnType + ",higherthreshold " + szIntegerColumnType + ",lowerthreshold " + szIntegerColumnType + ",currentvalue " + szIntegerColumnType + ",percentage_complete " + sz80StringColumnType + ",considerforsla " + szIntegerColumnType + ",feedback " + szIntegerColumnType + ",checklist " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_TABLE + " (statusid " + szMediumStringColumnType + " NOT NULL, task_type " + szMediumStringColumnType + " ,status " + szMediumStringColumnType + ",description " + szMediumStringColumnType + "," + "default_on_create " + szIntegerColumnType + ",default_on_close " + szIntegerColumnType + ",higherthreshold " + szIntegerColumnType + ",lowerthreshold " + szIntegerColumnType + ",currentvalue " + szIntegerColumnType + ",percentage_complete " + sz80StringColumnType + ",considerforsla " + szIntegerColumnType + ",feedback " + szIntegerColumnType + ",checklist " + szIntegerColumnType + ", PRIMARY KEY (statusid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after status table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the status Table ");
                            System.err.println(sqle.getMessage());
                        }
// This is GAPriority table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.PRIORITY_TABLE + " (priorityid " + szMediumStringColumnType + ", task_type " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",default_priority " + szIntegerColumnType + ",displaycolor " + szMediumStringColumnType + ",forstatus " + szMediumStringColumnType + ",forcategory " + szMediumStringColumnType + ",summarykeywords " + szMediumStringColumnType + ", PRIMARY KEY (priorityid))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRIORITY_TABLE + " (priorityid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, task_type " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",default_priority " + szIntegerColumnType + ",displaycolor " + szMediumStringColumnType + ",forstatus " + szMediumStringColumnType + ",forcategory " + szMediumStringColumnType + ",summarykeywords " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRIORITY_TABLE + " (priorityid " + szMediumStringColumnType + ", task_type " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",default_priority " + szIntegerColumnType + ",displaycolor " + szMediumStringColumnType + ",forstatus " + szMediumStringColumnType + ",forcategory " + szMediumStringColumnType + ",summarykeywords " + szMediumStringColumnType + ", PRIMARY KEY (priorityid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after priority table creation ");

                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the Priority Table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GAUserstatistics table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.USER_STATISTICS_TABLE + " (session_id " + szMediumStringColumnType + " ,user_id " + szMediumStringColumnType + "," + "action_time " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_STATISTICS_TABLE + " (session_id " + szMediumStringColumnType + " ,user_id " + szMediumStringColumnType + "," + "action_time " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after GAUserstatistics table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserstatistics Table ");
                            System.err.println(sqle.getMessage());
                        }
// This is GAChatstatistics table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.CHAT_STATISTICS_TABLE + " (sessionid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",opercheck " + szMediumStringColumnType + ",loadcount " + szIntegerColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.CHAT_STATISTICS_TABLE + " (sessionid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",opercheck " + szMediumStringColumnType + ",loadcount " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after GAChatstatistics table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GACHATStatistics Table ");
                            System.err.println(sqle.getMessage());
                        }

//this is gastatusassignment table
                        try
                        {
                            System.out.println("CREATE TABLE "+ DBConstants.STATUS_ASSIGNMENT_TABLE+" (status " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",assignetype " + szMediumStringColumnType + ",assignee " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE "+ DBConstants.STATUS_ASSIGNMENT_TABLE+" (status " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",assignetype " + szMediumStringColumnType + ",assignee " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",assign_within_reporting_hierarchy" + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after GAStatusassignment table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAStatusassignment Table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GALanguage table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.LANGUAGE_TABLE + " (orgmessage " + szLongStringColumnType + " NOT NULL,description " + szLongStringColumnType + " NOT NULL,transmessage " + szLongStringColumnType + " NOT NULL) ");

                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {

                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.LANGUAGE_TABLE + " (orgmessage " + szLongStringColumnType + " NOT NULL,description " + szLongStringColumnType + " NOT NULL,transmessage " + szLongStringColumnType + " NOT NULL) IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.LANGUAGE_TABLE + " (orgmessage " + szLongStringColumnType + " NOT NULL,description " + szLongStringColumnType + " NOT NULL,transmessage " + szLongStringColumnType + " NOT NULL) ");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after GALanguage table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GALanguage Table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GAExternaltablelink table creation
//------------------------------------------------------------------------
// This is GAAction Table Creation
//Added TABLE GAACTION  3/19/2008 -- SUSMITA

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.ACTIONS_TABLE + " (actionid " + szStringColumnType + " NOT NULL, task_type " + szStringColumnType + ", action                                        " + szStringColumnType + ", default_action				" + szIntegerColumnType + ", comment_accept " + szStringColumnType + ")");

                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ACTIONS_TABLE + " (actionid	 				" + szStringColumnType + "  NOT NULL, task_type " + szStringColumnType + ",  action " + szStringColumnType + ", default_action	" + szIntegerColumnType + ",  comment_accept  " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ACTIONS_TABLE + " (actionid	 				" + szStringColumnType + "  NOT NULL, task_type  " + szStringColumnType + ", action " + szStringColumnType + ",  default_action	" + szIntegerColumnType + ",  comment_accept 	" + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after Actions table creation ");
                        } catch (Exception sqle)
                        {
                            //	sqle.printStackTrace();
                            System.out.println(" EXCEPTION : Creating Actions Table ");
                            System.out.println(" statement " + statement);

                        }
//------------------------------------------------------------------------
                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " (externaltablevalue " + szMediumStringColumnType + " NOT NULL,externaltableflag " + szMediumStringColumnType + ",driver " + szMediumStringColumnType + ",datasource " + szMediumStringColumnType + ",databaseuser " + szMediumStringColumnType + ",databasepassword " + szMediumStringColumnType + ",tablename " + szMediumStringColumnType + ",user_id " + szMediumStringColumnType + ",password " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + ",user_customer " + szMediumStringColumnType + ",user_security " + szMediumStringColumnType + ",user_phone " + szMediumStringColumnType + ",user_mobilenum " + szMediumStringColumnType + ",user_value1 " + szMediumStringColumnType + ",user_value2 " + szMediumStringColumnType + ",user_value3 " + szMediumStringColumnType + ",customer_name " + szMediumStringColumnType + ",customer_email " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",customer_phone " + szMediumStringColumnType + ",customer_value1 " + szMediumStringColumnType + ",customer_value2 " + szMediumStringColumnType + ", PRIMARY KEY (externaltablevalue))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " (externaltablevalue " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,externaltableflag " + szMediumStringColumnType + ",driver " + szMediumStringColumnType + ",datasource " + szMediumStringColumnType + ",databaseuser " + szMediumStringColumnType + ",databasepassword " + szMediumStringColumnType + ",tablename " + szMediumStringColumnType + ",user_id " + szMediumStringColumnType + ",password " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + ",user_customer " + szMediumStringColumnType + ",user_security " + szMediumStringColumnType + ",user_phone " + szMediumStringColumnType + ",user_mobilenum " + szMediumStringColumnType + ",user_value1 " + szMediumStringColumnType + ",user_value2 " + szMediumStringColumnType + ",user_value3 " + szMediumStringColumnType + ",customer_name " + szMediumStringColumnType + ",customer_email " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",customer_phone " + szMediumStringColumnType + ",customer_value1 " + szMediumStringColumnType + ",customer_value2 " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " (externaltablevalue " + szMediumStringColumnType + " NOT NULL,externaltableflag " + szMediumStringColumnType + ",driver " + szMediumStringColumnType + ",datasource " + szMediumStringColumnType + ",databaseuser " + szMediumStringColumnType + ",databasepassword " + szMediumStringColumnType + ",tablename " + szMediumStringColumnType + ",user_id " + szMediumStringColumnType + ",password " + szMediumStringColumnType + ",user_email " + szMediumStringColumnType + ",user_customer " + szMediumStringColumnType + ",user_security " + szMediumStringColumnType + ",user_phone " + szMediumStringColumnType + ",user_mobilenum " + szMediumStringColumnType + ",user_value1 " + szMediumStringColumnType + ",user_value2 " + szMediumStringColumnType + ",user_value3 " + szMediumStringColumnType + ",customer_name " + szMediumStringColumnType + ",customer_email " + szMediumStringColumnType + ",customer_prefix " + szMediumStringColumnType + ",customer_phone " + szMediumStringColumnType + ",customer_value1 " + szMediumStringColumnType + ",customer_value2 " + szMediumStringColumnType + ", PRIMARY KEY (externaltablevalue))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after EXTERNALTABLELINK table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAExternaltablelink Table ");
                            System.err.println(sqle.getMessage());
                        }
// This is GAExternaltablelink insertion
                        try
                        {
                            System.out.println("INSERT INTO " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " VALUES ('usertable','No','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None')");
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " VALUES ('usertable','No','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None')");
                            statement.executeUpdate();
                            System.out.println(" this is after Externaltablelink insertion for usertable ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : inserting values into gaexternaltablelink for usertable ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            System.out.println("INSERT INTO " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " VALUES ('customertable','No','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None')");
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.EXTERNAL_TABLE_LINK_TABLE + " VALUES ('customertable','No','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None','None')");
                            statement.executeUpdate();
                            System.out.println(" This is after externaltablelink insertion for customertable");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : inserting values into GAExternaltablelink for customer table ");
                            System.err.println(sqle.getMessage());
                        }

// This is GAAssignmentpref table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.ASSIGNMENT_PREF_TABLE + " (prefname " + szMediumStringColumnType + " NOT NULL,prefnum " + szIntegerColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ASSIGNMENT_PREF_TABLE + " (prefname " + szMediumStringColumnType + " NOT NULL,prefnum " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAAssignmentpref table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAAssignmentpref Table ");
                            System.err.println(sqle.getMessage());
                        }


                        // This is GAOpassign table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.OP_ASSIGN_TABLE + " (opid " + szMediumStringColumnType + " NOT NULL,opname " + szMediumStringColumnType + " NOT NULL,preffield " + szMediumStringColumnType + " NOT NULL,prefvalue " + szMediumStringColumnType + " NOT NULL,PRIMARY KEY(opid))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OP_ASSIGN_TABLE + " (opid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,opname " + szMediumStringColumnType + " NOT NULL,preffield " + szMediumStringColumnType + " NOT NULL,prefvalue " + szMediumStringColumnType + " NOT NULL)");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OP_ASSIGN_TABLE + " (opid " + szMediumStringColumnType + " NOT NULL,opname " + szMediumStringColumnType + " NOT NULL,preffield " + szMediumStringColumnType + " NOT NULL,prefvalue " + szMediumStringColumnType + " NOT NULL,PRIMARY KEY(opid))");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after GAOpassign table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAOpAssign Table ");
                            System.err.println(sqle.getMessage());
                        }


                        // This is GATask table Creation

                        try
                        {
                            System.out.println("");
//				statement = con.prepareStatement("CREATE TABLE "+DBConstants.TASK_TABLE+" (task_id "+szMediumStringColumnType+" NOT NULL,task_type "+szMediumStringColumnType+",created_by "+szMediumStringColumnType+",priority "+szMediumStringColumnType+",status "+szMediumStringColumnType+","+"task_summary "+szMediumStringColumnType+",attributes1 "+szTextColumnType+",attributes2 "+szTextColumnType+",attributes3 "+szTextColumnType+",attributes4 "+szTextColumnType+","+"attributes5 "+szTextColumnType+",attributes6 "+szTextColumnType+",attributes7 "+szTextColumnType+",attributes8 "+szTextColumnType+",attributes9 "+szTextColumnType+",attributes10 "+szTextColumnType+","+"attributes11 "+szTextColumnType+",attributes12 "+szTextColumnType+",attributes13 "+szTextColumnType+",attributes14 "+szTextColumnType+",attributes15 "+szTextColumnType+",attributes16 "+szTextColumnType+","+"attributes17 "+szTextColumnType+",attributes18 "+szTextColumnType+",attributes19 "+szTextColumnType+",attributes20 "+szTextColumnType+",attributes21 "+szTextColumnType+",attributes22 "+szTextColumnType+","+"attributes23 "+szTextColumnType+",attributes24 "+szTextColumnType+",attributes25 "+szTextColumnType+",attributes26 "+szTextColumnType+",attributes27 "+szTextColumnType+",attributes28 "+szTextColumnType+","+"attributes29 "+szTextColumnType+",attributes30 "+szTextColumnType+",escalated "+szMediumStringColumnType+",viewable_by_public "+szIntegerColumnType+","+"created_date "+szTimeStampColumnType+",lastupdated_date "+szTimeStampColumnType+",category "+szMediumStringColumnType+",customerid "+szMediumStringColumnType+",userid "+szMediumStringColumnType+",sla "+szMediumStringColumnType+",open_status "+szIntegerColumnType+",status_set_time "+szTimeStampColumnType+",PRIMARY KEY (task_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE + " (task_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + "," + "attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + "," + "attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + "," + "attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + "," + "attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + "," + "attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + "," + "created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ", actions  " + szStringColumnType + ",lastaction " + szStringColumnType + ", slahistory " + szStringColumnType + ", notprocesstime " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE + " (task_id " + szMediumStringColumnType + " NOT NULL,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + "," + "attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + "," + "attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + "," + "attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + "," + "attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + "," + "attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + "," + "created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ", actions  " + szStringColumnType + ",lastaction " + szStringColumnType + ", slahistory " + szStringColumnType + ", notprocesstime " + szStringColumnType + ",PRIMARY KEY (task_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after GAtask table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATask Table ");
                            System.err.println(sqle.getMessage());
                        }


                        try
                        {
                            System.out.println("");
//				statement = con.prepareStatement("CREATE TABLE "+DBConstants.TASK_TABLE+" (task_id "+szMediumStringColumnType+" NOT NULL,task_type "+szMediumStringColumnType+",created_by "+szMediumStringColumnType+",priority "+szMediumStringColumnType+",status "+szMediumStringColumnType+","+"task_summary "+szMediumStringColumnType+",attributes1 "+szTextColumnType+",attributes2 "+szTextColumnType+",attributes3 "+szTextColumnType+",attributes4 "+szTextColumnType+","+"attributes5 "+szTextColumnType+",attributes6 "+szTextColumnType+",attributes7 "+szTextColumnType+",attributes8 "+szTextColumnType+",attributes9 "+szTextColumnType+",attributes10 "+szTextColumnType+","+"attributes11 "+szTextColumnType+",attributes12 "+szTextColumnType+",attributes13 "+szTextColumnType+",attributes14 "+szTextColumnType+",attributes15 "+szTextColumnType+",attributes16 "+szTextColumnType+","+"attributes17 "+szTextColumnType+",attributes18 "+szTextColumnType+",attributes19 "+szTextColumnType+",attributes20 "+szTextColumnType+",attributes21 "+szTextColumnType+",attributes22 "+szTextColumnType+","+"attributes23 "+szTextColumnType+",attributes24 "+szTextColumnType+",attributes25 "+szTextColumnType+",attributes26 "+szTextColumnType+",attributes27 "+szTextColumnType+",attributes28 "+szTextColumnType+","+"attributes29 "+szTextColumnType+",attributes30 "+szTextColumnType+",escalated "+szMediumStringColumnType+",viewable_by_public "+szIntegerColumnType+","+"created_date "+szTimeStampColumnType+",lastupdated_date "+szTimeStampColumnType+",category "+szMediumStringColumnType+",customerid "+szMediumStringColumnType+",userid "+szMediumStringColumnType+",sla "+szMediumStringColumnType+",open_status "+szIntegerColumnType+",status_set_time "+szTimeStampColumnType+",PRIMARY KEY (task_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE garecurringtask (task_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + "," + "attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + "," + "attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + "," + "attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + "," + "attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + "," + "attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + "," + "created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ", actions  " + szStringColumnType + ",lastaction " + szStringColumnType + ", slahistory " + szStringColumnType + ", notprocesstime " + szStringColumnType + ", freq " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE garecurringtask (task_id " + szMediumStringColumnType + " NOT NULL,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + "," + "attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + "," + "attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + "," + "attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + "," + "attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + "," + "attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + "," + "created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ", actions  " + szStringColumnType + ",lastaction " + szStringColumnType + ", slahistory " + szStringColumnType + ", notprocesstime " + szStringColumnType + ", freq " + szStringColumnType + ",PRIMARY KEY (task_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after GARecurringtask table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GARecurringtask Table ");
                            System.err.println(sqle.getMessage());
                        }
                        // This is GAArchivetask table creation

                        try
                        {
                            System.out.println("");
                            String szstr = "";
//				statement = con.prepareStatement("CREATE TABLE "+DBConstants.ARCHIVE_TASK_TABLE+" (task_id "+szMediumStringColumnType+" NOT NULL,task_type "+szMediumStringColumnType+",created_by "+szMediumStringColumnType+",priority "+szMediumStringColumnType+",status "+szMediumStringColumnType+",task_summary "+szTextColumnType+",attributes1 "+szTextColumnType+",attributes2 "+szTextColumnType+",attributes3 "+szTextColumnType+",attributes4 "+szTextColumnType+",attributes5 "+szTextColumnType+",attributes6 "+szTextColumnType+",attributes7 "+szTextColumnType+",attributes8 "+szTextColumnType+",attributes9 "+szTextColumnType+",attributes10 "+szTextColumnType+",attributes11 "+szTextColumnType+",attributes12 "+szTextColumnType+",attributes13 "+szTextColumnType+",attributes14 "+szTextColumnType+",attributes15 "+szTextColumnType+",attributes16 "+szTextColumnType+",attributes17 "+szTextColumnType+",attributes18 "+szTextColumnType+",attributes19 "+szTextColumnType+",attributes20 "+szTextColumnType+",attributes21 "+szTextColumnType+",attributes22 "+szTextColumnType+",attributes23 "+szTextColumnType+",attributes24 "+szTextColumnType+",attributes25 "+szTextColumnType+",attributes26 "+szTextColumnType+",attributes27 "+szTextColumnType+",attributes28 "+szTextColumnType+",attributes29 "+szTextColumnType+",attributes30 "+szTextColumnType+",escalated "+szMediumStringColumnType+",viewable_by_public "+szIntegerColumnType+",created_date "+szTimeStampColumnType+",lastupdated_date "+szTimeStampColumnType+",category "+szMediumStringColumnType+",customerid "+szMediumStringColumnType+",userid "+szMediumStringColumnType+",sla "+szMediumStringColumnType+",open_status "+szIntegerColumnType+",status_set_time "+szTimeStampColumnType+",PRIMARY KEY (task_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                szstr = "CREATE TABLE " + DBConstants.ARCHIVE_TASK_TABLE + " (task_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szTextColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ",attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + ",attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + ",attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + ",attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + ",created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ")";
                            } else
                            {
                                szstr = "CREATE TABLE " + DBConstants.ARCHIVE_TASK_TABLE + " (task_id " + szMediumStringColumnType + " NOT NULL,task_type " + szMediumStringColumnType + ",created_by " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",task_summary " + szTextColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ",attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + ",attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + ",attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + ",attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",escalated " + szMediumStringColumnType + ",viewable_by_public " + szIntegerColumnType + ",created_date " + szTimeStampColumnType + ",lastupdated_date " + szTimeStampColumnType + ",category " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",sla " + szMediumStringColumnType + ",open_status " + szIntegerColumnType + ",status_set_time " + szTimeStampColumnType + ",lastseenuserid " + szMediumStringColumnType + ", lastseen_date " + szTimeStampColumnType + ",parent_task_id " + szMediumStringColumnType + ",PRIMARY KEY (task_id))";
                            }
                            System.out.println("szstr--------->" + szstr);
                            statement = con.prepareStatement(szstr);
                            statement.executeUpdate();
                            System.out.println(" this is after archivetask table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the archivetask Table ");
                            System.err.println(sqle.getMessage());

                        }


                        //  This is GAHistory table creation

                        try
                        {
                            System.out.println("");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.HISTORY_TABLE + " (user_id " + szMediumStringColumnType + ", task_id " + szMediumStringColumnType + " NOT NULL,updated_date " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ", remarks " + szTextColumnType + ", no_view_level " + sz80StringColumnType + ", statusfrom " + szMediumStringColumnType + ", statusto " + szMediumStringColumnType + ",email_id " + szMediumStringColumnType + ",chat_id " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after history table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAHistory Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAArchivehistory table creation

                        try
                        {
                            System.out.println("");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_HISTORY_TABLE + " (user_id " + szMediumStringColumnType + ",task_id " + szMediumStringColumnType + " NOT NULL,updated_date " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ",remarks " + szTextColumnType + ",no_view_level " + sz80StringColumnType + ",statusfrom " + szMediumStringColumnType + ",statusto " + szMediumStringColumnType + ",email_id " + szMediumStringColumnType + ", chat_id " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after archivehistory table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchivehistory Table ");
                            System.err.println(sqle.getMessage());
                        }


                        // This is GATaskchat table creation

                        try
                        {
                            System.out.println("");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_CHAT_TABLE + " (chat_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_id " + szMediumStringColumnType + ",timestart " + szTimeStampColumnType + ",timeend " + szTimeStampColumnType + ",chat_user " + szMediumStringColumnType + ",chat_operator " + szMediumStringColumnType + ",chat_message " + szTextColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_CHAT_TABLE + " (chat_id " + szMediumStringColumnType + " NOT NULL,task_id " + szMediumStringColumnType + ",timestart " + szTimeStampColumnType + ",timeend " + szTimeStampColumnType + ",chat_user " + szMediumStringColumnType + ",chat_operator " + szMediumStringColumnType + ",chat_message " + szTextColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ", PRIMARY KEY (chat_id) ) ");
                            }
                            statement.executeUpdate();
                            System.out.println("  this is after chat table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskChat Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAArchiveUserstatistics table creation

                        try
                        {
                            System.out.println("");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_USER_STATISTICS_TABLE + " (session_id " + szMediumStringColumnType + " ,user_id " + szMediumStringColumnType + "," + "action_time " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ",chatentered " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAArchiveUserstatistics table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveUserstatistics Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAArchiveTaskchat table creation

                        try
                        {
                            System.out.println("");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASK_CHAT_TABLE + " (chat_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_id " + szLongStringColumnType + ",timestart " + szTimeStampColumnType + ", timeend " + szTimeStampColumnType + ",chat_user " + szMediumStringColumnType + "," + "chat_operator " + szMediumStringColumnType + ",chat_message " + szTextColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASK_CHAT_TABLE + " (chat_id " + szMediumStringColumnType + " NOT NULL,task_id " + szLongStringColumnType + ",timestart " + szTimeStampColumnType + ", timeend " + szTimeStampColumnType + ",chat_user " + szMediumStringColumnType + "," + "chat_operator " + szMediumStringColumnType + ",chat_message " + szTextColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",PRIMARY KEY (chat_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after archive chat table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveChat Table ");
                            System.err.println(sqle.getMessage());
                        }


                        // This is GAMBoard table creation

                        try
                        {
                            System.out.println("");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MBOARD_TABLE + " (bb_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,boardname " + szMediumStringColumnType + " NOT NULL,parentboard " + szMediumStringColumnType + ",description " + szTextColumnType + ",boardmail " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MBOARD_TABLE + " (bb_id " + szMediumStringColumnType + " NOT NULL,boardname " + szMediumStringColumnType + " NOT NULL,parentboard " + szMediumStringColumnType + ",description " + szTextColumnType + ",boardmail " + szMediumStringColumnType + ",PRIMARY KEY (bb_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after  GAMBOARD table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAMBoard Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GABulletinBoard Table Creation
                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.BULLETINBOARD_TABLE + " (boardName " + szMediumStringColumnType + " ,bb_date " + szTimeStampColumnType + " ,bb_from " + szMediumStringColumnType + ",bb_subject " + szMediumStringColumnType + ",bb_message " + szTextColumnType + ", threadid " + szIntegerColumnType + " NOT NULL,messageid " + szIntegerColumnType + ", parentmessage " + szIntegerColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.BULLETINBOARD_TABLE + " (boardName " + szMediumStringColumnType + " ,bb_date " + szTimeStampColumnType + " ,bb_from " + szMediumStringColumnType + ",bb_subject " + szMediumStringColumnType + ",bb_message " + szTextColumnType + ", threadid " + szIntegerColumnType + " NOT NULL,messageid " + szIntegerColumnType + ", parentmessage " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after  GABulletinBOARD table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GABulletinBoard Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAArchiveBulletinBoard Table Creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.ARCHIVE_BULLETINBOARD_TABLE + " (boardname " + szMediumStringColumnType + " ,bb_date " + szTimeStampColumnType + " ,bb_from " + szMediumStringColumnType + ",bb_subject " + szMediumStringColumnType + ",bb_message " + szTextColumnType + ", threadid " + szIntegerColumnType + " NOT NULL,messageid " + szIntegerColumnType + ", parentmessage " + szIntegerColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_BULLETINBOARD_TABLE + " (boardname " + szMediumStringColumnType + " ,bb_date " + szTimeStampColumnType + " ,bb_from " + szMediumStringColumnType + ",bb_subject " + szMediumStringColumnType + ",bb_message " + szTextColumnType + ", threadid " + szIntegerColumnType + " NOT NULL,messageid " + szIntegerColumnType + ", parentmessage " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after  GAArchiveBulletinBOARD table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveBulletinBoard Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAArticles table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.ARTICLES_TABLE + " (article_id  " + szIntegerColumnType + " NOT NULL,user_id " + szMediumStringColumnType + ",kb_date " + szTimeStampColumnType + ", questions " + szTextColumnType + ",article_title " + szMediumStringColumnType + "," + "article_details " + szTextColumnType + ", keywords " + szMediumStringColumnType + ",related_articles " + szMediumStringColumnType + ", PRIMARY KEY (article_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARTICLES_TABLE + " (article_id  " + szIntegerColumnType + " NOT NULL PRIMARY KEY,user_id " + szMediumStringColumnType + ",kb_date " + szTimeStampColumnType + ", questions " + szTextColumnType + ",article_title " + szMediumStringColumnType + "," + "article_details " + szTextColumnType + ", keywords " + szMediumStringColumnType + ",related_articles " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARTICLES_TABLE + " (article_id  " + szIntegerColumnType + " NOT NULL,user_id " + szMediumStringColumnType + ",kb_date " + szTimeStampColumnType + ", questions " + szTextColumnType + ",article_title " + szMediumStringColumnType + "," + "article_details " + szTextColumnType + ", keywords " + szMediumStringColumnType + ",related_articles " + szMediumStringColumnType + ", PRIMARY KEY (article_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAArticles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArticles Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {

                            System.out.println("CREATE TABLE " + DBConstants.ARTICLES_FILES_TABLE + " (article_id " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ",filedate " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARTICLES_FILES_TABLE + " (article_id " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ",filedate " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            statement.close();

                            System.out.println(" this is after gaarticlesfiles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the gaarticlesfiles Table ");
                            //sqle.printStackTrace();
                            System.err.println(sqle.getMessage());
                        }
                        // This is GAKBStructure table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.KB_STRUCTURE_TABLE + " (kb_id  " + szMediumStringColumnType + " NOT NULL,kb_category " + szMediumStringColumnType + ",parent_category " + szMediumStringColumnType + ",description " + szLongStringColumnType + ", PRIMARY KEY (kb_id))");
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.KB_STRUCTURE_TABLE + " (kb_id  " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,kb_category " + szMediumStringColumnType + ",parent_category " + szMediumStringColumnType + ",description " + szLongStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.KB_STRUCTURE_TABLE + " (kb_id  " + szMediumStringColumnType + " NOT NULL,kb_category " + szMediumStringColumnType + ",parent_category " + szMediumStringColumnType + ",description " + szLongStringColumnType + ", PRIMARY KEY (kb_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAKBStructure table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAKbStructure Table ");
                            System.err.println(sqle.getMessage());
                        //				sqle.printStackTrace();
                        }

                        // This is GAKBArticles table creation

                        try
                        {
                            System.out.println("CREATE TABLE " + DBConstants.KB_ARTICLES_TABLE + " (kb_id  " + szMediumStringColumnType + " NOT NULL,article_id " + szIntegerColumnType + ",featured " + szMediumStringColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.KB_ARTICLES_TABLE + " (kb_id  " + szMediumStringColumnType + " NOT NULL,article_id " + szIntegerColumnType + ",featured " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAKBArticles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAKbArticles Table ");
                            System.err.println(sqle.getMessage());
                        //				sqle.printStackTrace();
                        }

                        // This is GAFAQStructure table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.FAQ_STRUCTURE_TABLE + " (faq_id  " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,description " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.FAQ_STRUCTURE_TABLE + " (faq_id  " + szMediumStringColumnType + " NOT NULL,description " + szMediumStringColumnType + ", PRIMARY KEY (faq_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after GAFAQStructure table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAFaqStructure Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAFAQArticles table creation

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.FAQ_ARTICLES_TABLE + " (faq_id  " + szMediumStringColumnType + " NOT NULL,article_id " + szIntegerColumnType + ",sequence " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAFAQArticles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAFAQArticles Table ");
                            //	sqle.printStackTrace();
                            System.err.println(sqle.getMessage());
                        }

                        // This is GATaskassignee table creation

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_ASSIGNEE_TABLE + " (sequence " + szIntegerColumnType + " NOT NULL,task_type " + szMediumStringColumnType + " NOT NULL,assignee_name " + szMediumStringColumnType + " NOT NULL)");
                            statement.executeUpdate();
                            System.out.println(" This is after GATaskassignee table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskassignee Table ");
                            System.err.println(sqle.getMessage());
                        }
                        // This is GAArchiveTaskassignee table creation

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASK_ASSIGNEE_TABLE + " (sequence " + szIntegerColumnType + " NOT NULL,task_type " + szMediumStringColumnType + " NOT NULL,assignee_name " + szMediumStringColumnType + " NOT NULL)");
                            statement.executeUpdate();
                            System.out.println(" SUCCESS : creating the GAArchiveTaskAssignee Table ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveTaskAssignee Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAUserpreferences table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_PREFERENCES_TABLE + " (attribute_name " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,attribute_type " + szMediumStringColumnType + " NOT NULL,attribute_value " + szMediumStringColumnType + " NOT NULL)");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_PREFERENCES_TABLE + " (attribute_name " + szMediumStringColumnType + " NOT NULL,attribute_type " + szMediumStringColumnType + " NOT NULL,attribute_value " + szMediumStringColumnType + " NOT NULL, PRIMARY KEY (attribute_name))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAUserpreferences table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserpreference Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAProducttype table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ", PRIMARY KEY (field_name))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAProducttype table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating the GAProducttype Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAServicetype table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SERVICE_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SERVICE_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ", PRIMARY KEY (field_name))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAServicetype table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAServicetype Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAAdhoctype table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADHOC_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADHOC_TYPE_TABLE + " (field_name " + szMediumStringColumnType + " NOT NULL,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ", PRIMARY KEY (field_name))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAAdhoctype table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAAdhoctype Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAProduct table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                //3/24/2008 Chaded the type of transaction_id
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_TABLE + " (product_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szIntegerColumnType + " NOT NULL,cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ")");
                            } else
                            {
                                //	statement = con.prepareStatement("CREATE TABLE "+DBConstants.PRODUCT_TABLE+" (product_id "+szMediumStringColumnType+" NOT NULL,transaction_id "+szMediumStringColumnType+" NOT NULL,cust_id "+szMediumStringColumnType+" NOT NULL,att_value1 "+szMediumStringColumnType+",att_value2 "+szMediumStringColumnType+",att_value3 "+szMediumStringColumnType+",att_value4 "+szMediumStringColumnType+","+"att_value5 "+szMediumStringColumnType+",att_value6 "+szMediumStringColumnType+",att_value7 "+szMediumStringColumnType+",att_value8 "+szMediumStringColumnType+","+"att_value9 "+szMediumStringColumnType+",att_value10 "+szMediumStringColumnType+", PRIMARY KEY (transaction_id))");
                                //3/24/2008 Changed by Susmita
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_TABLE + " (product_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szIntegerColumnType + " NOT NULL,cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAProduct table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAProduct Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAService table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SERVICE_TABLE + " (service_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SERVICE_TABLE + " (service_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szMediumStringColumnType + ",cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ", PRIMARY KEY (transaction_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAService table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAService Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAAdhoc table creation

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADHOC_TABLE + " (adhoc_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADHOC_TABLE + " (adhoc_id " + szMediumStringColumnType + " NOT NULL,transaction_id " + szMediumStringColumnType + ",cust_id " + szMediumStringColumnType + " NOT NULL,att_value1 " + szMediumStringColumnType + ",att_value2 " + szMediumStringColumnType + ",att_value3 " + szMediumStringColumnType + ",att_value4 " + szMediumStringColumnType + "," + "att_value5 " + szMediumStringColumnType + ",att_value6 " + szMediumStringColumnType + ",att_value7 " + szMediumStringColumnType + ",att_value8 " + szMediumStringColumnType + "," + "att_value9 " + szMediumStringColumnType + ",att_value10 " + szMediumStringColumnType + ", PRIMARY KEY (transaction_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAAdhoc table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAAdhoc Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //*********************************************************************************************************

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SECURITYLEVELS_TABLE + " (security_id " + szIntegerColumnType + " NOT NULL PRIMARY KEY,\"level\" " + szIntegerColumnType + ",name " + szMediumStringColumnType + " ,description " + szMediumStringColumnType + ")");
                            } else if ("oracle".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SECURITYLEVELS_TABLE + " (security_id " + szIntegerColumnType + " NOT NULL,\"level\" " + szIntegerColumnType + ",name " + szMediumStringColumnType + " ,description " + szMediumStringColumnType + " ,PRIMARY KEY (security_id))");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.SECURITYLEVELS_TABLE + " (security_id " + szIntegerColumnType + " NOT NULL,\"level\" " + szIntegerColumnType + ",name " + szMediumStringColumnType + " ,description " + szMediumStringColumnType + " ,PRIMARY KEY (security_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GASECURITYLEVEL table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GASecuritylevel Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.SECURITYLEVELS_TABLE + " VALUES(1,1,'Admin','Administrative Level')");
                            statement.executeUpdate();
                            System.out.println(" This is after GASecuritylevel table insertion ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : insert into the GASecurity level Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.SECURITYLEVELS_TABLE + " VALUES(50,255,'User','User Level')");
                            statement.executeUpdate();
                            System.out.println("This is after GASecuritylevel table insertion ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : insert into the GASecuritylevel Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.HIERARCHY_TABLE + " (userid " + szMediumStringColumnType + ",manager " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAHierarchy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAHierarchy Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_HIERARCHY_TABLE + " (userid " + szMediumStringColumnType + ",manager " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAUserHierarchy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserHierarchy Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.GROUP_HIERARCHY_TABLE + " (lowergroup " + szMediumStringColumnType + ",managegroup " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAGroupHierarchy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAGrouphierarchy Table ");
                            System.err.println(sqle.getMessage());
                        }


                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.GROUPNAME_TABLE + " (groupname " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,description " + szMediumStringColumnType + ",assignee_required " + szMediumStringColumnType + ",chat_index " + szIntegerColumnType + ",defaultuserview " + szMediumStringColumnType + ",contact_details " + szLongStringColumnType + ",parameter1 " + szLongStringColumnType + ",parameter2 " + szIntegerColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.GROUPNAME_TABLE + " (groupname " + szMediumStringColumnType + " NOT NULL,description " + szMediumStringColumnType + ",assignee_required " + szMediumStringColumnType + ",chat_index " + szIntegerColumnType + ",defaultuserview " + szMediumStringColumnType + ",contact_details " + szLongStringColumnType + ",parameter1 " + szLongStringColumnType + ",parameter2 " + szIntegerColumnType + ",PRIMARY KEY (groupname))");
                            }
                            statement.executeUpdate();
                            System.out.println(" this is after GAGroupname table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAGroupname Table ");
                            System.err.println(sqle.getMessage());
                        }


                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.AGENT_GROUP_TABLE + " (userid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",role " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("  this is after GAAgentGroup table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAAgentGroup Table ");
                            System.err.println(sqle.getMessage());
                        }


                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_GROUP_TABLE + " (userid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAUserGroup table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserGroup Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.HISTORY_ATTRIBUTES_TABLE + " (tasktype " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ",type " + szMediumStringColumnType + ", value " + szMediumStringColumnType + ", location " + szIntegerColumnType + ", required_check " + szIntegerColumnType + ",attributepos " + szIntegerColumnType + ",linkattribute " + szMediumStringColumnType + ",tooltipmessage " + szTextColumnType + ",linkedattributes " + szMediumStringColumnType + ",linkedpositions " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAhistoryattribute table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAhistoryattribute Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            //	statement = con.prepareStatement("CREATE TABLE "+DBConstants.TASKTYPE_ATTRIBUTES_TABLE+" (tasktype "+szStringColumnType+",attribute "+szMediumStringColumnType+",type "+szMediumStringColumnType+", value "+szMediumStringColumnType+", location "+szIntegerColumnType+", required_check "+szIntegerColumnType+",attributepos "+szIntegerColumnType+",linkattribute "+szMediumStringColumnType+",tooltipmessage "+szTextColumnType+",linkedattributes "+szMediumStringColumnType+",linkedpositions "+szMediumStringColumnType+",param2 "+szMediumStringColumnType+")");
                            //3/24/2008 - type of fields being changed
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_ATTRIBUTES_TABLE + " (tasktype " + szStringColumnType + ",attribute " + szStringColumnType + ",type " + szStringColumnType + ", value " + szStringColumnType + ", location " + szIntegerColumnType + ", required_check " + szIntegerColumnType + ",attributepos " + szIntegerColumnType + ",linkattribute " + szStringColumnType + ",tooltipmessage " + szStringColumnType + ",linkedattributes " + szStringColumnType + ",linkedpositions " + szStringColumnType + ",param2 " + szStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAtasktypeattribute table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATasktypeattribute Table ");
                            System.err.println(sqle.getMessage());
                        }


                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_GROUP_TABLE + " (tasktype " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",primarygroup " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GATasktypeGroup table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATasktypeGroup Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.POLICIES_TABLE + " (tasktype " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",securitylevel " + szMediumStringColumnType + ",allowpeers " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAPolicies table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAPolicies Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            //	statement = con.prepareStatement("CREATE TABLE "+DBConstants.STATUS_PERMISSIONS_TABLE+" (statusid "+szMediumStringColumnType+",groupname "+szMediumStringColumnType+",changeto "+szIntegerColumnType+", changefrom "+szIntegerColumnType+",send_mail "+szIntegerColumnType+")");
                            //3/24/2008
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_PERMISSIONS_TABLE + " (statusid " + szStringColumnType + ",groupname " + szStringColumnType + ",changeto " + szBigIntColumnType + ", changefrom " + szBigIntColumnType + ",send_mail " + szBigIntColumnType + ")");

                            statement.executeUpdate();
                            System.out.println(" This is after GAStatuspermissions table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAStatuspermissions Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_ASSIGNEE_TABLE + " (taskid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ", assignee " + szMediumStringColumnType + ",primary_assignee " + szIntegerColumnType + ",action_assignee " + szIntegerColumnType + ",startdate " + szMediumStringColumnType + ",targetdate " + szMediumStringColumnType + ",role_assignee " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GATasktypeassignee table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATasktypeassignee Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASKTYPE_ASSIGNEE_TABLE + " (taskid " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ", assignee " + szMediumStringColumnType + ",primary_assignee " + szIntegerColumnType + ",action_assignee " + szIntegerColumnType + ",startdate " + szMediumStringColumnType + ",targetdate " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAArchiveTasktypeassignee table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchivetasktypeassignee Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_MASTER_TABLE + " (productid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,category " + szMediumStringColumnType + ", description " + szMediumStringColumnType + ",unitofmeasure " + szMediumStringColumnType + ",minimumorderquantity " + szMediumStringColumnType + ", retailprice " + szMediumStringColumnType + ",currency " + szMediumStringColumnType + ",batchno " + szMediumStringColumnType + ", batchdate " + szMediumStringColumnType + ",leadtime " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_MASTER_TABLE + " (productid " + szMediumStringColumnType + ",category " + szMediumStringColumnType + ", description " + szMediumStringColumnType + ",unitofmeasure " + szMediumStringColumnType + ",minimumorderquantity " + szMediumStringColumnType + ", retailprice " + szMediumStringColumnType + ",currency " + szMediumStringColumnType + ",batchno " + szMediumStringColumnType + ", batchdate " + szMediumStringColumnType + ",leadtime " + szMediumStringColumnType + ",PRIMARY KEY (productid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GAProductmaster table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAProductmaster Table ");
                            System.err.println(sqle.getMessage());
                        }


                        //*********************************************************************************************************
                        // This is adding Security Tables for FAQs,KnowledgeBase,and Discussion Forums

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.FAQ_SECURITY_TABLE + " (faq_id " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAFAq security table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAFaqSecurity Table ");
                            System.err.println(e.getMessage());
                        }

                        //GAKBSecurity table...............................................................

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.KB_SECURITY_TABLE + " (kb_id " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAKBSecurity table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAKBSecurity Table ");
                            System.err.println(e.getMessage());
                        }

                        //GAForumSecurity table............................................................

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.FORUM_SECURITY_TABLE + " (bb_id " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAForum security table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAForumSecurity Table ");
                            System.err.println(e.getMessage());
                        }

                        // This is GAFeedbackattribute table........................................
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.FEEDBACK_ATTRIBUTE_TABLE + " (fid " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ", status " + szMediumStringColumnType + ", attributename " + szMediumStringColumnType + ", type " + szMediumStringColumnType + ",value " + szMediumStringColumnType + ",location " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after Feedbackattribute table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAFeedbackattribute Table ");
                            System.err.println(e.getMessage());
                        }

                        // This is GAFeedback table........................................
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.FEEDBACK_TABLE + " (fid " + szMediumStringColumnType + ",taskid " + szMediumStringColumnType + ", feedback " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAFeedback table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAFeedback Table ");
                            System.err.println(e.getMessage());
                        }
                        // GAArchiveFeedback table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_FEEDBACK_TABLE + " (fid " + szMediumStringColumnType + ",taskid " + szMediumStringColumnType + ", feedback " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GAArchiveFeedback table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveFeedback Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GAContactSecurity table......................................
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.CONTACT_SECURITY_TABLE + " (actions " + szMediumStringColumnType + ", groups " + szMediumStringColumnType + ", security_level " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println("This is after the GAContactSecurity table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAContactSecurity Table ");
                            System.err.println(e.getMessage());
                        }
                        //This is GACchatpolicy table......................................
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.CHAT_POLICY_TABLE + " (actions " + szMediumStringColumnType + ", groups " + szMediumStringColumnType + ", security_level " + szMediumStringColumnType + ",attributes " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after the GAChatpolicy table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAChatpolicy Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GAEscalationRule table......................................
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ESCALATION_RULE_TABLE + " (tasktype " + szMediumStringColumnType + ",ownergroup " + szMediumStringColumnType + ",ownersecuritylevel " + szMediumStringColumnType + ",priority " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",escalationlevel " + szIntegerColumnType + ",event " + szTextColumnType + ",status " + szMediumStringColumnType + ",parameter1 " + szTextColumnType + ",parameter2 " + szTextColumnType + ",timelimit " + szIntegerColumnType + ",timereference " + szTextColumnType + ",escalationgroup " + szMediumStringColumnType + ",escalatetomanager " + szTextColumnType + ",managerescmedium " + szMediumStringColumnType + ",escalationtrigger " + szTextColumnType + ",emailaddress " + szTextColumnType + " )");
                            statement.executeUpdate();
                            System.out.println(" This is after the GAEscalationRule table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAEscalationRule Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is gaescalatedtasks table......................................
                        try
                        {
                            if ("oracle".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ESCALATED_TASKS_TABLE + " (taskid " + szMediumStringColumnType + ",\"level\" " + szIntegerColumnType + ",times " + szTimeStampColumnType + ",event " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",parameter1 " + szMediumStringColumnType + ",parameter2 " + szMediumStringColumnType + ",escalationgroup " + szMediumStringColumnType + ",escalatetoid " + szMediumStringColumnType + ",escalatedtoaddress " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ESCALATED_TASKS_TABLE + " (taskid " + szMediumStringColumnType + ",level " + szIntegerColumnType + ",times " + szTimeStampColumnType + ",event " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",parameter1 " + szMediumStringColumnType + ",parameter2 " + szMediumStringColumnType + ",escalationgroup " + szMediumStringColumnType + ",escalatetoid " + szMediumStringColumnType + ",escalatedtoaddress " + szMediumStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after the GAEscalatedTasks table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAEscalatedTasks Table ");
                            System.err.println(e.getMessage());
                        }


                        //This is gaescalationhistory table......................................
                        try
                        {
                            if ("oracle".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE gaescalationhistory (taskid " + szMediumStringColumnType + ", \"level\" " + szIntegerColumnType + ",times " + szTimeStampColumnType + ",event " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",parameter1 " + szMediumStringColumnType + ",parameter2 " + szMediumStringColumnType + ",escalationgroup " + szMediumStringColumnType + ",escalatetoid " + szMediumStringColumnType + ",escalatetoaddress " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE gaescalationhistory (taskid " + szMediumStringColumnType + ", level " + szIntegerColumnType + ",times " + szTimeStampColumnType + ",event " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",parameter1 " + szMediumStringColumnType + ",parameter2 " + szMediumStringColumnType + ",escalationgroup " + szMediumStringColumnType + ",escalatetoid " + szMediumStringColumnType + ",escalatetoaddress " + szMediumStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after the GAEscalatedTasks table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gaescalationhistory Table ");
                            System.err.println(e.getMessage());
                        }


                        //This is GAOrganizationHoliday table......................................
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ORGANIZATION_HOLIDAYS_TABLE + " (holidaydate " + szTimeStampColumnType + " NOT NULL PRIMARY KEY, description " + szTextColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ORGANIZATION_HOLIDAYS_TABLE + " (holidaydate " + szTimeStampColumnType + ", description " + szTextColumnType + ", PRIMARY KEY (holidaydate) )");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after the GAORganizatoinHolidays table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAOrganizationHolidyas Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GAMailRoutingOptions table......................................
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MAIL_ROUTING_OPTIONS_TABLE + " (mailboxname " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, mailboxpassword " + szMediumStringColumnType + ",poolfrequency " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MAIL_ROUTING_OPTIONS_TABLE + " (mailboxname " + szMediumStringColumnType + ", mailboxpassword " + szMediumStringColumnType + ",poolfrequency " + szIntegerColumnType + ", PRIMARY KEY (mailboxname) )");
                            }
                            statement.executeUpdate();
                            System.out.println(" GAMailRoutingOptions table created Sucessfully(1)	:");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAMailRoutingOptions Table ");
                            System.err.println(e.getMessage());
                        }


                        //	This is product link table
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.PRODUCT_LINK_TABLE + " (tablename " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ", linkgroup " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gaproductlink table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAProductlink Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GACalendar table......................................
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CALENDAR_TABLE + " (days " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, starttime1 " + szIntegerColumnType + ", endtime1 " + szIntegerColumnType + ", starttime2 " + szIntegerColumnType + ", endtime2 " + szIntegerColumnType + ", starttime3 " + szIntegerColumnType + ", endtime3 " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CALENDAR_TABLE + " (days " + szMediumStringColumnType + ", starttime1 " + szIntegerColumnType + ", endtime1 " + szIntegerColumnType + ", starttime2 " + szIntegerColumnType + ", endtime2 " + szIntegerColumnType + ", starttime3 " + szIntegerColumnType + ", endtime3 " + szIntegerColumnType + ", PRIMARY KEY (days) )");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after the GACalendar table creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GACalendar Table ");
                            System.err.println(e.getMessage());
                        }


                        //This is GACustomer messages table.
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CUSTOMER_MESSAGES_TABLE + " ( customername " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, customermessage " + szTextColumnType + ", addeddate " + szTimeStampColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CUSTOMER_MESSAGES_TABLE + " ( customername " + szMediumStringColumnType + ", customermessage " + szTextColumnType + ", addeddate " + szTimeStampColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ", PRIMARY KEY(customername) )");
                            }
                            statement.executeUpdate();
                            System.out.println("SUCESS	: Table GACustomerMessages created sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GACustomerMessages Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GAUser messages table.
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_MESSAGES_TABLE + " ( username " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, usermessage " + szTextColumnType + ", addeddate " + szTimeStampColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_MESSAGES_TABLE + " ( username " + szMediumStringColumnType + ", usermessage " + szTextColumnType + ", addeddate " + szTimeStampColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ",PRIMARY KEY(username) )");
                            }
                            statement.executeUpdate();
                            System.out.println("SUCESS	: Table GAUserMessages created sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserMessages Table ");
                            System.err.println(e.getMessage());
                        }

                        int DefaultStartTime1 = 900;
                        int DefaultEndTime1 = 1300;

                        int DefaultStartTime2 = 1400;
                        int DefaultEndTime2 = 1700;

                        int DefaultStartTime3 = 0000;
                        int DefaultEndTime3 = 0000;

                        String[] Days = new String[]
                        {
                            "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"
                        };

                        try
                        {
                            for (int i = 0; i < Days.length; i++)
                            {
                                statement = con.prepareStatement("INSERT INTO " + DBConstants.CALENDAR_TABLE + " VALUES('" + Days[i] + "'," + DefaultStartTime1 + "," + DefaultEndTime1 + "," + DefaultStartTime2 + "," + DefaultEndTime2 + "," + DefaultStartTime3 + "," + DefaultEndTime3 + ")");
                                statement.executeUpdate();
                                System.out.println(" Inserted for " + Days[i] + " - ");
                            }

                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : Inserting values to GACalendar Table ");
                        //		e.printStackTrace();
                        }

                        //********************************************************************************************************

                        // This is GACustomertable insertion
                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.CUSTOMER_TABLE + " VALUES('Internal','None','None','None','None','None','None','None',100,'None','None','None','None','None','None','None','None','None','None')");
                            statement.executeUpdate();
                            System.out.println("  this is after customer table insertion ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : inserting in GACustomer Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAOperator table insertion
                        try
                        {
                            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                            Date date = new Date();
                            String passwordtime = dateFormat.format(date);

                            //Encrypted Password for admin is being set.
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.OPERATOR_TABLE + " VALUES('Admin','0rlqgo','Admin','Administrator','None','None','None','None','None','None','None','None','None',0,'Internal','None','" + passwordtime + "',0) ");
                            statement.executeUpdate();
                            System.out.println(" this is after GAoperator table INSERTION");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : inserting values into GAOperator Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GATaskView table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_VIEW_TABLE + " (userid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_type " + szTextColumnType + ",status " + szTextColumnType + ",priority " + szTextColumnType + ",duration " + szMediumStringColumnType + ",task_view " + szTextColumnType + ",view_columns " + szTextColumnType + ",category " + szTextColumnType + ",viewpage " + szMediumStringColumnType + ",chatload " + szMediumStringColumnType + ",tasksummaryload " + szMediumStringColumnType + ",closetaskview " + szMediumStringColumnType + ",assignment_mail " + szMediumStringColumnType + ",taskhistory_order " + szMediumStringColumnType + ",home_view " + szMediumStringColumnType + ",showfeaturedkb " + szMediumStringColumnType + ",taskcomments_reqd " + szMediumStringColumnType + ",showpeertasks " + szMediumStringColumnType + ",outofoffice " + szSMStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_VIEW_TABLE + " (userid " + szMediumStringColumnType + ",task_type " + szTextColumnType + ",status " + szTextColumnType + ",priority " + szTextColumnType + ",duration " + szMediumStringColumnType + ",task_view " + szTextColumnType + ",view_columns " + szTextColumnType + ",category " + szTextColumnType + ",viewpage " + szMediumStringColumnType + ",chatload " + szMediumStringColumnType + ",tasksummaryload " + szMediumStringColumnType + ",closetaskview " + szMediumStringColumnType + ",assignment_mail " + szMediumStringColumnType + ",taskhistory_order " + szMediumStringColumnType + ",home_view " + szMediumStringColumnType + ",showfeaturedkb " + szMediumStringColumnType + ",taskcomments_reqd " + szMediumStringColumnType + ",showpeertasks " + szMediumStringColumnType + ",outofoffice " + szSMStringColumnType + ", PRIMARY KEY (userid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after the GATaskView table creation...");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskView Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GATaskView  table insertion
                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.TASK_VIEW_TABLE + " VALUES('Admin','All','All','All','7','All','status,createdby,tasktype,lastupdateduser,lastupdatedtime,primarytaskflag,lastseenflag','All','homepage','No','No','No','No','ASC','pane','No','Yes','No')");
                            statement.executeUpdate();
                            System.out.println(" This is after inserting values for Admin in GATaskView table");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : INSERT INTO the GATaskView Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GARecentTaskViewUser table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.RECENT_TASK_VIEW_USER_TABLE + " (userid " + szMediumStringColumnType + ",taskid " + szMediumStringColumnType + ",recent_date " + szTimeStampColumnType + ",recent_status " + szMediumStringColumnType + ",recent_priority " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after the GARecentTaskViewUser table creation...");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GARecentTaskViewuser Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //This is GAArchiveRecentTaskViewUser table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_RECENT_TASK_VIEW_USER_TABLE + " (userid " + szMediumStringColumnType + ",taskid " + szMediumStringColumnType + ",recent_date " + szTimeStampColumnType + ",recent_status " + szMediumStringColumnType + ",recent_priority " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after the GAArchiveRecentTaskViewUser table creation...");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveRecentTaskViewUser Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GATableStructure table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TABLE_STRUCTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",attribute_name " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ",attributetype " + szMediumStringColumnType + ",attributevalue " + szMediumStringColumnType + ",linkcolumn " + szMediumStringColumnType + ",keycolumn " + szMediumStringColumnType + ",attribute_pos " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gatablestructe creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATableStructure Table ");
                            System.err.println(e.getMessage());
                        }

                        //This is GATaskTable table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE_TABLE + " (taskid " + szMediumStringColumnType + ",transactionid " + szMediumStringColumnType + ",attribute_name " + szMediumStringColumnType + ",value1 " + szTextColumnType + ",value2 " + szTextColumnType + ",value3 " + szTextColumnType + ",value4 " + szTextColumnType + ",value5 " + szTextColumnType + ",value6 " + szTextColumnType + ",value7 " + szTextColumnType + ",value8 " + szTextColumnType + ",value9 " + szTextColumnType + ",value10 " + szTextColumnType + ",file1 " + szBinaryColumnType1 + ",file2 " + szBinaryColumnType1 + ",file3 " + szBinaryColumnType1 + ",file4 " + szBinaryColumnType1 + ",file5 " + szBinaryColumnType1 + ",type1 " + szMediumStringColumnType + ",type2 " + szMediumStringColumnType + ",type3 " + szMediumStringColumnType + ",type4 " + szMediumStringColumnType + ",type5 " + szMediumStringColumnType + ",size1 " + szMediumStringColumnType + ",size2 " + szMediumStringColumnType + ",size3 " + szMediumStringColumnType + ",size4 " + szMediumStringColumnType + ",size5 " + szMediumStringColumnType + ", value11 " + szTextColumnType + ", value12 " + szTextColumnType + ",value13 " + szTextColumnType + ", value14 " + szTextColumnType + ", value15 " + szTextColumnType + " ) IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_TABLE_TABLE + " (taskid " + szMediumStringColumnType + ",transactionid " + szMediumStringColumnType + ",attribute_name " + szMediumStringColumnType + ",value1 " + szTextColumnType + ",value2 " + szTextColumnType + ",value3 " + szTextColumnType + ",value4 " + szTextColumnType + ",value5 " + szTextColumnType + ",value6 " + szTextColumnType + ",value7 " + szTextColumnType + ",value8 " + szTextColumnType + ",value9 " + szTextColumnType + ",value10 " + szTextColumnType + ",file1 " + szBinaryColumnType1 + ",file2 " + szBinaryColumnType1 + ",file3 " + szBinaryColumnType1 + ",file4 " + szBinaryColumnType1 + ",file5 " + szBinaryColumnType1 + ",type1 " + szMediumStringColumnType + ",type2 " + szMediumStringColumnType + ",type3 " + szMediumStringColumnType + ",type4 " + szMediumStringColumnType + ",type5 " + szMediumStringColumnType + ",size1 " + szMediumStringColumnType + ",size2 " + szMediumStringColumnType + ",size3 " + szMediumStringColumnType + ",size4 " + szMediumStringColumnType + ",size5 " + szMediumStringColumnType + ", value11 " + szTextColumnType + ", value12 " + szTextColumnType + ",value13 " + szTextColumnType + ", value14 " + szTextColumnType + ", value15 " + szTextColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GATaskTable  Table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTable Table ");
                            System.err.println(e.getMessage());
                        }

                        // Creation of GATaskvoice table
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_VOICE_TABLE + " (voice_id " + szMediumStringColumnType + ",task_id " + szMediumStringColumnType + ",user_id " + szMediumStringColumnType + ",call_date " + szMediumStringColumnType + ",call_time " + szMediumStringColumnType + ",rec_time " + szMediumStringColumnType + ",voice_operator " + szMediumStringColumnType + ",caller_id " + szMediumStringColumnType + ",called_id " + szMediumStringColumnType + ",comments " + szTextColumnType + ",file_name " + szMediumStringColumnType + ",file_type " + szMediumStringColumnType + ",file_value " + szBinaryColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after creating the GAtaskVoice Table ");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAtaskVoice Table ");
                            System.err.println(e.getMessage());
                        }

                        // Creation of GATasktypemailbox table
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_MAILBOX_TABLE + " (tasktype " + szMediumStringColumnType + ",mailboxes " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after creating the GAtasktypemailbox Table ");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAtaskVoice Table ");
                            System.err.println(e.getMessage());
                        }

                        //Creation of GAForumOptions table
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.FORUM_OPTIONS_TABLE + " (userid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,duration " + szMediumStringColumnType + ",selecteduser " + szMediumStringColumnType + ",mailoption " + szMediumStringColumnType + ",defaultview " + szMediumStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.FORUM_OPTIONS_TABLE + " (userid " + szMediumStringColumnType + ",duration " + szMediumStringColumnType + ",selecteduser " + szMediumStringColumnType + ",mailoption " + szMediumStringColumnType + ",defaultview " + szMediumStringColumnType + ",PRIMARY KEY (userid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after creating the GAForumOptions Table ");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GAForumOprions Table ");
                            System.err.println(e.getMessage());
                        }

                        // This is GAEmailattachment table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.EMAIL_ATTACHMENTS_TABLE + " (emailid " + szMediumStringColumnType + ", messagecontent " + szBinaryColumnType + ", contenttype " + szMediumStringColumnType + ", attachmentname " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after creating the email attachment table");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION: Creating the GAEMailattachment");
                            System.err.println(e.getMessage());
                        }

                        // This is GATransientTask table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TRANSIENT_TASK_TABLE + " (transienttaskid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, createdby " + szMediumStringColumnType + ", tasksummary " + szTextColumnType + ", createddate " + szTimeStampColumnType + ", mailboxid " + szMediumStringColumnType + ", emailid " + szMediumStringColumnType + ",forwardflag " + szMediumStringColumnType + ",forwardemails " + szTextColumnType + ",tasktype " + szMediumStringColumnType + ",param1 " + szTextColumnType + ",param2 " + szTextColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TRANSIENT_TASK_TABLE + " (transienttaskid " + szMediumStringColumnType + ", createdby " + szMediumStringColumnType + ", tasksummary " + szTextColumnType + ", createddate " + szTimeStampColumnType + ", mailboxid " + szMediumStringColumnType + ", emailid " + szMediumStringColumnType + ",forwardflag " + szMediumStringColumnType + ",forwardemails " + szTextColumnType + ",tasktype " + szMediumStringColumnType + ",param1 " + szTextColumnType + ",param2 " + szTextColumnType + ", PRIMARY KEY(transienttaskid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after creating the transienttask id");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION: Creating the GAEMailattachment");
                            System.err.println(e.getMessage());
                        }

                        // This is GACategory table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CATEGORY_TABLE + " (categoryid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,task_type " + szMediumStringColumnType + ",category " + szMediumStringColumnType + ",default_category " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CATEGORY_TABLE + " (categoryid " + szMediumStringColumnType + ",task_type " + szMediumStringColumnType + ",category " + szMediumStringColumnType + ",default_category " + szIntegerColumnType + ",PRIMARY KEY (categoryid))");
                            }
                            statement.executeUpdate();

                            System.out.println(" this is after category table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the Category Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_FILE_TABLE + " (taskid " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GATaskFile table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskFile Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASK_FILE_TABLE + " (taskid " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAArchiveTaskFile table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveTaskFile Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.PSUEDOUSER_TABLE + " (userid " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",pseudoname " + szMediumStringColumnType + ",description " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GAPseudoUser table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAPseudo Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TRANSIENT_HISTORY_TABLE + " (userid " + szMediumStringColumnType + ",transienttaskid " + szMediumStringColumnType + ",updated_date " + szTimeStampColumnType + ",action " + szMediumStringColumnType + ",remarks " + szTextColumnType + ",address " + szTextColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GATransientHistory table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATransientHistory Table ");
                            System.err.println(sqle.getMessage());
                        }


                        //This is GACannedResponse table.
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.CANNEDRESPONSE_TABLE + " ( cannedname " + szMediumStringColumnType + ", categoryname " + szMediumStringColumnType + ", groups " + szTextColumnType + ",contents " + szTextColumnType + ",emailnotif " + szMediumStringColumnType + ",seclevel " + szTextColumnType + ",tasktype " + szMediumStringColumnType + ",param2 " + szTextColumnType + " )");
                            statement.executeUpdate();
                            System.out.println("SUCESS	: Table GACannedResponse created sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GACannedResponse Table ");
                            System.err.println(e.getMessage());
                        }
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TRANSIENT_VIEW_TABLE + " ( userid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY, duration " + szMediumStringColumnType + ",tasktype " + szTextColumnType + ",mailbox " + szTextColumnType + ",no_of_records " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szTextColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TRANSIENT_VIEW_TABLE + " ( userid " + szMediumStringColumnType + ", duration " + szMediumStringColumnType + ",tasktype " + szTextColumnType + ",mailbox " + szTextColumnType + ",no_of_records " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szTextColumnType + ", PRIMARY KEY(userid) )");
                            }
                            statement.executeUpdate();
                            System.out.println("SUCESS	: Table GATransientView Created Sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATransientView Table ");
                            System.err.println(e.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.TRANSIENT_VIEW_TABLE + " VALUES('Admin','None','All','All','None','None','None')");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" This is after inserting values for Admin in GATransientView table");

                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : INSERTING ADMIN values in the GATransientView Table ");
                            System.err.println(e.getMessage());
                        }
                        // Rules Table
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MAIL_ROUTING_RULES_TABLE + " ( mailboxname " + szMediumStringColumnType + ", rulename " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,description " + szTextColumnType + ",conditionfield " + szMediumStringColumnType + ",conditioncomparision " + szMediumStringColumnType + ",conditionvalue " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",target " + szMediumStringColumnType + ",targetfile " + szMediumStringColumnType + ",targettext " + szTextColumnType + ",routedmsgstofolder " + szTextColumnType + ",notroutedmsgstofolder " + szTextColumnType + ",precedence " + szIntegerColumnType + ",parameter1 " + szTextColumnType + ",parameter2 " + szTextColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.MAIL_ROUTING_RULES_TABLE + " ( mailboxname " + szMediumStringColumnType + ", rulename " + szMediumStringColumnType + ",description " + szTextColumnType + ",conditionfield " + szMediumStringColumnType + ",conditioncomparision " + szMediumStringColumnType + ",conditionvalue " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",target " + szMediumStringColumnType + ",targetfile " + szMediumStringColumnType + ",targettext " + szTextColumnType + ",routedmsgstofolder " + szTextColumnType + ",notroutedmsgstofolder " + szTextColumnType + ",precedence " + szIntegerColumnType + ",parameter1 " + szTextColumnType + ",parameter2 " + szTextColumnType + ", PRIMARY KEY(rulename) )");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println("SUCESS	: Table GATransientView Created Sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATransientView Table ");
                            System.err.println(e.getMessage());
                        }

                        // Rules based Assignment Table.
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_ASSIGNMENT_RULES_TABLE + " ( attributename " + szMediumStringColumnType + ", attributepos " + szIntegerColumnType + ",tasktype " + szMediumStringColumnType + ",value " + szTextColumnType + ",assignee " + szMediumStringColumnType + ",precedence " + szIntegerColumnType + ",parameter1 " + szTextColumnType + ",parameter2 " + szTextColumnType + " )");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println("SUCESS	: Table GATaskAssignmentRules Created Sucessfully ->");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATransientView Table ");
                            System.err.println(e.getMessage());
                        }
                        // Table added on 30 December 2002
                        try
                        {


                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ASSIGNMENT_FILES_TABLE + " (customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ",filedate " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            statement.close();

                            System.out.println(" this is after GAAssignmentFiles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAAssignmentFiles Table ");
                            System.err.println(sqle.getMessage());
                        }
                        //table added on 7th Jan 2003
                        try
                        {


                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_ATTRIBUTE_POLICY_TABLE + " (tasktype " + szMediumStringColumnType + ",attributename " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",securitylevel " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ",param4 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();

                            System.out.println(" this is after GATaskTypeAttributePolicy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeAttributePolicy Table ");
                            System.err.println(sqle.getMessage());
                        }
                        //table created on 11/10/03
                        try
                        {


                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.HISTORY_ATTRIBUTE_POLICY_TABLE + " (tasktype " + szMediumStringColumnType + ",attributename " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",securitylevel " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szMediumStringColumnType + ",param4 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();

                            System.out.println(" this is after GATaskTypeAttributePolicy table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeAttributePolicy Table ");
                            System.err.println(sqle.getMessage());
                        }
                        // Tbale added on 8th Jan 2003
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_ATTRIBUTE_LINK_TABLE + "  (tasktype " + szMediumStringColumnType + ",attributename " + szMediumStringColumnType + ",linkname " + szMediumStringColumnType + ",linkvalue " + szMediumStringColumnType + ",attributevalue " + szTextColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GATaskTypeAttributeLink table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeAttributeLink Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.HISTORY_ATTRIBUTE_LINK_TABLE + "  (tasktype " + szMediumStringColumnType + ",attributename " + szMediumStringColumnType + ",linkname " + szMediumStringColumnType + ",linkvalue " + szMediumStringColumnType + ",attributevalue " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GATaskTypeAttributeLink table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeAttributeLink Table ");
                            System.err.println(sqle.getMessage());
                        }
                        // Table for Overidding Task Policies.
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_POLICIES_TABLE + " (taskid " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ",securitylevel " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GATaskPolicies table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskPolicies Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.ARCHIVE_TASK_POLICIES_TABLE + " (taskid " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",groups " + szTextColumnType + ",securitylevel " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + " )");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GAArchiveTaskPolicies table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAArchiveTaskPolicies Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }

                        // This is GACategoryTaskAssignmentRules
                        try
                        {


                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.CATEGORY_TASK_ASSIGNMENT_RULES_TABLE + " (tasktype " + szMediumStringColumnType + ",category " + szMediumStringColumnType + ",assignee " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GACategoryTaskAssignmentRules table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GACategoryTaskAssignmentRules Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }
                        // This is GADirectoryLink table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.DIRECTORY_LINK_TABLE + "(directoryflag " + szMediumStringColumnType + " NOT NULL,directoryserver " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,directoryport " + szMediumStringColumnType + ",basecontext " + szLongStringColumnType + ",baseuser " + szLongStringColumnType + ",basepassword " + szMediumStringColumnType + ",authentication " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.DIRECTORY_LINK_TABLE + "(directoryflag " + szMediumStringColumnType + " NOT NULL,directoryserver " + szMediumStringColumnType + ",directoryport " + szMediumStringColumnType + ",basecontext " + szLongStringColumnType + ",baseuser " + szLongStringColumnType + ",basepassword " + szMediumStringColumnType + ",authentication " + szMediumStringColumnType + ", PRIMARY KEY (directoryserver))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after DIRECTORYLINK table creation ");

                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GADIRECTORYLINK Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //Added by krishna...July 14 ADSDetails table..DirectoryLinkTableDetails...


                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADSDETAILS + "(domainname " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,directoryserver " + szMediumStringColumnType + ",adsdomain " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,basecontext " + szLongStringColumnType + "NOT NULL PRIMARY KEY,userprefixcontext " + szLongStringColumnType + ",directoryport " + szMediumStringColumnType + ",authentication " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ADSDETAILS + "(domainname " + szMediumStringColumnType + " NOT NULL,directoryserver " + szMediumStringColumnType + ",adsdomain " + szMediumStringColumnType + ",basecontext " + szLongStringColumnType + ",userprefixcontext " + szLongStringColumnType + ",directoryport " + szMediumStringColumnType + ",authentication " + szMediumStringColumnType + ", PRIMARY KEY (domainname,adsdomain))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after DIRECTORYLINK table creation ");

                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GADIRECTORYLINK Table ");
                            System.err.println(sqle.getMessage());
                        }



                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OUTOFOFFICE + "(userid " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",fromdate " + szTimeStampColumnType + ",enddate " + szTimeStampColumnType + ",remarks " + szStringColumnType + ",assignto " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.OUTOFOFFICE + "(userid " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",fromdate " + szTimeStampColumnType + ",enddate " + szTimeStampColumnType + ",remarks " + szStringColumnType + ",assignto " + szMediumStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after DIRECTORYLINK table creation ");

                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GADIRECTORYLINK Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GAEventArchitecture
                        try
                        {
                            System.out.println("Gaevent architecture \n" + "CREATE TABLE " + DBConstants.EVENT_ARCHITECTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",event " + szMediumStringColumnType + ",rule " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",target " + szLongStringColumnType + ",precedence " + szIntegerColumnType + ",nextonmatch " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ")");
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.EVENT_ARCHITECTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",event " + szMediumStringColumnType + ",rule " + szMediumStringColumnType + ",action " + szMediumStringColumnType + ",target " + szLongStringColumnType + ",precedence " + szIntegerColumnType + ",nextonmatch " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GAEventArchitecture table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAEventArchitecture  Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }

                        // This is GARuleArchitecture
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.RULE_ARCHITECTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",ruleid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,rulename " + szMediumStringColumnType + ",field " + szMediumStringColumnType + ",formatch " + szMediumStringColumnType + ",value " + szMediumStringColumnType + ",operator " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.RULE_ARCHITECTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",ruleid " + szMediumStringColumnType + ",rulename " + szMediumStringColumnType + ",field " + szMediumStringColumnType + ",formatch " + szMediumStringColumnType + ",value " + szMediumStringColumnType + ",operator " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ",PRIMARY KEY (ruleid))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GARuleArchitecture table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GARuleArchitecture Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }

                        // This is GAUserTaskFilter
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TASK_FILTER_TABLE + " (user_id " + szMediumStringColumnType + ",filterid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,filtername " + szMediumStringColumnType + ",description " + szTextColumnType + ",filterstatus " + szMediumStringColumnType + ",duration " + szMediumStringColumnType + ",task_view " + szLongStringColumnType + ",assignee " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",defaultfilter " + szMediumStringColumnType + ",view_columns " + szLongStringColumnType + ",closetaskview " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TASK_FILTER_TABLE + " (user_id " + szMediumStringColumnType + ",filterid " + szMediumStringColumnType + ",filtername " + szMediumStringColumnType + ",description " + szTextColumnType + ",filterstatus " + szMediumStringColumnType + ",duration " + szMediumStringColumnType + ",task_view " + szLongStringColumnType + ",assignee " + szMediumStringColumnType + ",customerid " + szMediumStringColumnType + ",userid " + szMediumStringColumnType + ",defaultfilter " + szMediumStringColumnType + ",view_columns " + szLongStringColumnType + ",closetaskview " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ", PRIMARY KEY (filterid))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GAUserTaskFilter table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserTaskFilter Table ");
                            System.err.println(sqle.getMessage());
//				sqle.printStackTrace();
                        }
                        try
                        {
                            statement = con.prepareStatement("INSERT INTO " + DBConstants.USER_TASK_FILTER_TABLE + " VALUES('Admin','AdminHomeFilter','HomeFilter','Customized HomeFilter','On','7','All',null,'All','All','Yes','All','No','None','None',0)");
                            statement.executeUpdate();
                            statement.close();
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Inserting admin values to the GAUserTaskFilter Table ");
                            System.err.println(sqle.getMessage());
                        //sqle.printStackTrace();
                        }

                        // This is for the gausertaskquery table creation.
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TASK_QUERY_TABLE + " (user_id " + szMediumStringColumnType + ",queryid " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,queryname " + szMediumStringColumnType + ",description " + szTextColumnType + ",querystatus " + szMediumStringColumnType + ",task_type " + szLongStringColumnType + ",status " + szTextColumnType + ",priority " + szTextColumnType + ",category " + szTextColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ",attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + ",attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + ",attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + ",attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",defaultquery " + szMediumStringColumnType + ",param1 " + szLongStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ",param4 " + szTextColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.USER_TASK_QUERY_TABLE + " (user_id " + szMediumStringColumnType + ",queryid " + szMediumStringColumnType + ",queryname " + szMediumStringColumnType + ",description " + szTextColumnType + ",querystatus " + szMediumStringColumnType + ",task_type " + szLongStringColumnType + ",status " + szTextColumnType + ",priority " + szTextColumnType + ",category " + szTextColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + ",attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + ",attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + ",attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + ",attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + ",attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ",defaultquery " + szMediumStringColumnType + ",param1 " + szLongStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ",param4 " + szTextColumnType + ", PRIMARY KEY (queryid))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GAUserTaskquery table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAUserTaskquery Table ");
                            System.err.println(sqle.getMessage());
                        //sqle.printStackTrace();
                        }

                        // This is GAActivityReport
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ACTIVITY_REPORT_TABLE + " (attribute " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,status " + szMediumStringColumnType + ",width " + szMediumStringColumnType + ",linktable " + szMediumStringColumnType + ",linkcolumn " + szMediumStringColumnType + ",precedence " + szIntegerColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ACTIVITY_REPORT_TABLE + " (attribute " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",width " + szMediumStringColumnType + ",linktable " + szMediumStringColumnType + ",linkcolumn " + szMediumStringColumnType + ",precedence " + szIntegerColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",param3 " + szIntegerColumnType + ", PRIMARY KEY (attribute))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" this is after GAActivityReport table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GAActivityReport Table ");
                            System.err.println(sqle.getMessage());
                        //	sqle.printStackTrace();
                        }

                        // This is GABPStructure table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.BP_STRUCTURE_TABLE + " (bp_id  " + szIntegerColumnType + " NOT NULL PRIMARY KEY,title " + szMediumStringColumnType + ",description " + szTextColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.BP_STRUCTURE_TABLE + " (bp_id  " + szIntegerColumnType + " NOT NULL,title " + szMediumStringColumnType + ",description " + szTextColumnType + ",PRIMARY KEY (bp_id))");
                            }
                            statement.executeUpdate();
                            statement.close();
                            System.out.println(" This is after GABPStructure table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GABPStructure Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //GABPSecurity table...............................................................
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.BP_SECURITY_TABLE + " (bp_id " + szIntegerColumnType + ",role " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" this is after GABPSecurity table creation");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GABPSecurity Table ");
                            System.err.println(e.getMessage());
                        }

                        // This is GABPArticles table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.BP_ARTICLES_TABLE + " (bp_id  " + szIntegerColumnType + " NOT NULL,article_id " + szIntegerColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GABPArticles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GABpArticles Table ");
                            System.err.println(sqle.getMessage());
                        }
                        try
                        {

                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.BP_STRUCTURE_FILES_TABLE + " (bp_id " + szMediumStringColumnType + ",fileid " + szMediumStringColumnType + ",filename " + szMediumStringColumnType + ",filevalue " + szBinaryColumnType + ",filecontent " + szMediumStringColumnType + ",filesize " + szMediumStringColumnType + ",filedate " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            statement.close();

                            System.out.println(" this is after gabpstructurefiles table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the gabpstructurefiles Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //gastatusstatemachine...to avoid rorouting of status we created..
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUSSTATEMACHINE_TABLE + " (statusid  " + szStringColumnType + ",validstatus " + szStringColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUSSTATEMACHINE_TABLE + " (statusid  " + szStringColumnType + ",validstatus " + szStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GABusinessUnit table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GABusinessUnit Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //This is Business Unit Table creation
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.BUSINESS_UNIT_TABLE + " (bu_name  " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,centre_type " + szMediumStringColumnType + ",description " + szLongStringColumnType + ",contact_person " + szMediumStringColumnType + ",attributes1 " + szMediumStringColumnType + ",attributes2 " + szMediumStringColumnType + ",attributes3 " + szMediumStringColumnType + ",attributes4 " + szMediumStringColumnType + ",attributes5 " + szIntegerColumnType + ")");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.BUSINESS_UNIT_TABLE + " (bu_name  " + szMediumStringColumnType + " NOT NULL,centre_type " + szMediumStringColumnType + ",description " + szLongStringColumnType + ",contact_person " + szMediumStringColumnType + ",attributes1 " + szMediumStringColumnType + ",attributes2 " + szMediumStringColumnType + ",attributes3 " + szMediumStringColumnType + ",attributes4 " + szMediumStringColumnType + ",attributes5 " + szIntegerColumnType + ",PRIMARY KEY (bu_name))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after GABusinessUnit table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GABusinessUnit Table ");
                            System.err.println(sqle.getMessage());
                        }

                        //This is Task type Business Unit Table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_BUSINESSUNIT_TABLE + " (tasktype " + szMediumStringColumnType + ",bu_name  " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GATaskTypeBusinessUnit table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeBusinessUnit Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // Comments Added by : Prasad P on 4-Dec-2003, gastatusgroup table. This table is created to associate status to groups when they are added.
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_GROUP_TABLE + " (tasktype " + szMediumStringColumnType + ",status  " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gastatusgroup table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : creating the gastatusgroup Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GASLAtype table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_TYPE_TABLE + " (task_type " + szMediumStringColumnType + ",field_name " + szMediumStringColumnType + " NOT NULL,field_type " + szMediumStringColumnType + " NOT NULL,field_value " + szStringColumnType + ",location " + szIntegerColumnType + ",task_end " + szMediumStringColumnType + ",task_begin " + szMediumStringColumnType + ",key_column " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GASLAtype table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating the GASLAtype Table ");
                            System.err.println(sqle.getMessage());
                        }

                        // This is GASLAcustomer table creation
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.SLA_CUSTOMER_TABLE + " (customer_name " + szMediumStringColumnType + " NOT NULL,task_type " + szMediumStringColumnType + " NOT NULL,attributes1 " + szMediumStringColumnType + ",attributes2 " + szMediumStringColumnType + ",attributes3 " + szMediumStringColumnType + ",attributes4 " + szMediumStringColumnType + ",attributes5 " + szMediumStringColumnType + ",attributes6 " + szMediumStringColumnType + ",attributes7 " + szMediumStringColumnType + ",attributes8 " + szMediumStringColumnType + ",attributes9 " + szMediumStringColumnType + ",attributes10 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after GASLAcustomer table creation ");
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Creating the GASLAcustomer Table ");
                            System.err.println(sqle.getMessage());
                        }

                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASKTYPE_FORM_STRUCTURE_TABLE + " (tasktype " + szMediumStringColumnType + ",attribute_name " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ",attributetype " + szMediumStringColumnType + ",attributevalue " + szMediumStringColumnType + ",location " + szIntegerColumnType + ",required_check " + szIntegerColumnType + ",attribute_pos " + szIntegerColumnType + ",tooltip_message " + szTextColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gatasktypeformstructer creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskTypeFormStructure Table ");
                            System.err.println(e.getMessage());
                        }
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_FORM_TABLE + " (task_id " + szMediumStringColumnType + " NOT NULL,task_type " + szMediumStringColumnType + ",attribute_name " + szMediumStringColumnType + ",attributes1 " + szTextColumnType + ",attributes2 " + szTextColumnType + ",attributes3 " + szTextColumnType + ",attributes4 " + szTextColumnType + "," + "attributes5 " + szTextColumnType + ",attributes6 " + szTextColumnType + ",attributes7 " + szTextColumnType + ",attributes8 " + szTextColumnType + ",attributes9 " + szTextColumnType + ",attributes10 " + szTextColumnType + "," + "attributes11 " + szTextColumnType + ",attributes12 " + szTextColumnType + ",attributes13 " + szTextColumnType + ",attributes14 " + szTextColumnType + ",attributes15 " + szTextColumnType + ",attributes16 " + szTextColumnType + "," + "attributes17 " + szTextColumnType + ",attributes18 " + szTextColumnType + ",attributes19 " + szTextColumnType + ",attributes20 " + szTextColumnType + ",attributes21 " + szTextColumnType + ",attributes22 " + szTextColumnType + "," + "attributes23 " + szTextColumnType + ",attributes24 " + szTextColumnType + ",attributes25 " + szTextColumnType + ",attributes26 " + szTextColumnType + ",attributes27 " + szTextColumnType + ",attributes28 " + szTextColumnType + "," + "attributes29 " + szTextColumnType + ",attributes30 " + szTextColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gataskform creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskForm Table ");
                            System.err.println(e.getMessage());
                        }
                        try
                        {
                            /*
                            statement = con.prepareStatement("INSERT INTO "+DBConstants.ACTIVITY_REPORT_TABLE+" VALUES('Updated Time','On','20','History Table','updated_time',1,'None','None',0)");
                            statement.executeUpdate();
                            statement = con.prepareStatement("INSERT INTO "+DBConstants.ACTIVITY_REPORT_TABLE+" VALUES('Updated Time','On','15','History Table','updated_time',1,'None','None',0)");
                            statement.executeUpdate();
                            statement = con.prepareStatement("INSERT INTO "+DBConstants.ACTIVITY_REPORT_TABLE+" VALUES('Updated Time','On','15','History Table','updated_time',1,'None','None',0)");
                            statement.executeUpdate();
                            statement = con.prepareStatement("INSERT INTO "+DBConstants.ACTIVITY_REPORT_TABLE+" VALUES('Updated Time','On','15','History Table','updated_time',1,'None','None',0)");
                            statement.executeUpdate();
                            statement.close();		*/
                        } catch (Exception sqle)
                        {
                            System.out.println(" EXCEPTION : Inserting admin values to the GAUserTaskFilter Table ");
                            System.err.println(sqle.getMessage());
                        //sqle.printStackTrace();
                        }

                        // This is for the gataskreport generation. Dated :19-02-2003
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_REPORT_TABLE + " (report_id " + szMediumStringColumnType + " NOT NULL PRIMARY KEY,report_name " + szMediumStringColumnType + ",report_file " + szMediumStringColumnType + ",Description " + szMediumStringColumnType + ",attribute1 " + szMediumStringColumnType + ",attribute2 " + szMediumStringColumnType + ",attribute3 " + szMediumStringColumnType + ",attribute4 " + szMediumStringColumnType + ",attribute5 " + szMediumStringColumnType + ",attribute6 " + szMediumStringColumnType + ",attribute7 " + szMediumStringColumnType + ",attribute8 " + szMediumStringColumnType + ",attribute9 " + szMediumStringColumnType + ",attribute10 " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_REPORT_TABLE + " (report_id " + szMediumStringColumnType + ",report_name " + szMediumStringColumnType + ",report_file " + szMediumStringColumnType + ",Description " + szMediumStringColumnType + ",attribute1 " + szMediumStringColumnType + ",attribute2 " + szMediumStringColumnType + ",attribute3 " + szMediumStringColumnType + ",attribute4 " + szMediumStringColumnType + ",attribute5 " + szMediumStringColumnType + ",attribute6 " + szMediumStringColumnType + ",attribute7 " + szMediumStringColumnType + ",attribute8 " + szMediumStringColumnType + ",attribute9 " + szMediumStringColumnType + ",attribute10 " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ",PRIMARY KEY (report_id))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gataskreport creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskReport Table ");
                            System.err.println(e.getMessage());
                        } finally
                        {
                            try
                            {
                                String szContent = "Select * from gataskreport";
                                statement = con.prepareStatement(szContent);
                                System.out.println("In gataskreport creation..." + statement);
                                ResultSet rs = statement.executeQuery();

                                if (!rs.next())
                                {
                                    System.out.println("In gataskreport Inserting values...");

                                    String szRepSQL = "INSERT INTO " + DBConstants.TASK_REPORT_TABLE + " (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP01', 'Task Created Report', 'TaskCreatedReport.jasper', 'This is task creation report', 'customername', 'startdate', 'enddate', '', '', '', '', '', '', '', 'None', 'None')";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "";
                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP02', 'AllCustomerReport', 'AllCustomerReport.jasper', 'All Customer Report', 'startdate', 'enddate', '', '', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP03', 'TaskAttributeReport', 'TaskAttribute.jasper', 'Configuration for taskAttribute', '', '', '', '', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP04', 'CustomerAll TaskType Report', 'CustomerAllTaskTypeReport.jasper', 'CustomerAll TaskType Report', 'customername', 'startdate', 'enddate', '', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP05', 'Assignee Productivity Report', 'AssigneeProductivityReport.jasper', 'Assignee Productivity Report', 'customername', 'startdate', 'enddate', '', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('REP06', 'Priority report', 'TaskPriorityReport.jasper', 'Priority Report', 'customername', 'priority', 'startdate', 'enddate', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('1001', 'CustomerTaskCreatedReport', 'TaskCreatedReport.jasper', 'Customer specific task created report', 'customername', 'startdate', 'enddate', '', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('1005', 'statusReport', 'TaskStatusReport.jasper', 'Staus Report customer based', 'customername', 'status', 'startdate', 'enddate', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                    szRepSQL = "INSERT INTO gataskreport (report_id, report_name, report_file, description, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9, attribute10, param1, param2) VALUES ('1007', 'Task Assignement Report', 'TaskAssignmentReport.jasper', 'Task Assignement Report', 'customername', 'assignee', 'startdate', 'enddate', '', '', '', '', '', '', 'None', 'None');";
                                    statement = con.prepareStatement(szRepSQL);
                                    statement.execute();

                                }
                            } catch (Exception e)
                            {
                                System.out.println("Error->This is in gataskreport creation...");
                            }
                        }

                        // This is for the gataskreportsecurity generation. Dated :19-02-2003
                        try
                        {
                            statement = con.prepareStatement("CREATE TABLE " + DBConstants.TASK_REPORT_SECURITY_TABLE + " (report_id " + szMediumStringColumnType + ",groups " + szMediumStringColumnType + ",security_level " + szMediumStringColumnType + ",param1 " + szMediumStringColumnType + ",param2 " + szMediumStringColumnType + ")");
                            statement.executeUpdate();
                            System.out.println(" This is after gataskreportsecurity creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the GATaskReportSecurity Table ");
                            System.err.println(e.getMessage());
                        }


                        //2/15/2010
                        //CREATE TABLE gachecklistattribute (   tasktype character varying(255),  status character varying(255),  attribute character varying,   "type" character varying(255),   "value" character varying,   attributepos integer,  requiredcheck character varying)

                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CHECKLIST_TABLE + " (tasktype " + szMediumStringColumnType + " NOT NULL ,status " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ",\"type\" " + szMediumStringColumnType + ",value " + szMediumStringColumnType + ",attributepos " + szIntegerColumnType + ",requiredcheck " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.CHECKLIST_TABLE + " (tasktype " + szMediumStringColumnType + ",status " + szMediumStringColumnType + ",attribute " + szMediumStringColumnType + ",type " + szMediumStringColumnType + ",value " + szMediumStringColumnType + ",attributepos " + szIntegerColumnType + ",requiredcheck " + szStringColumnType + ",PRIMARY KEY (tasktype,status))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gachecklistattribute creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gachecklistattribute Table ");
                            System.err.println(e.getMessage());
                        }

                        //TASK_CHECKLIST_TABLE
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                //	statement = con.prepareStatement("CREATE TABLE "+DBConstants.TASK_CHECKLIST_TABLE+" (taskid "+szMediumStringColumnType+" NOT NULL ,checklistid "+szMediumStringColumnType+",version "+szIntegerColumnType+",attribute1 "+szStringColumnType+",attribute2 "+szStringColumnType+",attribute3 "+szStringColumnType+",attribute4 "+szStringColumnType+",attribute5 "+szStringColumnType+",attribute6 "+szStringColumnType+",attribute7 "+szStringColumnType+",attribute8 "+szStringColumnType+",attribute9 "+szStringColumnType+",attribute10 "+szStringColumnType+",attribute11 "+szStringColumnType+",attribute12 "+szStringColumnType+",attribute13 "+szStringColumnType+",attribute14 "+szStringColumnType+",attribute15 "+szStringColumnType+",attribute16 "+szStringColumnType+",attribute17 "+szStringColumnType+",attribute18 "+szStringColumnType+",attribute19 "+szStringColumnType+",attribute20 "+szStringColumnType+",attribute21 "+szStringColumnType+",attribute22 "+szStringColumnType+",attribute23 "+szStringColumnType+",attribute24 "+szStringColumnType+",attribute25 "+szStringColumnType+",attribute26 "+szStringColumnType+",attribute27 "+szStringColumnType+",attribute28 "+szStringColumnType+",attribute29 "+szStringColumnType+",attribute30 "+szStringColumnType+ +",createdon "+szTimeStampColumnType+",createdby "+szMediumStringColumnType+",modifiedon "+szTimeStampColumnType+", modifiedby "+szMediumStringColumnType+", allfilled"+szMediumStringColumnType+") IN TBSPC123");
                            } else
                            {
                                //String szQRY="CREATE TABLE "+DBConstants.TASK_CHECKLIST_TABLE+" (taskid "+szMediumStringColumnType+",checklistid "+szMediumStringColumnType+",version "+szIntegerColumnType+",attribute1 "+szStringColumnType+",attribute2 "+szStringColumnType+",attribute3 "+szStringColumnType+",attribute4 "+szStringColumnType+",attribute5 "+szStringColumnType+",attribute6 "+szStringColumnType+",attribute7 "+szStringColumnType+",attribute8 "+szStringColumnType+",attribute9 "+szStringColumnType+",attribute10 "+szStringColumnType+",attribute11 "+szStringColumnType+",attribute12 "+szStringColumnType+",attribute13 "+szStringColumnType+",attribute14 "+szStringColumnType+",attribute15 "+szStringColumnType+",attribute16 "+szStringColumnType+",attribute17 "+szStringColumnType+",attribute18 "+szStringColumnType+",attribute19 "+szStringColumnType+",attribute20 "+szStringColumnType+",attribute21 "+szStringColumnType+",attribute22 "+szStringColumnType+",attribute23 "+szStringColumnType+",attribute24 "+szStringColumnType+",attribute25 "+szStringColumnType+",attribute26 "+szStringColumnType+",attribute27 "+szStringColumnType+",attribute28 "+szStringColumnType+",attribute29 "+szStringColumnType+",attribute30 "+szStringColumnType+ +",createdon "+szTimeStampColumnType+",createdby "+szMediumStringColumnType+",modifiedon "+szTimeStampColumnType+", modifiedby "+szMediumStringColumnType+", allfilled"+szMediumStringColumnType+",PRIMARY KEY (taskid,checklistid,version))";
                                String szQRY = "CREATE TABLE " + DBConstants.TASK_CHECKLIST_TABLE + " (taskid " + szMediumStringColumnType + ",checklistid " + szMediumStringColumnType + ",version " + szIntegerColumnType + ",attribute1 " + szStringColumnType + ",attribute2 " + szStringColumnType + ",attribute3 " + szStringColumnType + ",attribute4 " + szStringColumnType + ",attribute5 " + szStringColumnType + ",attribute6 " + szStringColumnType + ",attribute7 " + szStringColumnType + ",attribute8 " + szStringColumnType + ",attribute9 " + szStringColumnType + ",attribute10 " + szStringColumnType + ",attribute11 " + szStringColumnType + ",attribute12 " + szStringColumnType + ",attribute13 " + szStringColumnType + ",attribute14 " + szStringColumnType + ",attribute15 " + szStringColumnType + ",attribute16 " + szStringColumnType + ",attribute17 " + szStringColumnType + ",attribute18 " + szStringColumnType + ",attribute19 " + szStringColumnType + ",attribute20 " + szStringColumnType + ",attribute21 " + szStringColumnType + ",attribute22 " + szStringColumnType + ",attribute23 " + szStringColumnType + ",attribute24 " + szStringColumnType + ",attribute25 " + szStringColumnType + ",attribute25 " + szStringColumnType + ",attribute27 " + szStringColumnType + ",attribute26 " + szStringColumnType + ",attribute29 " + szStringColumnType + ",attribute30 " + szStringColumnType + ",createdon " + szTimeStampColumnType + ",createdby " + szMediumStringColumnType + ",modifiedon " + szTimeStampColumnType + ", modifiedby " + szMediumStringColumnType + ", allfilled" + szMediumStringColumnType + ",PRIMARY KEY (taskid,checklistid,version))";
                                //statement = con.prepareStatement("CREATE TABLE "+DBConstants.TASK_CHECKLIST_TABLE+" (taskid "+szMediumStringColumnType+",checklistid "+szMediumStringColumnType+",version "+szIntegerColumnType+",attribute1 "+szStringColumnType+",attribute2 "+szStringColumnType+",attribute3 "+szStringColumnType+",attribute4 "+szStringColumnType+",attribute5 "+szStringColumnType+",attribute6 "+szStringColumnType+",attribute7 "+szStringColumnType+",attribute8 "+szStringColumnType+",attribute9 "+szStringColumnType+",attribute10 "+szStringColumnType+",attribute11 "+szStringColumnType+",attribute12 "+szStringColumnType+",attribute13 "+szStringColumnType+",attribute14 "+szStringColumnType+",attribute15 "+szStringColumnType+",attribute16 "+szStringColumnType+",attribute17 "+szStringColumnType+",attribute18 "+szStringColumnType+",attribute19 "+szStringColumnType+",attribute20 "+szStringColumnType+",attribute21 "+szStringColumnType+",attribute22 "+szStringColumnType+",attribute23 "+szStringColumnType+",attribute24 "+szStringColumnType+",attribute25 "+szStringColumnType+",attribute26 "+szStringColumnType+",attribute27 "+szStringColumnType+",attribute28 "+szStringColumnType+",attribute29 "+szStringColumnType+",attribute30 "+szStringColumnType+ +",createdon "+szTimeStampColumnType+",createdby "+szMediumStringColumnType+",modifiedon "+szTimeStampColumnType+", modifiedby "+szMediumStringColumnType+", allfilled"+szMediumStringColumnType+",PRIMARY KEY (taskid,checklistid,version))");
                               System.out.println("Task Checklist table query:"+szQRY);
                                statement = con.prepareStatement(szQRY);
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gataskchecklist creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gataskchecklist Table ");
                            System.err.println(e.getMessage());
                        }

                        //STATUS_ASSIGNMENT_TABLE
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_ASSIGNMENT_TABLE + " (status " + szMediumStringColumnType + " NOT NULL ,groupname " + szMediumStringColumnType + ",assignetype " + szMediumStringColumnType + ",assignee " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",assign_within_reporting_hierarchy " + szMediumStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_ASSIGNMENT_TABLE + " (status " + szMediumStringColumnType + ",groupname " + szMediumStringColumnType + ",assignetype " + szMediumStringColumnType + ",assignee " + szMediumStringColumnType + ",tasktype " + szMediumStringColumnType + ",assign_within_reporting_hierarchy " + szMediumStringColumnType + ")");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gastatusassignment creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gastatusassignment Table ");
                            System.err.println(e.getMessage());
                        }

                        //STATUS_HISTORY_TABLE
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_HISTORY_TABLE + " (taskid " + szMediumStringColumnType + " NOT NULL ,revision " + szIntegerColumnType + " NOT NULL, statusfrom" + szMediumStringColumnType + ",statusto " + szMediumStringColumnType + ",startdate " + szTimeStampColumnType + ",inserted_by  " + szMediumStringColumnType + ",enddate " + szTimeStampColumnType + ",updated_by " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_HISTORY_TABLE + " (taskid " + szMediumStringColumnType + " NOT NULL ,revision " + szIntegerColumnType + " NOT NULL, statusfrom" + szMediumStringColumnType + ",statusto " + szMediumStringColumnType + ",startdate " + szTimeStampColumnType + ",inserted_by  " + szMediumStringColumnType + ",enddate " + szTimeStampColumnType + ",updated_by " + szStringColumnType + ",PRIMARY KEY (taskid,statusfrom,revision))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gastatushistory creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gastatushistory Table ");
                            System.err.println(e.getMessage());
                        }

                        //STATUS_STATEMACHINE_TABLE
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_STATEMACHINE_TABLE + " (statusid " + szMediumStringColumnType + " NOT NULL ,validstatus " + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.STATUS_STATEMACHINE_TABLE + " (statusid " + szMediumStringColumnType + " NOT NULL ,validstatus " + szStringColumnType + ",PRIMARY KEY (statusid))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gastatusstatemachine creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gastatusstatemachine Table ");
                            System.err.println(e.getMessage());
                        }


                        //ASSIGNMENT_HISTORY_TABLE
                        try
                        {
                            if ("IBM DB2".equalsIgnoreCase(szDatabaseName))
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ASSIGNMENT_HISTORY_TABLE + " (taskid " + szMediumStringColumnType + " NOT NULL ,revision " + szIntegerColumnType + " NOT NULL, assigneename" + szMediumStringColumnType + ",startdate " + szTimeStampColumnType + ",enteredby " + szMediumStringColumnType + ",enddate  " + szTimeStampColumnType + ",updatedby" + szStringColumnType + ") IN TBSPC123");
                            } else
                            {
                                statement = con.prepareStatement("CREATE TABLE " + DBConstants.ASSIGNMENT_HISTORY_TABLE + " (taskid " + szMediumStringColumnType + " NOT NULL ,revision " + szIntegerColumnType + " NOT NULL, assigneename" + szMediumStringColumnType + ",startdate " + szTimeStampColumnType + ",enteredby " + szMediumStringColumnType + ",enddate  " + szTimeStampColumnType + ",updatedby " + szStringColumnType + ",PRIMARY KEY (taskid,assigneename,revision))");
                            }
                            statement.executeUpdate();
                            System.out.println(" This is after gaassignmenthistory creation...");
                        } catch (Exception e)
                        {
                            System.out.println(" EXCEPTION : creating the gaassignmenthistory Table ");
                            System.err.println(e.getMessage());
                        }

                        try
                        {
                            opStatus="0";
                            opDescription="Database created successfully";
                           // request.setAttribute("NextScreen", "/jsp/GIFT_GARegistrationDetails.jsp");
                        } catch (Exception e)
                        {
                            e.printStackTrace();
                        }

                    }
                } else
                {
                    opStatus = "113";
                    opDescription = "Key Validation failed";
                }
            } else
            {
                opStatus = "108";
                opDescription = "Invalid inputs";
            }

        } catch (Exception e)
        {
            e.printStackTrace();

        } finally
        {
            try
            {
                if (con != null)
                {
                    con.close();
                }
            } catch (Exception e)
            {
                e.printStackTrace();
            }
        }







        try
        {
            results.append("<status>\n");
            results.append("<code>\n");
            results.append(opStatus);
            results.append("</code>\n");
            results.append("<Description>\n");
            results.append(opDescription);
            results.append("</Description>\n");
            results.append("</status>\n");
            results.append("</databasecreation>");
            response.getWriter().write(results.toString());
        //System.out.println(results);
        } catch (Exception e)
        {
            LogWriter.writeDebug("exception while writing output");
        } finally
        {
            results = null;
        }









    }

    public int _XXXValidateKeys(java.lang.String szKey1, java.lang.String szKey2)
    {
        GA_KEY_INFORMATION KEY_INFORMATION = new GA_KEY_INFORMATION();
        GA_CreateKeys ck2 = new GA_CreateKeys();

        StringBuffer szKey1Buffer = new StringBuffer(szKey1);
        StringBuffer szKey2Buffer = new StringBuffer(szKey2);

        KEY_INFORMATION.szKey1 = szKey1Buffer;
        KEY_INFORMATION.szKey2 = szKey2Buffer;

        iValidate = ck2.XXXValidateKeys(KEY_INFORMATION, 1);
        System.out.println(" ivalidate here is ..." + iValidate);
        return iValidate;
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo()
    {
        return "Short description";
    }// </editor-fold>
}
