/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.prokosha.adapter.ganglia;

import java.io.*;
import java.util.*;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

/**
 *
 * @author gopal
 */
public class GangliaDogwatchTest {


    private static final Logger log = Logger.getLogger(GangliaDogwatchTest.class.getName());
    private String propertyFile;
    private String gHost;
    private int gPort;
    private String agmondHost[];
    private String agmondPort[];
    private GangliaXmlCollectorMap gCollectorMap;
    //watchdog variables 5-4-13
    private String watchDogHost;
    private int watchDogPort;

    public GangliaDogwatchTest(String propertyFileName) {
        //log.debug("Constructing  GangliaAdapter...");
        System.out.println("Constructing  GangliaAdapter...");
        this.propertyFile = propertyFileName;
    }

    public boolean initialize() {

        log.debug("Loading GangliaAdapter properties from property file: " + propertyFile);
        try {
            if (!AdapterProperties.loadProperties(propertyFile)) {
                //log.error("*** ERROR *** Coould not load the adapter properties correctly...");
                return false;
            } else {
                agmondHost = AdapterProperties.getaRgmondHost();
                agmondPort = AdapterProperties.getaRgmondPort();

                //watchdog parameters
                watchDogHost = AdapterProperties.getWatchDogHost();
                watchDogPort = AdapterProperties.getWatchDogPort();



                gCollectorMap = new GangliaXmlCollectorMap(agmondHost, agmondPort);
                //log.debug("GangliaAdapter properties loaded successfully!!");
                System.out.println("GangliaAdapter properties loaded successfully!!");
                return true;
            }
        } catch (IOException ex) {
            //log.error("*** ERROR **** error while loading adapter properties: \n" + ex);
            return false;
        }

    }

    public void mainLoop() {

        //log.debug("Entering Ganglia adapter mainloop...");

        //set up the CEP engine connector to package and send CEP events
        /*CepEngineConnector.initialize();
        log.debug("Connecting to CEP engine....");
        if (!CepEngineConnector.isCepReady()) {
        log.error("Some error occurred while connecting to CEP engine. Will retry later...");
        }*/

        //set up the Ganglia XML parser and NodeWatcher to create CEP events



        /*EventMapperXmlDocParser eventMapper = new EventMapperXmlDocParser();
        try {
        eventMapper.parseDocument(AdapterProperties.getEventMapper());
        } catch (Exception ex) {
        log.error("Ganglia adapter error while parsing event mapper XML. Exiting......\n" + ex);
        return;
        }*/





        // setup the Ganglia XML document parser


       // GmondXmlDocParser gangliaParser = new GmondXmlDocParser();


        //setup the Ganglia XML downloader
        //log.debug("Setting up the GangliaXmlCollector...");
        //int moreRetries = AdapterProperties.getRetryCount() + 1;
        //increment for at least one try

        //makes a list<GangliaXmlCollector> here and pass array of ghost and gport
        //GangliaXmlCollector gCollector = new GangliaXmlCollector(gHost, gPort);

        boolean forever = true;
        //while (forever && (moreRetries > 0)) {
            while(true){
            //StringBuffer xmlBuff = new StringBuffer(AdapterProperties.getXmlBuffSize());

            //DEBUG TEST START- comment from here onwards
            //download the Ganglia XML
            //log.debug("Download ganglia XML doc...");
            //iterate aloop of for(GangliaXmlCollector gCollector : list<GangliaXmlCollector>){}
            /*Collection<GangliaXmlCollector> coll = gCollectorMap.getListGangliaXmlCollector().values();
                for (GangliaXmlCollector gCollector : coll) {
                if (!gCollector.download(xmlBuff)) { //error while downloading
                moreRetries--; //decrement counter
                log.error("*** ERROR **** Error while downloading ganglia XML document.");
                if (moreRetries > 0) {
                log.error("Will retry download again later...");
                } else {
                log.fatal("*** FATAL ERROR *** Re-tried " + AdapterProperties.getRetryCount()
                + " times to reconnect to Ganglia at server(" + gHost
                + ") and port {" + gPort + ")");
                log.fatal("*** FATAL ERROR *** Giving up... Ganglia Adapter terminating.....");
                }
                } else { //download successfull
                moreRetries = AdapterProperties.getRetryCount() + 1; //reset retry counter
                //parse XML and send events to CEP
                gangliaParser.parseDocFromBuffer(xmlBuff);
                }
                }*/
            //DEBUG TEST END- comment until here

            /*
             * TO DEBUG WITHOUT GANGLIA
             *  - comment out all lines above tagged from DEBUG TEST START to DEBUG TEST END
             *  - uncomment line below tagged DEBUG FROM FILE
             *  - execute this class
             */

            /*
            gangliaParser.parseDocFromFile("./config/gmond-xml-money.xml"); //DEBUG FROM FILE
             */

            //now sleep for sometime before next download
            try {

                //sending watchdog event message
                //set up the CEP engine connector to package and send CEP events
                if(AdapterProperties.sendToWatchDog()){
                System.out.println("initializing dogwatch");
                WatchDogEventConnector.initialize();
                System.out.println("Connecting to WatchDog....");
                //log.debug("Connecting to WatchDog....");
                if (!WatchDogEventConnector.isWatchDogReady()) {
                    //log.error("Some error occurred while connecting to WatchDog. Will retry later...");
                    System.out.println("Some error occurred while connecting to WatchDog. Will retry later...");
                }else{
                            
                            WatchDogEventConnector.sendMessage("type=gmetad:192.168.1.55:8649,status=Alive");
                            //log.info("dogwatch event sent successfully");
                            System.out.println("dogwatch event sent successfully::"+"type=gmetad:192.168.1.55:8649,status=Alive");

                }}
               // xmlBuff = null; //offer the memory for garbage collection
                //Thread.sleep(AdapterProperties.getSleepInterval());
                Thread.sleep(20000);

            } catch (InterruptedException ex) {
               // log.error("Ganglia adapter sleep between XML downloads interrupted. Exiting......\n", ex);
                forever = false;
            }
        }

    }

    public static void main(String[] args) {

        //setup the logger properties
        PropertyConfigurator.configure("config/logger.properties");

        //TODO: pass the property file name as a program argument
        GangliaDogwatchTest ganglia = new GangliaDogwatchTest("config/gangliaadapter.properties");
        System.out.println("initialized");
        if (ganglia.initialize()) {
            
            ganglia.mainLoop();
        } else {
            //log.error("Could not start Ganglia adapter properly. Exiting.....");
            System.out.println("Could not start Ganglia adapter properly. Exiting.....");
            System.exit(1);
        }
    }
}
