/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.prokosha.adapter.ganglia;

import java.util.HashMap;
import java.util.Set;
import java.util.Iterator;
import org.apache.log4j.Logger;
import com.prokosha.adapter.etl.ETLAdapter.*;

/**
 *
 * @author Abraham
 */
public class GangliaCepEvent implements GangliaNodeListener {

    private static final Logger log = Logger.getLogger(GangliaCepEvent.class.getName());
    private String streamName;
    private HashMap<String, String> cepFieldValueMap;
    private HashMap<String, String> cepFieldTypeMap;
    private HashMap<String, String> hostNodeNameFieldMap;
    private HashMap<String, String> metricNodeNameFieldMap;
    private HashMap<String, String> fieldValAttrNameMap;
    private boolean evDefined;
    private boolean evDone;
    private String containerNode;

    /***
     *  EVENT CREATED AND DEFINITION FROM EVENT MAPPER XML FILE
     */
    public GangliaCepEvent() {

        containerNode = null;
        streamName = null;
        evDefined = false;
        evDone = false;
        cepFieldTypeMap = new HashMap<String, String>(); //(fieldName, Type) pairs
        cepFieldValueMap = new HashMap<String, String>();  //(fieldName, Value) pairs
        hostNodeNameFieldMap = new HashMap<String, String>();//HOST node NAME attribute to fieldName mapper
        metricNodeNameFieldMap = new HashMap<String, String>();//METRIC node NAME attribute to fieldName mapper
        fieldValAttrNameMap = new HashMap<String, String>();
    }

    public boolean initialize(String node, String name) {
        if ((node == null) || (node.trim().length() == 0)) {
            log.error("*** ERROR *** Container node is specified as (null) in event mapper XML file");
            return false;
        } else {
            containerNode = node;
        }

        if ((name == null) || (name.trim().length() == 0)) {
            log.error("*** ERROR *** Node name is specified as (null) in event mapper XML file");
            return false;
        } else {
            streamName = name;
        }
        return true;
    }

    public String getEventName() {
        return streamName;
    }

    public void setDefined() {
        evDefined = true;
    }

    public boolean isDefined() {
        return evDefined;
    }

    //store information from EventMapper XML
    public boolean setEventParameter(String evField, String evType, String gNode, String gName, String gVal) {

        if ((evField == null) || (evType == null) || (gNode == null) || (gName == null) || (gVal == null)
                || (evField.trim().length() == 0) || (evType.trim().length() == 0)
                || (gNode.trim().length() == 0) || (gName.trim().length() == 0) || (gVal.trim().length() == 0)) {
            log.error("*** ERROR *** Some event parameters are (null) or empty in event mapper XML file");
            return false;
        }

        //map the Ganglia NAME (gName) to the CEP evField. We treat HOSt node slightly different.
        if (gNode.equals("HOST")) {
            hostNodeNameFieldMap.put(gName, evField);
            //register with NodeWatcher for callbacks while processing Ganglia XML
            // for HOST nodes we register only one listener since all parameters are in same HOST node
            NodeWatcher.addListener(gNode, "*", this);
        }
        if (gNode.equals("METRIC")) {
            metricNodeNameFieldMap.put(gName, evField);
            //register with NodeWatcher for callbacks while processing Ganglia XML
            NodeWatcher.addListener(gNode, gName, this);
        }

        //map the CEP evField to Ganglia nodes value attribute
        fieldValAttrNameMap.put(evField, gVal);

        //map the CEP evField to data type for CEP event
        cepFieldTypeMap.put(evField, evType);

        return true;
    }

    public void prettyPrintDefinition() {
        StringBuffer sbuf = new StringBuffer();

        sbuf.append("\n\n------------- Ganglia CEP event definition ---------------\n");
        sbuf.append("\tEvent CEP Stream Name: " + streamName + "  Container Node: " + containerNode + "\n");
        sbuf.append("\tNo of parameters in event: " + (hostNodeNameFieldMap.size() + metricNodeNameFieldMap.size()) + "\n");

        Set keys = hostNodeNameFieldMap.keySet();
        Iterator index = keys.iterator();
        String key, field;
        while (index.hasNext()) {
            key = (String) index.next();
            field = hostNodeNameFieldMap.get(key);
            sbuf.append("\t\tHOST:: ").append(key).append(" = ").append(field);
            sbuf.append("\tValue from: ").append(fieldValAttrNameMap.get(field));
            sbuf.append("\tCEP data type: ").append(cepFieldTypeMap.get(field)).append("   \n");
        }

        keys = metricNodeNameFieldMap.keySet();
        index = keys.iterator();
        while (index.hasNext()) {
            key = (String) index.next();
            field = metricNodeNameFieldMap.get(key);
            sbuf.append("\t\tMETRIC:: ").append(key).append(" = ").append(field);
            sbuf.append("\tValue from: ").append(fieldValAttrNameMap.get(field));
            sbuf.append("\tCEP data type: ").append(cepFieldTypeMap.get(field)).append("   \n");
        }

        log.debug(sbuf);
    }

    /***
     *  EVENT POPULATION FROM GANGLIA XML FILE
     */
    private void setReady() {

        /*
        //iterate through the event and set all null fields to the correct default values.
        Iterator index = cepFieldValueMap.keySet().iterator();
        String key, val;
        while (index.hasNext()) {
        key = (String) index.next();
        val = setDefaultIfNull(cepFieldValueMap.get(key), cepFieldTypeMap.get(key));
        cepFieldValueMap.put(key, val);
        }
         */
        // the event is now ready for dispatch!!
        evDone = true;
    }

    public boolean isReady() {
        return evDone;
    }

    //TODO:: Find out all the Esper supported event data types and add if-else clauses for them!!
    private String setDefaultIfNull(String val, String type) {
        if ((val == null) || (val.trim().length() == 0)) {
            if (type.toLowerCase().equals("string")) {
                val = "(null)";
            } else if (type.toLowerCase().equals("float") || type.toLowerCase().equals("double")) {
                val = "-1.1";
            } else if (type.toLowerCase().equals("int")) {
                val = "-1";
            }
        }
        return val;
    }

    // populated by GangliaXml parser listeners
    private boolean addEventParameter(String name, String val/*, String type*/) {
        String tmp;

        //if the name is invalid do not send it to CEP
        if ((name == null) || (name.trim().length() == 0)) {
            return false;
        }

        //set up default values - use the type from the event mapper rather than from Ganglia XML since we want it
        //to match the type specified in the CEP event schema
        val = setDefaultIfNull(val, cepFieldTypeMap.get(name));

        //check if we are overwriting the event parameter - if yes, log error but continue
        tmp = cepFieldValueMap.put(name, val);
        if (tmp != null) {
            log.error("Ganglia event:: duplicate value detected for field: " + name + " with old value: " + tmp);
        }

        return true;
    }

    public String getCepEvent() {
        if (!isReady()) {
            return null;
        } else {
            StringBuffer sbuf = new StringBuffer();
            sbuf.append("stream=" + streamName);
            sbuf.append(",CustomerID=" + AdapterProperties.getCustomerID());
            sbuf.append(",resourceType=server");
            Iterator index = cepFieldTypeMap.keySet().iterator();
            String key, val;
            while (index.hasNext()) {
                key = (String) index.next();
                //The Ganglia XML might have holes for some hosts because the
                //metrics are not configured for them.
                //Fill them with the correct default values first.
                val = cepFieldValueMap.get(key);
                val = setDefaultIfNull(val, cepFieldTypeMap.get(key));
                sbuf.append(",").append(key).append("=").append(val);
                if (key.equals("HostAddress")) {
                    sbuf.append(",resourceId=").append(val);
                }
            }
            return sbuf.toString();
        }
    }

    //-------- Event setup section --------
    //populated by the parsing of the event mapper XML file (EventMapperXmlDocParser)
    //-------- Event population section-------
    //invoked by NodeWatcher on GangliaXML parsing
    public void nodeStart(String nodeType, String nodeName, HashMap avList) {
        Iterator index;
        String evField, gVal;

        if (log.isDebugEnabled()) {
            log.debug("::Listener=" + this + "::NODE START:: Called on nodeType: " + nodeType + " and nodeName: " + nodeName);
            StringBuffer sbuf = new StringBuffer();
            String key;
            index = avList.keySet().iterator();
            while (index.hasNext()) {
                key = (String) index.next();
                sbuf.append("       ").append(key).append(" = ").append(avList.get(key)).append("   \n");
            }
            log.debug("\n----- The NODE attributes are : ------\n" + sbuf + "\n-----------------------------\n");
        }

        /*
         * If nodeType=HOST, all the evFields are in the same node. So,
         *      for each key in hostNodeNameFieldMap
         *          get the evField name;
         *          for each evField,
         *              get the value attribute name from fieldValAttrNameMap;
         *              get the value for the attribute from the avList
         *              add the value to the cepFieldValueMap
         */
        if (nodeType.equals("HOST")) {
            log.debug("\n---------- HOST node (" + nodeName + ") sent into CEP event (" + getEventName() + ")------------\n");
            index = hostNodeNameFieldMap.keySet().iterator();
            while (index.hasNext()) {
                evField = hostNodeNameFieldMap.get((String) index.next()); //get the evField
                gVal = fieldValAttrNameMap.get(evField);
                addEventParameter(evField, (String) avList.get(gVal));
            }
        } else if (nodeType.equals("METRIC")) {
            log.debug("\n---- METRIC node (" + nodeName + ") sent into CEP event (" + getEventName() + ")----\n");
            evField = metricNodeNameFieldMap.get(nodeName);
            gVal = fieldValAttrNameMap.get(evField);
            addEventParameter(evField, (String) avList.get(gVal));
        }
    }

    //if the event is completely populated (container node is fully parsed),
    //    then send the event to CEP
    public void nodeEnd(String nodeType) {
        log.debug("::Listener=" + this + "::NODE END:: Called on nodeType: " + nodeType);
        if (nodeType.equals(containerNode)) {

            setReady(); //event is complete and ready to send now
            String CEPEventData = getCepEvent();

            //If LoopControl is GANGLIA-LOG, just log the CEP events
            //If LoopControl is GANGLIA-LOG-CEP, log and send CEP events
            if (AdapterProperties.getLoopControl().toUpperCase().contains("LOG")) {
                //pretty print the CEP event
                log.info("\n\n----------- CEP EVENT FOUND-------------\n" + "{" + CEPEventData + "}\n---------------------------------\n");
            }

            String eventID = "";
            String statusId = "";

            if (AdapterProperties.getEnableRT()) {
                log.info("RT enabled");
                ETLAdapter etl = new ETLAdapter();
                statusId = etl.dumpCEPEvent(CEPEventData);
                etl = null;
                String id[] = statusId.split(":");
                eventID = id[0];
                statusId = id[1];
            }

            if (AdapterProperties.getEnableRT()) {
                CEPEventData = CEPEventData + ",eventID=" + eventID;
            } else {
                CEPEventData = CEPEventData + ",eventID=0";
                statusId="1";
            }
            //If loopControl is GANGLIA-CEP, simply send the CEP events
            if (AdapterProperties.getLoopControl().toUpperCase().contains("CEP")) {
                log.info("Sending Ganglia event (" + getEventName() + ") to CEP engine....");
                if (Integer.parseInt(statusId) > 0) {
                    if (!CepEngineConnector.sendMessage(CEPEventData)) {
                        log.error("Some error occurred while sending event to CEP engine. This event discarded...");
                    }
                }
            }
            //now clear the CEP event (field,value) hashmap to prepare for the next HOST nodes events
            cepFieldValueMap.clear();
            eventID = null;
            statusId = null;
            CEPEventData = null;
        }
    }
}
