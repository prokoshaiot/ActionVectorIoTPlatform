/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.prokosha.froniusadapter.configuration;

import com.prokosha.froniusadapter.FroniusMailModule;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import org.apache.log4j.Logger;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;

/**
 *
 * @author rekhas
 */
public class FroniusEventMapper {
    
    private static Logger logger = Logger.getLogger(FroniusEventMapper.class.getName());
    private static String xmlEventMapper = null;
    private static String eventStaticDataFile = null;
    private static String parserMappingFile = null;
    private static HashMap<String, HashMap> froniusEventSchema;
    private static HashMap<String, String> eventStaticData;
    private static HashMap<String, String> parserMapping;
    private static Object szParamList;
    
    public static boolean initializeFroniusEvents(String file) {
        xmlEventMapper = file;
        return readXMLFroniusEvents();
    }
    
    public static boolean readXMLFroniusEvents() {
        String evtName;
        String dataCollection;
        String szEvtField;
        String szFroName;
        String szFroValue;
        String szFroUnit;
        String szEvtType;
        try {
            SAXBuilder builder = new SAXBuilder();
            File xmlFile = new File(xmlEventMapper);
            Document document = (Document) builder.build(xmlFile);
            Element rootNode = document.getRootElement();
            List list = rootNode.getChildren("EventDefinition");
            HashMap<String, ArrayList> dataCollMap;
            for (int i = 0; i < list.size(); i++) {
                Element node = (Element) list.get(i);
                List cepEvtNodes = node.getChildren("CepEvent");
                froniusEventSchema = new HashMap(cepEvtNodes.size());
                logger.info("No. of events configured==>>" + cepEvtNodes.size());
                for (int k = 0; k < cepEvtNodes.size(); k++) {
                    Element cepEvtNode = (Element) cepEvtNodes.get(k);
                    evtName = cepEvtNode.getAttributeValue("evName");
                    logger.info("creating evet map for event==>>" + evtName);
                    dataCollMap = new HashMap();
                    List paramList = cepEvtNode.getChildren("Parameter");
                    logger.info("No of params configured==>>" + paramList.size());
                    for (int j = 0; j < paramList.size(); j++) {
                        Element paramNode = (Element) paramList.get(j);
                        logger.info("param attributes==>>" + paramNode.getAttributes().toString());
                        dataCollection = paramNode.getAttributeValue("dataCollection");
                        szEvtField = paramNode.getAttributeValue("evField");
                        szFroName = paramNode.getAttributeValue("fName");
                        szFroValue = paramNode.getAttributeValue("fVal");
                        szFroUnit = paramNode.getAttributeValue("fUnit");
                        szEvtType = paramNode.getAttributeValue("evType");
                        FroniusEventParam paramObj = new FroniusEventParam(szEvtField, szFroName, szFroValue, szFroUnit, szEvtType);
                        //logger.info("created FroniusEventParam==>>" + paramObj.toString());
                        if (dataCollMap.containsKey(dataCollection)) {
                            ((ArrayList) dataCollMap.get(dataCollection)).add(paramObj);
                            //logger.info("Data collection " + dataCollection + " found.");
                        } else {
                            ArrayList szAryLst = new ArrayList();
                            szAryLst.add(paramObj);
                            dataCollMap.put(dataCollection, szAryLst);
                            //logger.info("Data collection " + dataCollection + " not found. Created new one");
                        }
                    }
                    froniusEventSchema.put(evtName, dataCollMap);
                    logger.info("EventSchema");
                    logger.info("EventName==>>" + evtName);
                    Set dataCollSet = froniusEventSchema.get(evtName).keySet();
                    Iterator szDataCollItr = dataCollSet.iterator();
                    while (szDataCollItr.hasNext()) {
                        String dataColln = szDataCollItr.next().toString();
                        logger.info("datCollection==>>" + dataColln);
                        ArrayList szParamList = (ArrayList) froniusEventSchema.get(evtName).get(dataColln);
                        logger.info("ParamList==>>" + szParamList.toString());
                    }
                }
            }
            builder = null;
            xmlFile = null;
            document = null;
            rootNode = null;
            xmlEventMapper = null;
            return true;
        } catch (Exception e) {
            logger.error("Error in reading " + xmlEventMapper);
            logger.error("Send msg and e-mail" + e.toString());
            FroniusMailModule.sendSMS("Error in reading " + xmlEventMapper + "==>>" + e.toString());

            String szSubject = "FroniusAdapterError";
            String szBody = "Error in reading " + xmlEventMapper + "==>>" + e.toString();
            FroniusMailModule.sendMail(szSubject, szBody);
            e.printStackTrace();
        } finally {
            xmlEventMapper = null;
        }
        return false;
    }
    
    public static HashMap getFroniusEvents() {
        return froniusEventSchema;
    }
    
    public static boolean initializeEventStaticData(String fileName) {
        eventStaticDataFile = fileName;
        String evtName = "";
        try {
            String tmp;
            logger.debug("Loading properties file: " + eventStaticDataFile);
            Properties props = new Properties();
            FileInputStream fps = new FileInputStream(eventStaticDataFile);
            props.load(fps);
            fps.close();
            Set eventNames = props.keySet();
            Iterator propsItr = eventNames.iterator();
            eventStaticData = new HashMap(props.size());
            while (propsItr.hasNext()) {
                evtName = propsItr.next().toString();
                eventStaticData.put(evtName, props.getProperty(evtName));
            }
            props.clear();
            props = null;
            fps = null;
            evtName = null;
            return true;
        } catch (Exception e) {
            logger.error("Error in setting static data for event " + evtName + "==>>" + e.getMessage());
            logger.error("Send msg and e-mail" + e.toString());
            FroniusMailModule.sendSMS("Error in setting static data for event " + evtName + "==>>" + e.getMessage());

            String szSubject = "FroniusAdapterError";
            String szBody = "Error in setting static data for event " + evtName + "==>>" + e.getMessage();
            FroniusMailModule.sendMail(szSubject, szBody);
            e.printStackTrace();
        } finally {
            evtName = null;
        }
        return false;
    }
    
    public static HashMap getEventStaticData() {
        return eventStaticData;
    }
    
    public static boolean initializeParserMapping(String fileName) {
        parserMappingFile = fileName;
        String evtName = "";
        try {
            logger.debug("Loading properties file: " + parserMappingFile);
            
            Properties props = new Properties();
            FileInputStream fps = new FileInputStream(parserMappingFile);
            props.load(fps);
            fps.close();
            Set eventNames = props.keySet();
            Iterator propsItr = eventNames.iterator();
            parserMapping = new HashMap(props.size());
            while (propsItr.hasNext()) {
                evtName = propsItr.next().toString();
                parserMapping.put(evtName, props.getProperty(evtName));
            }
            evtName = null;
            props.clear();
            props = null;
            fps = null;
            return true;
        } catch (Exception e) {
            logger.error("Error in setting static data for event " + evtName + "==>>" + e.getMessage());
            logger.error("Send msg and e-mail" + e.toString());
            FroniusMailModule.sendSMS("Error in setting static data for event " + evtName + "==>>" + e.getMessage());

            String szSubject = "FroniusAdapterError";
            String szBody = "Error in setting static data for event " + evtName + "==>>" + e.getMessage();
            FroniusMailModule.sendMail(szSubject, szBody);
            e.printStackTrace();
        } finally {
            evtName = null;
        }
        return false;
    }
    
    public static String getParser(String evt, String dataColl) {
        try {
            return parserMapping.get(evt + "." + dataColl).toString();
        } catch (Exception e) {
            logger.error("Send msg and e-mail" + e.toString());
            FroniusMailModule.sendSMS("getParser failed for " + evt + "==>>" + e.getMessage());

            String szSubject = "FroniusAdapterError";
            String szBody = "getParser failed for " + evt + "==>>" + e.getMessage();
            FroniusMailModule.sendMail(szSubject, szBody);
            e.printStackTrace();
        }
        return null;
    }
}
