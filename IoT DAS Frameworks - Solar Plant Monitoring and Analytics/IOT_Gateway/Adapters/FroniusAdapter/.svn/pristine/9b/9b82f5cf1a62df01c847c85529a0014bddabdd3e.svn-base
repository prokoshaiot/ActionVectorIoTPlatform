package com.prokosha.froniusadapter;

import com.prokosha.froniusadapter.configuration.AdapterProperties;
import java.util.*;
import java.io.*;
import java.io.Writer;
import java.net.*;
import javax.mail.*;
import javax.mail.internet.*;
import org.apache.log4j.Logger;

public class FroniusMailModule {

    private static Logger logger = Logger.getLogger(FroniusMailModule.class.getName());
    static String emailIDs;
    static String fromAddress;
    static String smtpAddress;
    static int smtpPort;
    static String smtpUserName;
    static String smtpPassword;
    static String szSubject;
    static String szBody;
    static String[] mobNos;
    static String smsServerURL;
    static int smsServerPort;
    static boolean sendSMS;
    static boolean sendMail;

    public static boolean initialize() {
        try {
            emailIDs = AdapterProperties.getEmailIDs();
            fromAddress = AdapterProperties.getFromEmailID();
            smtpAddress = AdapterProperties.getSMTPAddress();
            smtpPort = AdapterProperties.getSMTPPort();
            smtpUserName = AdapterProperties.getSMTPUserName();
            smtpPassword = AdapterProperties.getSMTPPassword();
            mobNos = AdapterProperties.getMobileNos();
            smsServerURL = AdapterProperties.getSMSServerURL();
            smsServerPort = AdapterProperties.getSMSServerPort();
            sendSMS = AdapterProperties.getSendErrorSMS();
            sendMail = AdapterProperties.getSendErrorMail();
            return true;
        } catch (Exception e) {
            logger.error("Error in FroniusMailModule.initialize()==>>" + e.toString());
            logger.error("Send msg, e-mail");
            FroniusMailModule.sendSMS("Error in FroniusMailModule.initialize()==>>" + e.toString());

            String szSubject = "FroniusAdapterError";
            String szBody = "Error in FroniusMailModule.initialize()==>>" + e.toString();
            FroniusMailModule.sendMail(szSubject, szBody);
            e.printStackTrace();
        }
        return false;

    }

    public static boolean sendSMS(String Subject) {
        URL url = null;
        URLConnection conn = null;
        Writer writer;
        if (sendSMS) {
            try {
                url = new URL(smsServerURL);
                conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.connect();
                writer = new OutputStreamWriter(conn.getOutputStream());
                if (mobNos != null) {
                    //write parameters
                    for (int i = 0; i < mobNos.length; i++) {
                        //System.out.println(" Mobile Number :"+Mobile_Array[i]);
                        if (mobNos[i] == null || mobNos[i].equalsIgnoreCase("") || mobNos[i].equalsIgnoreCase("None")) {
                            System.out.println("The user doesnot have Mobile Number");
                        } else {
                            writer.write("to=" + mobNos[i] + "&text=" + Subject + "&from=" + smsServerPort);
                        }
                    }
                    writer.flush();
                    conn.getInputStream();
                } else {
                    logger.info("SMS Mobile nos not configured.");
                }
            } catch (IOException ex) {
                System.out.println("Number is Invalid");
                logger.error("Invalid Number==>>" + ex.toString());
                ex.printStackTrace();
                return false;
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
            logger.info("sms sent successfully");
            return true;
        } else {
            logger.info("Send Error SMS Disabled");
            return false;
        }
    }

    public static void sendMail(String szSubject, String szMessagebody) {
        if (sendMail) {
        try {
            if (emailIDs != null) {
                Transport trans = null;
                Properties properties = System.getProperties();
                properties.put("mail.smtp.host", smtpAddress);
                properties.put("mail.smtp.auth", "true");

                Session mailsession = Session.getInstance(properties, null);
                MimeMessage msg = new MimeMessage(mailsession);

                msg.setFrom(new InternetAddress(fromAddress));
                msg.setSubject(szSubject);
                msg.setSentDate(new java.util.Date());
                //msg.setHeader("x-MessageID", szKey1 + ":" + szKey2);

                InternetAddress[] toaddr = InternetAddress.parse(emailIDs, false);
                msg.setRecipients(Message.RecipientType.TO, toaddr);
                try {
                    trans = mailsession.getTransport("smtp");
                    trans.connect(smtpAddress, smtpPort, smtpUserName, smtpPassword);
                } catch (Exception e) {
                    System.out.println("Connecting to smtpserver failed");
                    e.printStackTrace();
                }
                msg.setText(szMessagebody);
                try {
                    Address[] a;
                    a = msg.getAllRecipients();
                    trans.sendMessage(msg, a);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                logger.info("Email IDs not configured.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        }else{
            logger.info("Send Error Mail disabled");
        }
    }
}
